   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"system_stm32f0xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	1
  19              		.global	SystemInit
  20              		.code	16
  21              		.thumb_func
  23              	SystemInit:
  24              	.LFB33:
  25              		.file 1 "../scr/system_stm32f0xx.c"
   1:../scr/system_stm32f0xx.c **** /**
   2:../scr/system_stm32f0xx.c ****   ******************************************************************************
   3:../scr/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:../scr/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:../scr/system_stm32f0xx.c ****   * @version V1.4.0
   6:../scr/system_stm32f0xx.c ****   * @date    05-December-2014
   7:../scr/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   8:../scr/system_stm32f0xx.c ****   *          This file contains the system clock configuration for STM32F0xx devices,
   9:../scr/system_stm32f0xx.c ****   *          and is generated by the clock configuration tool  
  10:../scr/system_stm32f0xx.c ****   *          STM32F0xx_Clock_Configuration_V1.0.0.xls
  11:../scr/system_stm32f0xx.c ****   *
  12:../scr/system_stm32f0xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:../scr/system_stm32f0xx.c ****   *     user application:
  14:../scr/system_stm32f0xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:../scr/system_stm32f0xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:../scr/system_stm32f0xx.c ****   *                      depending on the configuration made in the clock xls tool.
  17:../scr/system_stm32f0xx.c ****   *                      This function is called at startup just after reset and 
  18:../scr/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  19:../scr/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  20:../scr/system_stm32f0xx.c ****   *
  21:../scr/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:../scr/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick 
  23:../scr/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  24:../scr/system_stm32f0xx.c ****   *
  25:../scr/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:../scr/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  27:../scr/system_stm32f0xx.c ****   *                                 during program execution.
  28:../scr/system_stm32f0xx.c ****   *
  29:../scr/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz Range) is used as system clock source.
  30:../scr/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  31:../scr/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  32:../scr/system_stm32f0xx.c ****   *
  33:../scr/system_stm32f0xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:../scr/system_stm32f0xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:../scr/system_stm32f0xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:../scr/system_stm32f0xx.c ****   *
  37:../scr/system_stm32f0xx.c ****   * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
  38:../scr/system_stm32f0xx.c ****   *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
  39:../scr/system_stm32f0xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:../scr/system_stm32f0xx.c ****   *    value to your own configuration.
  41:../scr/system_stm32f0xx.c ****   *
  42:../scr/system_stm32f0xx.c ****   * 5. This file configures the system clock as follows:
  43:../scr/system_stm32f0xx.c ****   *=============================================================================
  44:../scr/system_stm32f0xx.c ****   *                         System Clock Configuration
  45:../scr/system_stm32f0xx.c ****   *=============================================================================
  46:../scr/system_stm32f0xx.c ****   *        System Clock source          | PLL(HSE)
  47:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  48:../scr/system_stm32f0xx.c ****   *        SYSCLK                       | 48000000 Hz
  49:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  50:../scr/system_stm32f0xx.c ****   *        HCLK                         | 48000000 Hz
  51:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  52:../scr/system_stm32f0xx.c ****   *        AHB Prescaler                | 1
  53:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  54:../scr/system_stm32f0xx.c ****   *        APB1 Prescaler               | 1
  55:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  56:../scr/system_stm32f0xx.c ****   *        APB2 Prescaler               | 1
  57:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  58:../scr/system_stm32f0xx.c ****   *        HSE Frequency                | 8000000 Hz
  59:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  60:../scr/system_stm32f0xx.c ****   *        PLL MUL                      | 6
  61:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  62:../scr/system_stm32f0xx.c ****   *        VDD                          | 3.3 V
  63:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  64:../scr/system_stm32f0xx.c ****   *        Flash Latency                | 1 WS
  65:../scr/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  66:../scr/system_stm32f0xx.c ****   *=============================================================================
  67:../scr/system_stm32f0xx.c ****   ******************************************************************************
  68:../scr/system_stm32f0xx.c ****   * @attention
  69:../scr/system_stm32f0xx.c ****   *
  70:../scr/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  71:../scr/system_stm32f0xx.c ****   *
  72:../scr/system_stm32f0xx.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  73:../scr/system_stm32f0xx.c ****   * You may not use this file except in compliance with the License.
  74:../scr/system_stm32f0xx.c ****   * You may obtain a copy of the License at:
  75:../scr/system_stm32f0xx.c ****   *
  76:../scr/system_stm32f0xx.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  77:../scr/system_stm32f0xx.c ****   *
  78:../scr/system_stm32f0xx.c ****   * Unless required by applicable law or agreed to in writing, software 
  79:../scr/system_stm32f0xx.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  80:../scr/system_stm32f0xx.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  81:../scr/system_stm32f0xx.c ****   * See the License for the specific language governing permissions and
  82:../scr/system_stm32f0xx.c ****   * limitations under the License.
  83:../scr/system_stm32f0xx.c ****   *
  84:../scr/system_stm32f0xx.c ****   ******************************************************************************
  85:../scr/system_stm32f0xx.c ****   */
  86:../scr/system_stm32f0xx.c **** 
  87:../scr/system_stm32f0xx.c **** /** @addtogroup CMSIS
  88:../scr/system_stm32f0xx.c ****   * @{
  89:../scr/system_stm32f0xx.c ****   */
  90:../scr/system_stm32f0xx.c **** 
  91:../scr/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  92:../scr/system_stm32f0xx.c ****   * @{
  93:../scr/system_stm32f0xx.c ****   */  
  94:../scr/system_stm32f0xx.c ****   
  95:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  96:../scr/system_stm32f0xx.c ****   * @{
  97:../scr/system_stm32f0xx.c ****   */
  98:../scr/system_stm32f0xx.c **** 
  99:../scr/system_stm32f0xx.c **** #include "stm32f0xx.h"
 100:../scr/system_stm32f0xx.c **** 
 101:../scr/system_stm32f0xx.c **** /**
 102:../scr/system_stm32f0xx.c ****   * @}
 103:../scr/system_stm32f0xx.c ****   */
 104:../scr/system_stm32f0xx.c **** 
 105:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
 106:../scr/system_stm32f0xx.c ****   * @{
 107:../scr/system_stm32f0xx.c ****   */
 108:../scr/system_stm32f0xx.c **** 
 109:../scr/system_stm32f0xx.c **** /**
 110:../scr/system_stm32f0xx.c ****   * @}
 111:../scr/system_stm32f0xx.c ****   */
 112:../scr/system_stm32f0xx.c **** 
 113:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
 114:../scr/system_stm32f0xx.c ****   * @{
 115:../scr/system_stm32f0xx.c ****   */
 116:../scr/system_stm32f0xx.c **** /**
 117:../scr/system_stm32f0xx.c ****   * @}
 118:../scr/system_stm32f0xx.c ****   */
 119:../scr/system_stm32f0xx.c **** 
 120:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 121:../scr/system_stm32f0xx.c ****   * @{
 122:../scr/system_stm32f0xx.c ****   */
 123:../scr/system_stm32f0xx.c **** 
 124:../scr/system_stm32f0xx.c **** /**
 125:../scr/system_stm32f0xx.c ****   * @}
 126:../scr/system_stm32f0xx.c ****   */
 127:../scr/system_stm32f0xx.c **** 
 128:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 129:../scr/system_stm32f0xx.c ****   * @{
 130:../scr/system_stm32f0xx.c ****   */
 131:../scr/system_stm32f0xx.c **** uint32_t SystemCoreClock    = 48000000;
 132:../scr/system_stm32f0xx.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 133:../scr/system_stm32f0xx.c **** 
 134:../scr/system_stm32f0xx.c **** /**
 135:../scr/system_stm32f0xx.c ****   * @}
 136:../scr/system_stm32f0xx.c ****   */
 137:../scr/system_stm32f0xx.c **** 
 138:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
 139:../scr/system_stm32f0xx.c ****   * @{
 140:../scr/system_stm32f0xx.c ****   */
 141:../scr/system_stm32f0xx.c **** 
 142:../scr/system_stm32f0xx.c **** static void SetSysClock(void);
 143:../scr/system_stm32f0xx.c **** 
 144:../scr/system_stm32f0xx.c **** /**
 145:../scr/system_stm32f0xx.c ****   * @}
 146:../scr/system_stm32f0xx.c ****   */
 147:../scr/system_stm32f0xx.c **** 
 148:../scr/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 149:../scr/system_stm32f0xx.c ****   * @{
 150:../scr/system_stm32f0xx.c ****   */
 151:../scr/system_stm32f0xx.c **** 
 152:../scr/system_stm32f0xx.c **** /**
 153:../scr/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 154:../scr/system_stm32f0xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 155:../scr/system_stm32f0xx.c ****   *         SystemCoreClock variable.
 156:../scr/system_stm32f0xx.c ****   * @param  None
 157:../scr/system_stm32f0xx.c ****   * @retval None
 158:../scr/system_stm32f0xx.c ****   */
 159:../scr/system_stm32f0xx.c **** void SystemInit (void)
 160:../scr/system_stm32f0xx.c **** {    
  26              		.loc 1 160 0
  27              		.cfi_startproc
 161:../scr/system_stm32f0xx.c ****   /* Set HSION bit */
 162:../scr/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  28              		.loc 1 162 0
  29 0000 364B     		ldr	r3, .L16
 160:../scr/system_stm32f0xx.c **** {    
  30              		.loc 1 160 0
  31 0002 07B5     		push	{r0, r1, r2, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 0, -16
  35              		.cfi_offset 1, -12
  36              		.cfi_offset 2, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 162 0
  39 0004 1968     		ldr	r1, [r3]
  40 0006 0122     		mov	r2, #1
  41 0008 1143     		orr	r1, r2
  42 000a 1960     		str	r1, [r3]
 163:../scr/system_stm32f0xx.c **** 
 164:../scr/system_stm32f0xx.c **** #if defined(STM32F051)  
 165:../scr/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 166:../scr/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80C;
 167:../scr/system_stm32f0xx.c **** #else
 168:../scr/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 169:../scr/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80C;
  43              		.loc 1 169 0
  44 000c 5868     		ldr	r0, [r3, #4]
  45 000e 3449     		ldr	r1, .L16+4
  46 0010 0140     		and	r1, r0
  47 0012 5960     		str	r1, [r3, #4]
 170:../scr/system_stm32f0xx.c **** #endif /* STM32F051 */
 171:../scr/system_stm32f0xx.c ****   
 172:../scr/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 173:../scr/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  48              		.loc 1 173 0
  49 0014 1868     		ldr	r0, [r3]
  50 0016 3349     		ldr	r1, .L16+8
  51 0018 0140     		and	r1, r0
  52 001a 1960     		str	r1, [r3]
 174:../scr/system_stm32f0xx.c **** 
 175:../scr/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 176:../scr/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  53              		.loc 1 176 0
  54 001c 1868     		ldr	r0, [r3]
  55 001e 3249     		ldr	r1, .L16+12
  56 0020 0140     		and	r1, r0
  57 0022 1960     		str	r1, [r3]
 177:../scr/system_stm32f0xx.c **** 
 178:../scr/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 179:../scr/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
  58              		.loc 1 179 0
  59 0024 5868     		ldr	r0, [r3, #4]
  60 0026 3149     		ldr	r1, .L16+16
  61 0028 0140     		and	r1, r0
  62 002a 5960     		str	r1, [r3, #4]
 180:../scr/system_stm32f0xx.c **** 
 181:../scr/system_stm32f0xx.c ****   /* Reset PREDIV1[3:0] bits */
 182:../scr/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  63              		.loc 1 182 0
  64 002c D96A     		ldr	r1, [r3, #44]
  65 002e 0F20     		mov	r0, #15
  66 0030 8143     		bic	r1, r0
  67 0032 D962     		str	r1, [r3, #44]
 183:../scr/system_stm32f0xx.c **** 
 184:../scr/system_stm32f0xx.c ****   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
 185:../scr/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
  68              		.loc 1 185 0
  69 0034 186B     		ldr	r0, [r3, #48]
  70 0036 2E49     		ldr	r1, .L16+20
  71 0038 0140     		and	r1, r0
  72 003a 1963     		str	r1, [r3, #48]
 186:../scr/system_stm32f0xx.c **** 
 187:../scr/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 188:../scr/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  73              		.loc 1 188 0
  74 003c 596B     		ldr	r1, [r3, #52]
  75              	.LBB4:
  76              	.LBB5:
 189:../scr/system_stm32f0xx.c **** 
 190:../scr/system_stm32f0xx.c ****   /* Disable all interrupts */
 191:../scr/system_stm32f0xx.c ****   RCC->CIR = 0x00000000;
 192:../scr/system_stm32f0xx.c **** 
 193:../scr/system_stm32f0xx.c ****   /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
 194:../scr/system_stm32f0xx.c ****   SetSysClock();
 195:../scr/system_stm32f0xx.c **** }
 196:../scr/system_stm32f0xx.c **** 
 197:../scr/system_stm32f0xx.c **** /**
 198:../scr/system_stm32f0xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 199:../scr/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 200:../scr/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 201:../scr/system_stm32f0xx.c ****   *         other parameters.
 202:../scr/system_stm32f0xx.c ****   *
 203:../scr/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 204:../scr/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 205:../scr/system_stm32f0xx.c ****   *         based on this variable will be incorrect.         
 206:../scr/system_stm32f0xx.c ****   *
 207:../scr/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real 
 208:../scr/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 209:../scr/system_stm32f0xx.c ****   *           constant and the selected clock source:
 210:../scr/system_stm32f0xx.c ****   *
 211:../scr/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 212:../scr/system_stm32f0xx.c ****   *                                              
 213:../scr/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 214:../scr/system_stm32f0xx.c ****   *                          
 215:../scr/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 216:../scr/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 217:../scr/system_stm32f0xx.c ****   *
 218:../scr/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
 219:../scr/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 220:../scr/system_stm32f0xx.c ****   *             in voltage and temperature.
 221:../scr/system_stm32f0xx.c ****   *
 222:../scr/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
 223:../scr/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 224:../scr/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 225:../scr/system_stm32f0xx.c ****   *              have wrong result.
 226:../scr/system_stm32f0xx.c ****   *
 227:../scr/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 228:../scr/system_stm32f0xx.c ****   *           value for HSE crystal.
 229:../scr/system_stm32f0xx.c ****   * @param  None
 230:../scr/system_stm32f0xx.c ****   * @retval None
 231:../scr/system_stm32f0xx.c ****   */
 232:../scr/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 233:../scr/system_stm32f0xx.c **** {
 234:../scr/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 235:../scr/system_stm32f0xx.c **** 
 236:../scr/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 237:../scr/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 238:../scr/system_stm32f0xx.c ****   
 239:../scr/system_stm32f0xx.c ****   switch (tmp)
 240:../scr/system_stm32f0xx.c ****   {
 241:../scr/system_stm32f0xx.c ****     case 0x00:  /* HSI used as system clock */
 242:../scr/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 243:../scr/system_stm32f0xx.c ****       break;
 244:../scr/system_stm32f0xx.c ****     case 0x04:  /* HSE used as system clock */
 245:../scr/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 246:../scr/system_stm32f0xx.c ****       break;
 247:../scr/system_stm32f0xx.c ****     case 0x08:  /* PLL used as system clock */
 248:../scr/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 249:../scr/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 250:../scr/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 251:../scr/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 252:../scr/system_stm32f0xx.c ****       
 253:../scr/system_stm32f0xx.c ****       if (pllsource == 0x00)
 254:../scr/system_stm32f0xx.c ****       {
 255:../scr/system_stm32f0xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 256:../scr/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 257:../scr/system_stm32f0xx.c ****       }
 258:../scr/system_stm32f0xx.c ****       else
 259:../scr/system_stm32f0xx.c ****       {
 260:../scr/system_stm32f0xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 261:../scr/system_stm32f0xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 262:../scr/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 263:../scr/system_stm32f0xx.c ****       }      
 264:../scr/system_stm32f0xx.c ****       break;
 265:../scr/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 266:../scr/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 267:../scr/system_stm32f0xx.c ****       break;
 268:../scr/system_stm32f0xx.c ****   }
 269:../scr/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 270:../scr/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 271:../scr/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 272:../scr/system_stm32f0xx.c ****   /* HCLK clock frequency */
 273:../scr/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;  
 274:../scr/system_stm32f0xx.c **** }
 275:../scr/system_stm32f0xx.c **** 
 276:../scr/system_stm32f0xx.c **** /**
 277:../scr/system_stm32f0xx.c ****   * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
 278:../scr/system_stm32f0xx.c ****   *         settings.
 279:../scr/system_stm32f0xx.c ****   * @note   This function should be called only once the RCC clock configuration
 280:../scr/system_stm32f0xx.c ****   *         is reset to the default reset state (done in SystemInit() function).
 281:../scr/system_stm32f0xx.c ****   * @param  None
 282:../scr/system_stm32f0xx.c ****   * @retval None
 283:../scr/system_stm32f0xx.c ****   */
 284:../scr/system_stm32f0xx.c **** static void SetSysClock(void)
 285:../scr/system_stm32f0xx.c **** {
 286:../scr/system_stm32f0xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 287:../scr/system_stm32f0xx.c ****   
 288:../scr/system_stm32f0xx.c ****   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
 289:../scr/system_stm32f0xx.c ****   /* Enable HSE */    
 290:../scr/system_stm32f0xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 291:../scr/system_stm32f0xx.c ****  
 292:../scr/system_stm32f0xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 293:../scr/system_stm32f0xx.c ****   do
 294:../scr/system_stm32f0xx.c ****   {
 295:../scr/system_stm32f0xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  77              		.loc 1 295 0
  78 003e 8020     		mov	r0, #128
  79              	.LBE5:
  80              	.LBE4:
 188:../scr/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  81              		.loc 1 188 0
  82 0040 9143     		bic	r1, r2
 191:../scr/system_stm32f0xx.c ****   RCC->CIR = 0x00000000;
  83              		.loc 1 191 0
  84 0042 0022     		mov	r2, #0
 188:../scr/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  85              		.loc 1 188 0
  86 0044 5963     		str	r1, [r3, #52]
 191:../scr/system_stm32f0xx.c ****   RCC->CIR = 0x00000000;
  87              		.loc 1 191 0
  88 0046 9A60     		str	r2, [r3, #8]
  89              	.LBB7:
  90              	.LBB6:
 286:../scr/system_stm32f0xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  91              		.loc 1 286 0
  92 0048 0092     		str	r2, [sp]
  93              	.LVL0:
  94 004a 0192     		str	r2, [sp, #4]
  95              	.LVL1:
 290:../scr/system_stm32f0xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  96              		.loc 1 290 0
  97 004c 1968     		ldr	r1, [r3]
  98 004e 8022     		mov	r2, #128
  99 0050 5202     		lsl	r2, r2, #9
 100 0052 0A43     		orr	r2, r1
 101 0054 1A60     		str	r2, [r3]
 296:../scr/system_stm32f0xx.c ****     StartUpCounter++;  
 297:../scr/system_stm32f0xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 102              		.loc 1 297 0
 103 0056 A022     		mov	r2, #160
 295:../scr/system_stm32f0xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 104              		.loc 1 295 0
 105 0058 8002     		lsl	r0, r0, #10
 106              		.loc 1 297 0
 107 005a D201     		lsl	r2, r2, #7
 108              	.L3:
 295:../scr/system_stm32f0xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 109              		.loc 1 295 0
 110 005c 1968     		ldr	r1, [r3]
 111 005e 0140     		and	r1, r0
 112              	.LVL2:
 113 0060 0191     		str	r1, [sp, #4]
 114              	.LVL3:
 296:../scr/system_stm32f0xx.c ****     StartUpCounter++;  
 115              		.loc 1 296 0
 116 0062 0099     		ldr	r1, [sp]
 117              	.LVL4:
 118 0064 0131     		add	r1, r1, #1
 119              	.LVL5:
 120 0066 0091     		str	r1, [sp]
 121              	.LVL6:
 122              		.loc 1 297 0
 123 0068 0199     		ldr	r1, [sp, #4]
 124              	.LVL7:
 125 006a 0029     		cmp	r1, #0
 126 006c 02D1     		bne	.L2
 127 006e 0099     		ldr	r1, [sp]
 128 0070 9142     		cmp	r1, r2
 129 0072 F3D1     		bne	.L3
 130              	.L2:
 298:../scr/system_stm32f0xx.c **** 
 299:../scr/system_stm32f0xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 131              		.loc 1 299 0
 132 0074 1968     		ldr	r1, [r3]
 133 0076 8022     		mov	r2, #128
 134 0078 9202     		lsl	r2, r2, #10
 135 007a 0A40     		and	r2, r1
 136 007c 00D0     		beq	.L4
 300:../scr/system_stm32f0xx.c ****   {
 301:../scr/system_stm32f0xx.c ****     HSEStatus = (uint32_t)0x01;
 137              		.loc 1 301 0
 138 007e 0122     		mov	r2, #1
 139              	.L4:
 302:../scr/system_stm32f0xx.c ****   }
 303:../scr/system_stm32f0xx.c ****   else
 304:../scr/system_stm32f0xx.c ****   {
 305:../scr/system_stm32f0xx.c ****     HSEStatus = (uint32_t)0x00;
 140              		.loc 1 305 0
 141 0080 0192     		str	r2, [sp, #4]
 306:../scr/system_stm32f0xx.c ****   }  
 307:../scr/system_stm32f0xx.c **** 
 308:../scr/system_stm32f0xx.c ****   if (HSEStatus == (uint32_t)0x01)
 142              		.loc 1 308 0
 143 0082 019A     		ldr	r2, [sp, #4]
 144 0084 012A     		cmp	r2, #1
 145 0086 27D1     		bne	.L1
 309:../scr/system_stm32f0xx.c ****   {
 310:../scr/system_stm32f0xx.c ****     /* Enable Prefetch Buffer and set Flash Latency */
 311:../scr/system_stm32f0xx.c ****     FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 146              		.loc 1 311 0
 147 0088 1A4A     		ldr	r2, .L16+24
 148 008a 1121     		mov	r1, #17
 149 008c 1160     		str	r1, [r2]
 312:../scr/system_stm32f0xx.c ****  
 313:../scr/system_stm32f0xx.c ****     /* HCLK = SYSCLK */
 314:../scr/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 150              		.loc 1 314 0
 151 008e 5A68     		ldr	r2, [r3, #4]
 152 0090 5A60     		str	r2, [r3, #4]
 315:../scr/system_stm32f0xx.c ****       
 316:../scr/system_stm32f0xx.c ****     /* PCLK = HCLK */
 317:../scr/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 153              		.loc 1 317 0
 154 0092 5A68     		ldr	r2, [r3, #4]
 155 0094 5A60     		str	r2, [r3, #4]
 318:../scr/system_stm32f0xx.c **** 
 319:../scr/system_stm32f0xx.c ****     /* PLL configuration = HSE * 6 = 48 MHz */
 320:../scr/system_stm32f0xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 156              		.loc 1 320 0
 157 0096 5968     		ldr	r1, [r3, #4]
 158 0098 174A     		ldr	r2, .L16+28
 159 009a 0A40     		and	r2, r1
 160 009c 5A60     		str	r2, [r3, #4]
 321:../scr/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6
 161              		.loc 1 321 0
 162 009e 5968     		ldr	r1, [r3, #4]
 163 00a0 8822     		mov	r2, #136
 164 00a2 5203     		lsl	r2, r2, #13
 165 00a4 0A43     		orr	r2, r1
 166 00a6 5A60     		str	r2, [r3, #4]
 322:../scr/system_stm32f0xx.c ****             
 323:../scr/system_stm32f0xx.c ****     /* Enable PLL */
 324:../scr/system_stm32f0xx.c ****     RCC->CR |= RCC_CR_PLLON;
 167              		.loc 1 324 0
 168 00a8 1968     		ldr	r1, [r3]
 169 00aa 8022     		mov	r2, #128
 170 00ac 5204     		lsl	r2, r2, #17
 171 00ae 0A43     		orr	r2, r1
 325:../scr/system_stm32f0xx.c **** 
 326:../scr/system_stm32f0xx.c ****     /* Wait till PLL is ready */
 327:../scr/system_stm32f0xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 172              		.loc 1 327 0
 173 00b0 8021     		mov	r1, #128
 324:../scr/system_stm32f0xx.c ****     RCC->CR |= RCC_CR_PLLON;
 174              		.loc 1 324 0
 175 00b2 1A60     		str	r2, [r3]
 176              		.loc 1 327 0
 177 00b4 8904     		lsl	r1, r1, #18
 178              	.L7:
 179 00b6 1868     		ldr	r0, [r3]
 180 00b8 084A     		ldr	r2, .L16
 181 00ba 0842     		tst	r0, r1
 182 00bc FBD0     		beq	.L7
 328:../scr/system_stm32f0xx.c ****     {
 329:../scr/system_stm32f0xx.c ****     }
 330:../scr/system_stm32f0xx.c **** 
 331:../scr/system_stm32f0xx.c ****     /* Select PLL as system clock source */
 332:../scr/system_stm32f0xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 183              		.loc 1 332 0
 184 00be 5168     		ldr	r1, [r2, #4]
 185 00c0 0320     		mov	r0, #3
 186 00c2 8143     		bic	r1, r0
 187 00c4 5160     		str	r1, [r2, #4]
 333:../scr/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 188              		.loc 1 333 0
 189 00c6 5168     		ldr	r1, [r2, #4]
 190 00c8 0220     		mov	r0, #2
 191 00ca 0143     		orr	r1, r0
 192 00cc 5160     		str	r1, [r2, #4]
 334:../scr/system_stm32f0xx.c **** 
 335:../scr/system_stm32f0xx.c ****     /* Wait till PLL is used as system clock source */
 336:../scr/system_stm32f0xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 193              		.loc 1 336 0
 194 00ce 0C21     		mov	r1, #12
 195              	.L8:
 196 00d0 5A68     		ldr	r2, [r3, #4]
 197 00d2 0A40     		and	r2, r1
 198 00d4 082A     		cmp	r2, #8
 199 00d6 FBD1     		bne	.L8
 200              	.L1:
 201              	.LBE6:
 202              	.LBE7:
 195:../scr/system_stm32f0xx.c **** }
 203              		.loc 1 195 0
 204              		@ sp needed for prologue
 205 00d8 07BD     		pop	{r0, r1, r2, pc}
 206              	.L17:
 207 00da C046     		.align	2
 208              	.L16:
 209 00dc 00100240 		.word	1073876992
 210 00e0 0CB8FF08 		.word	150976524
 211 00e4 FFFFF6FE 		.word	-17367041
 212 00e8 FFFFFBFF 		.word	-262145
 213 00ec FFFFC0FF 		.word	-4128769
 214 00f0 ACFEFFFF 		.word	-340
 215 00f4 00200240 		.word	1073881088
 216 00f8 FF7FC0FF 		.word	-4161537
 217              		.cfi_endproc
 218              	.LFE33:
 220              		.global	__aeabi_uidiv
 221              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 222              		.align	1
 223              		.global	SystemCoreClockUpdate
 224              		.code	16
 225              		.thumb_func
 227              	SystemCoreClockUpdate:
 228              	.LFB34:
 233:../scr/system_stm32f0xx.c **** {
 229              		.loc 1 233 0
 230              		.cfi_startproc
 231              	.LVL8:
 232 0000 70B5     		push	{r4, r5, r6, lr}
 233              	.LCFI1:
 234              		.cfi_def_cfa_offset 16
 235              		.cfi_offset 4, -16
 236              		.cfi_offset 5, -12
 237              		.cfi_offset 6, -8
 238              		.cfi_offset 14, -4
 237:../scr/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 239              		.loc 1 237 0
 240 0002 154C     		ldr	r4, .L26
 241 0004 0C23     		mov	r3, #12
 242 0006 6268     		ldr	r2, [r4, #4]
 243              	.LVL9:
 244 0008 144D     		ldr	r5, .L26+4
 245 000a 1340     		and	r3, r2
 246              	.LVL10:
 239:../scr/system_stm32f0xx.c ****   switch (tmp)
 247              		.loc 1 239 0
 248 000c 042B     		cmp	r3, #4
 249 000e 01D0     		beq	.L21
 250 0010 082B     		cmp	r3, #8
 251 0012 02D0     		beq	.L22
 252              	.L21:
 245:../scr/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 253              		.loc 1 245 0
 254 0014 124B     		ldr	r3, .L26+8
 255              	.LVL11:
 256 0016 2B60     		str	r3, [r5]
 246:../scr/system_stm32f0xx.c ****       break;
 257              		.loc 1 246 0
 258 0018 14E0     		b	.L23
 259              	.LVL12:
 260              	.L22:
 249:../scr/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 261              		.loc 1 249 0
 262 001a 6668     		ldr	r6, [r4, #4]
 263              	.LVL13:
 253:../scr/system_stm32f0xx.c ****       if (pllsource == 0x00)
 264              		.loc 1 253 0
 265 001c C023     		mov	r3, #192
 266              	.LVL14:
 249:../scr/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 267              		.loc 1 249 0
 268 001e B602     		lsl	r6, r6, #10
 269              	.LVL15:
 250:../scr/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 270              		.loc 1 250 0
 271 0020 6268     		ldr	r2, [r4, #4]
 272              	.LVL16:
 251:../scr/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 273              		.loc 1 251 0
 274 0022 360F     		lsr	r6, r6, #28
 253:../scr/system_stm32f0xx.c ****       if (pllsource == 0x00)
 275              		.loc 1 253 0
 276 0024 5B02     		lsl	r3, r3, #9
 251:../scr/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 277              		.loc 1 251 0
 278 0026 0236     		add	r6, r6, #2
 279              	.LVL17:
 253:../scr/system_stm32f0xx.c ****       if (pllsource == 0x00)
 280              		.loc 1 253 0
 281 0028 1A42     		tst	r2, r3
 282 002a 02D1     		bne	.L24
 256:../scr/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 283              		.loc 1 256 0
 284 002c 0D4B     		ldr	r3, .L26+12
 285 002e 5E43     		mul	r6, r3
 286              	.LVL18:
 287 0030 07E0     		b	.L25
 288              	.LVL19:
 289              	.L24:
 260:../scr/system_stm32f0xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 290              		.loc 1 260 0
 291 0032 E16A     		ldr	r1, [r4, #44]
 292              	.LVL20:
 293 0034 0F23     		mov	r3, #15
 294 0036 1940     		and	r1, r3
 295              	.LVL21:
 296 0038 0131     		add	r1, r1, #1
 297              	.LVL22:
 262:../scr/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 298              		.loc 1 262 0
 299 003a 0948     		ldr	r0, .L26+8
 300 003c FFF7FEFF 		bl	__aeabi_uidiv
 301              	.LVL23:
 302 0040 4643     		mul	r6, r0
 303              	.LVL24:
 304              	.L25:
 305 0042 2E60     		str	r6, [r5]
 306              	.L23:
 271:../scr/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 307              		.loc 1 271 0
 308 0044 6368     		ldr	r3, [r4, #4]
 309 0046 084A     		ldr	r2, .L26+16
 310 0048 1B06     		lsl	r3, r3, #24
 311 004a 1B0F     		lsr	r3, r3, #28
 312 004c D25C     		ldrb	r2, [r2, r3]
 313              	.LVL25:
 273:../scr/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;  
 314              		.loc 1 273 0
 315 004e 034B     		ldr	r3, .L26+4
 274:../scr/system_stm32f0xx.c **** }
 316              		.loc 1 274 0
 317              		@ sp needed for prologue
 273:../scr/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;  
 318              		.loc 1 273 0
 319 0050 1968     		ldr	r1, [r3]
 320 0052 D140     		lsr	r1, r1, r2
 321 0054 1960     		str	r1, [r3]
 274:../scr/system_stm32f0xx.c **** }
 322              		.loc 1 274 0
 323 0056 70BD     		pop	{r4, r5, r6, pc}
 324              	.L27:
 325              		.align	2
 326              	.L26:
 327 0058 00100240 		.word	1073876992
 328 005c 00000000 		.word	.LANCHOR0
 329 0060 00127A00 		.word	8000000
 330 0064 00093D00 		.word	4000000
 331 0068 00000000 		.word	.LANCHOR1
 332              		.cfi_endproc
 333              	.LFE34:
 335              		.global	AHBPrescTable
 336              		.global	SystemCoreClock
 337              		.section	.data.AHBPrescTable,"aw",%progbits
 338              		.set	.LANCHOR1,. + 0
 341              	AHBPrescTable:
 342 0000 00       		.byte	0
 343 0001 00       		.byte	0
 344 0002 00       		.byte	0
 345 0003 00       		.byte	0
 346 0004 00       		.byte	0
 347 0005 00       		.byte	0
 348 0006 00       		.byte	0
 349 0007 00       		.byte	0
 350 0008 01       		.byte	1
 351 0009 02       		.byte	2
 352 000a 03       		.byte	3
 353 000b 04       		.byte	4
 354 000c 06       		.byte	6
 355 000d 07       		.byte	7
 356 000e 08       		.byte	8
 357 000f 09       		.byte	9
 358              		.section	.data.SystemCoreClock,"aw",%progbits
 359              		.align	2
 360              		.set	.LANCHOR0,. + 0
 363              	SystemCoreClock:
 364 0000 006CDC02 		.word	48000000
 365              		.text
 366              	.Letext0:
 367              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 368              		.file 3 "../scr/stm32f0xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f0xx.c
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:18     .text.SystemInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:23     .text.SystemInit:00000000 SystemInit
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:209    .text.SystemInit:000000dc $d
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:222    .text.SystemCoreClockUpdate:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:227    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:327    .text.SystemCoreClockUpdate:00000058 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:341    .data.AHBPrescTable:00000000 AHBPrescTable
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:363    .data.SystemCoreClock:00000000 SystemCoreClock
C:\Users\THANGN~1\AppData\Local\Temp\ccT8Gq51.s:359    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6

UNDEFINED SYMBOLS
__aeabi_uidiv
