   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_wwdg.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.WWDG_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	WWDG_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	WWDG_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @file    stm32f0xx_wwdg.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          functionalities of the Window watchdog (WWDG) peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *           + Prescaler, Refresh window and Counter configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *           + WWDG activation
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *           + Interrupts and flags management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *             
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *  @verbatim
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *    
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ============================================================================== 
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****                            ##### WWDG features ##### 
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ============================================================================== 
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] Once enabled the WWDG generates a system reset on expiry of a programmed
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         time period, unless the program refreshes the counter (downcounter) 
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         before to reach 0x3F value (i.e. a reset is generated when the counter
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         value rolls over from 0x40 to 0x3F). 
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] An MCU reset is also generated if the counter value is refreshed
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****          before the counter has reached the refresh window value. This 
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****          implies that the counter must be refreshed in a limited window.
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] Once enabled the WWDG cannot be disabled except by a system reset.
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****          reset occurs.
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] The WWDG counter input clock is derived from the APB clock divided 
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****          by a programmable prescaler.
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] WWDG counter clock = PCLK1 / Prescaler.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] WWDG timeout = (WWDG counter clock) * (counter value).
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..] Min-max timeout value @32MHz (PCLK1): ~85us / ~43ms.
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****                        ##### How to use this driver ##### 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     [..]
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         (#) Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             function.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****               
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         (#) Configure the WWDG prescaler using WWDG_SetPrescaler() function.
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****                              
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         (#) Configure the WWDG refresh window using WWDG_SetWindowValue() function.
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****               
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         (#) Set the WWDG counter value and start it using WWDG_Enable() function.
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             When the WWDG is enabled the counter value should be configured to 
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             a value greater than 0x40 to prevent generating an immediate reset.
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****               
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         (#) Optionally you can enable the Early wakeup interrupt which is 
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             generated when the counter reach 0x40.
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             Once enabled this interrupt cannot be disabled except by a system reset.
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****                    
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****         (#) Then the application program must refresh the WWDG counter at regular
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             intervals during normal operation to prevent an MCU reset, using
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             WWDG_SetCounter() function. This operation must occur only when
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             the counter value is lower than the refresh window value, 
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****             programmed using WWDG_SetWindowValue().
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *  @endverbatim
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ******************************************************************************
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @attention
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * You may not use this file except in compliance with the License.
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * You may obtain a copy of the License at:
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * Unless required by applicable law or agreed to in writing, software 
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * See the License for the specific language governing permissions and
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * limitations under the License.
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ******************************************************************************
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Includes ------------------------------------------------------------------*/
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** #include "stm32f0xx_wwdg.h"
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** #include "stm32f0xx_rcc.h"
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @{
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /** @defgroup WWDG 
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief WWDG driver modules
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @{
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Private define ------------------------------------------------------------*/
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* --------------------- WWDG registers bit mask ---------------------------- */
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* CFR register bit mask */
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** #define BIT_MASK          ((uint8_t)0x7F)
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /* Private functions ---------------------------------------------------------*/
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /** @defgroup WWDG_Private_Functions
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @{
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****  *  @brief   Prescaler, Refresh window and Counter configuration functions 
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****  *
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** @verbatim   
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     ##### Prescaler, Refresh window and Counter configuration functions #####
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================  
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** @endverbatim
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @{
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  None
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_DeInit(void)
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
  26              		.loc 1 133 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 4, -8
  32              		.cfi_offset 14, -4
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  33              		.loc 1 134 0
  34 0002 8024     		mov	r4, #128
  35 0004 2401     		lsl	r4, r4, #4
  36 0006 201C     		mov	r0, r4
  37 0008 0121     		mov	r1, #1
  38 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  39              	.LVL0:
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  40              		.loc 1 135 0
  41 000e 201C     		mov	r0, r4
  42 0010 0021     		mov	r1, #0
  43 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  44              	.LVL1:
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
  45              		.loc 1 136 0
  46              		@ sp needed for prologue
  47 0016 10BD     		pop	{r4, pc}
  48              		.cfi_endproc
  49              	.LFE33:
  51              		.section	.text.WWDG_SetPrescaler,"ax",%progbits
  52              		.align	1
  53              		.global	WWDG_SetPrescaler
  54              		.code	16
  55              		.thumb_func
  57              	WWDG_SetPrescaler:
  58              	.LFB34:
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Sets the WWDG Prescaler.
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          This parameter can be one of the following values:
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *            @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *            @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *            @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *            @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
  59              		.loc 1 149 0
  60              		.cfi_startproc
  61              	.LVL2:
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   uint32_t tmpreg = 0;
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Check the parameters */
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Clear WDGTB[1:0] bits */
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  62              		.loc 1 154 0
  63 0000 034B     		ldr	r3, .L3
  64 0002 044A     		ldr	r2, .L3+4
  65 0004 5968     		ldr	r1, [r3, #4]
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   tmpreg |= WWDG_Prescaler;
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Store the new value */
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CFR = tmpreg;
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
  66              		.loc 1 159 0
  67              		@ sp needed for prologue
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  68              		.loc 1 154 0
  69 0006 0A40     		and	r2, r1
  70              	.LVL3:
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   tmpreg |= WWDG_Prescaler;
  71              		.loc 1 156 0
  72 0008 1043     		orr	r0, r2
  73              	.LVL4:
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CFR = tmpreg;
  74              		.loc 1 158 0
  75 000a 5860     		str	r0, [r3, #4]
  76              		.loc 1 159 0
  77 000c 7047     		bx	lr
  78              	.L4:
  79 000e C046     		.align	2
  80              	.L3:
  81 0010 002C0040 		.word	1073753088
  82 0014 7FFEFFFF 		.word	-385
  83              		.cfi_endproc
  84              	.LFE34:
  86              		.section	.text.WWDG_SetWindowValue,"ax",%progbits
  87              		.align	1
  88              		.global	WWDG_SetWindowValue
  89              		.code	16
  90              		.thumb_func
  92              	WWDG_SetWindowValue:
  93              	.LFB35:
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Sets the WWDG window value.
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          This parameter value must be lower than 0x80.
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_SetWindowValue(uint8_t WindowValue)
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
  94              		.loc 1 168 0
  95              		.cfi_startproc
  96              	.LVL5:
  97 0000 82B0     		sub	sp, sp, #8
  98              	.LCFI1:
  99              		.cfi_def_cfa_offset 8
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   __IO uint32_t tmpreg = 0;
 100              		.loc 1 169 0
 101 0002 0023     		mov	r3, #0
 102 0004 0193     		str	r3, [sp, #4]
 103              	.LVL6:
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Check the parameters */
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Clear W[6:0] bits */
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_W_MASK;
 104              		.loc 1 175 0
 105 0006 064B     		ldr	r3, .L6
 106 0008 7F22     		mov	r2, #127
 107 000a 5968     		ldr	r1, [r3, #4]
 108 000c 9143     		bic	r1, r2
 109              	.LVL7:
 110 000e 0191     		str	r1, [sp, #4]
 111              	.LVL8:
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Set W[6:0] bits according to WindowValue value */
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 112              		.loc 1 178 0
 113 0010 0199     		ldr	r1, [sp, #4]
 114              	.LVL9:
 115 0012 0240     		and	r2, r0
 116 0014 0A43     		orr	r2, r1
 117              	.LVL10:
 118 0016 0192     		str	r2, [sp, #4]
 119              	.LVL11:
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Store the new value */
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CFR = tmpreg;
 120              		.loc 1 181 0
 121 0018 019A     		ldr	r2, [sp, #4]
 122              	.LVL12:
 123 001a 5A60     		str	r2, [r3, #4]
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
 124              		.loc 1 182 0
 125 001c 02B0     		add	sp, sp, #8
 126              		@ sp needed for prologue
 127 001e 7047     		bx	lr
 128              	.L7:
 129              		.align	2
 130              	.L6:
 131 0020 002C0040 		.word	1073753088
 132              		.cfi_endproc
 133              	.LFE35:
 135              		.section	.text.WWDG_EnableIT,"ax",%progbits
 136              		.align	1
 137              		.global	WWDG_EnableIT
 138              		.code	16
 139              		.thumb_func
 141              	WWDG_EnableIT:
 142              	.LFB36:
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @note   Once enabled this interrupt cannot be disabled except by a system reset. 
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  None
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_EnableIT(void)
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
 143              		.loc 1 191 0
 144              		.cfi_startproc
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CFR |= WWDG_CFR_EWI;
 145              		.loc 1 192 0
 146 0000 034B     		ldr	r3, .L9
 147 0002 8022     		mov	r2, #128
 148 0004 5968     		ldr	r1, [r3, #4]
 149 0006 9200     		lsl	r2, r2, #2
 150 0008 0A43     		orr	r2, r1
 151 000a 5A60     		str	r2, [r3, #4]
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
 152              		.loc 1 193 0
 153              		@ sp needed for prologue
 154 000c 7047     		bx	lr
 155              	.L10:
 156 000e C046     		.align	2
 157              	.L9:
 158 0010 002C0040 		.word	1073753088
 159              		.cfi_endproc
 160              	.LFE36:
 162              		.section	.text.WWDG_SetCounter,"ax",%progbits
 163              		.align	1
 164              		.global	WWDG_SetCounter
 165              		.code	16
 166              		.thumb_func
 168              	WWDG_SetCounter:
 169              	.LFB37:
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Sets the WWDG counter value.
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          This parameter must be a number between 0x40 and 0x7F (to prevent 
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          generating an immediate reset).
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_SetCounter(uint8_t Counter)
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
 170              		.loc 1 203 0
 171              		.cfi_startproc
 172              	.LVL13:
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Check the parameters */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Write to T[6:0] bits to configure the counter value, no need to do
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****      a read-modify-write; writing a 0 to WDGA bit does nothing */
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
 173              		.loc 1 208 0
 174 0000 7F23     		mov	r3, #127
 175 0002 1840     		and	r0, r3
 176              	.LVL14:
 177 0004 014B     		ldr	r3, .L12
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
 178              		.loc 1 209 0
 179              		@ sp needed for prologue
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
 180              		.loc 1 208 0
 181 0006 1860     		str	r0, [r3]
 182              		.loc 1 209 0
 183 0008 7047     		bx	lr
 184              	.L13:
 185 000a C046     		.align	2
 186              	.L12:
 187 000c 002C0040 		.word	1073753088
 188              		.cfi_endproc
 189              	.LFE37:
 191              		.section	.text.WWDG_Enable,"ax",%progbits
 192              		.align	1
 193              		.global	WWDG_Enable
 194              		.code	16
 195              		.thumb_func
 197              	WWDG_Enable:
 198              	.LFB38:
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @}
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /** @defgroup WWDG_Group2 WWDG activation functions
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****  *  @brief   WWDG activation functions 
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****  *
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** @verbatim   
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****                      ##### WWDG activation function #####
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================  
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** @endverbatim
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @{
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Enables WWDG and load the counter value.                  
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          This parameter must be a number between 0x40 and 0x7F (to prevent 
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   *          generating an immediate reset).
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_Enable(uint8_t Counter)
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
 199              		.loc 1 235 0
 200              		.cfi_startproc
 201              	.LVL15:
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   /* Check the parameters */
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 202              		.loc 1 238 0
 203 0000 8023     		mov	r3, #128
 204 0002 1843     		orr	r0, r3
 205              	.LVL16:
 206 0004 014B     		ldr	r3, .L15
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
 207              		.loc 1 239 0
 208              		@ sp needed for prologue
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 209              		.loc 1 238 0
 210 0006 1860     		str	r0, [r3]
 211              		.loc 1 239 0
 212 0008 7047     		bx	lr
 213              	.L16:
 214 000a C046     		.align	2
 215              	.L15:
 216 000c 002C0040 		.word	1073753088
 217              		.cfi_endproc
 218              	.LFE38:
 220              		.section	.text.WWDG_GetFlagStatus,"ax",%progbits
 221              		.align	1
 222              		.global	WWDG_GetFlagStatus
 223              		.code	16
 224              		.thumb_func
 226              	WWDG_GetFlagStatus:
 227              	.LFB39:
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @}
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /** @defgroup WWDG_Group3 Interrupts and flags management functions
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****  *  @brief   Interrupts and flags management functions 
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****  *
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** @verbatim   
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****                 ##### Interrupts and flags management functions #####
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   ==============================================================================  
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** @endverbatim
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @{
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  None
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval The new state of the Early Wakeup interrupt flag (SET or RESET).
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** FlagStatus WWDG_GetFlagStatus(void)
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
 228              		.loc 1 263 0
 229              		.cfi_startproc
 230              	.LVL17:
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   FlagStatus bitstatus = RESET;
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 231              		.loc 1 266 0
 232 0000 024B     		ldr	r3, .L18
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   {
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     bitstatus = SET;
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   }
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   else
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   {
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****     bitstatus = RESET;
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   }
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   return bitstatus;
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
 233              		.loc 1 275 0
 234              		@ sp needed for prologue
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 235              		.loc 1 266 0
 236 0002 9868     		ldr	r0, [r3, #8]
 237              	.LVL18:
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   return bitstatus;
 238              		.loc 1 274 0
 239 0004 431E     		sub	r3, r0, #1
 240 0006 9841     		sbc	r0, r0, r3
 241              	.LVL19:
 242              		.loc 1 275 0
 243 0008 7047     		bx	lr
 244              	.L19:
 245 000a C046     		.align	2
 246              	.L18:
 247 000c 002C0040 		.word	1073753088
 248              		.cfi_endproc
 249              	.LFE39:
 251              		.section	.text.WWDG_ClearFlag,"ax",%progbits
 252              		.align	1
 253              		.global	WWDG_ClearFlag
 254              		.code	16
 255              		.thumb_func
 257              	WWDG_ClearFlag:
 258              	.LFB40:
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** 
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** /**
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @brief  Clears Early Wakeup interrupt flag.
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @param  None
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   * @retval None
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** void WWDG_ClearFlag(void)
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** {
 259              		.loc 1 283 0
 260              		.cfi_startproc
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c ****   WWDG->SR = (uint32_t)RESET;
 261              		.loc 1 284 0
 262 0000 014B     		ldr	r3, .L21
 263 0002 0022     		mov	r2, #0
 264 0004 9A60     		str	r2, [r3, #8]
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_wwdg.c **** }
 265              		.loc 1 285 0
 266              		@ sp needed for prologue
 267 0006 7047     		bx	lr
 268              	.L22:
 269              		.align	2
 270              	.L21:
 271 0008 002C0040 		.word	1073753088
 272              		.cfi_endproc
 273              	.LFE40:
 275              		.text
 276              	.Letext0:
 277              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 278              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 279              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_wwdg.c
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:18     .text.WWDG_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:23     .text.WWDG_DeInit:00000000 WWDG_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:52     .text.WWDG_SetPrescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:57     .text.WWDG_SetPrescaler:00000000 WWDG_SetPrescaler
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:81     .text.WWDG_SetPrescaler:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:87     .text.WWDG_SetWindowValue:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:92     .text.WWDG_SetWindowValue:00000000 WWDG_SetWindowValue
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:131    .text.WWDG_SetWindowValue:00000020 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:136    .text.WWDG_EnableIT:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:141    .text.WWDG_EnableIT:00000000 WWDG_EnableIT
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:158    .text.WWDG_EnableIT:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:163    .text.WWDG_SetCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:168    .text.WWDG_SetCounter:00000000 WWDG_SetCounter
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:187    .text.WWDG_SetCounter:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:192    .text.WWDG_Enable:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:197    .text.WWDG_Enable:00000000 WWDG_Enable
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:216    .text.WWDG_Enable:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:221    .text.WWDG_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:226    .text.WWDG_GetFlagStatus:00000000 WWDG_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:247    .text.WWDG_GetFlagStatus:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:252    .text.WWDG_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:257    .text.WWDG_ClearFlag:00000000 WWDG_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\ccrUq7jO.s:271    .text.WWDG_ClearFlag:00000008 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_wwdg.h.58.4688eee61a2709866472b4b4c07d9275

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
