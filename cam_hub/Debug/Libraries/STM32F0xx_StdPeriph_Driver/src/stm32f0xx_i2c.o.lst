   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_i2c.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	I2C_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	I2C_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @file    stm32f0xx_i2c.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          functionalities of the Inter-Integrated circuit (I2C):
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Initialization and Configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Communications handling
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + SMBUS management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + I2C registers management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Data transfers management
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + DMA transfers management
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Interrupts and flags management
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *  @verbatim
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ============================================================================
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                      ##### How to use this driver #####
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ============================================================================
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    [..]
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        function for I2C1 or I2C2.
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        RCC_AHBPeriphClockCmd() function. 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Peripherals alternate function: 
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Connect the pin to the desired peripherals' Alternate 
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             Function (AF) using GPIO_PinAFConfig() function.
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Configure the desired pin in alternate function by:
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Select the type, OpenDrain and speed via  
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Call GPIO_Init() function.
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Program the Mode, Timing , Own address, Ack and Acknowledged Address 
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        using the I2C_Init() function.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Optionally you can enable/configure the following parameters without
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        re-initialization (i.e there is no need to call again I2C_Init() function):
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the acknowledge feature using I2C_AcknowledgeConfig() function.
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the dual addressing mode using I2C_DualAddressCmd() function.
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the general call using the I2C_GeneralCallCmd() function.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the clock stretching using I2C_StretchClockCmd() function.
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the PEC Calculation using I2C_CalculatePEC() function.
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) For SMBus Mode:
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             (+++) Enable the SMBusAlert pin using I2C_SMBusAlertCmd() function.
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable the NVIC and the corresponding interrupt using the function
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        I2C_ITConfig() if you need to use interrupt mode.
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) When using the DMA mode 
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****       (++) Configure the DMA using DMA_Init() function.
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****       (++) Active the needed channel Request using I2C_DMACmd() function.
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable the I2C using the I2C_Cmd() function.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        transfers. 
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    [..]
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (@) When using I2C in Fast Mode Plus, SCL and SDA pin 20mA current drive capability
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        must be enabled by setting the driving capability control bit in SYSCFG.
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     @endverbatim
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ******************************************************************************
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @attention
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * You may not use this file except in compliance with the License.
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * You may obtain a copy of the License at:
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * Unless required by applicable law or agreed to in writing, software 
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * See the License for the specific language governing permissions and
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * limitations under the License.
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ******************************************************************************
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #include "stm32f0xx_i2c.h"
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #include "stm32f0xx_rcc.h"
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C 
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief I2C driver modules
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private define ------------------------------------------------------------*/
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define CR1_CLEAR_MASK          ((uint32_t)0x00CFE0FF)  /*<! I2C CR1 clear register Mask */
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define CR2_CLEAR_MASK          ((uint32_t)0x07FF7FFF)  /*<! I2C CR2 clear register Mask */
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define TIMING_CLEAR_MASK       ((uint32_t)0xF0FFFFFF)  /*<! I2C TIMING clear register Mask */
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define ERROR_IT_MASK           ((uint32_t)0x00003F00)  /*<! I2C Error interrupt register Mask */
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define TC_IT_MASK              ((uint32_t)0x000000C0)  /*<! I2C TC interrupt register Mask */
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Private_Functions
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim   
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****            ##### Initialization and Configuration functions #####
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a set of functions allowing to initialize the I2C Mode,
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C Timing, I2C filters, I2C Addressing mode, I2C OwnAddress1.
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The I2C_Init() function follows the I2C configuration procedures (these procedures 
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          are available in reference manual).
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] When the Software Reset is performed using I2C_SoftwareResetCmd() function, the internal
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          states machines are reset and communication control bits, as well as status bits come 
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          back to their reset value.
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Before enabling Stop mode using I2C_StopModeCmd() I2C Clock source must be set to
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          HSI and Digital filters must be disabled.
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Before enabling Own Address 2 via I2C_DualAddressCmd() function, OA2 and mask should be
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          configured using I2C_OwnAddress2Config() function.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] I2C_SlaveByteControlCmd() enable Slave byte control that allow user to get control of 
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          each byte in slave mode when NBYTES is set to 0x01.
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
  26              		.loc 1 146 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 08B5     		push	{r3, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (I2Cx == I2C1)
  34              		.loc 1 150 0
  35 0002 0B4B     		ldr	r3, .L5
  36 0004 9842     		cmp	r0, r3
  37 0006 07D1     		bne	.L2
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable I2C1 reset state */
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  38              		.loc 1 153 0
  39 0008 8020     		mov	r0, #128
  40              	.LVL1:
  41 000a 8003     		lsl	r0, r0, #14
  42 000c 0121     		mov	r1, #1
  43 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  44              	.LVL2:
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Release I2C1 from reset state */
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  45              		.loc 1 155 0
  46 0012 8020     		mov	r0, #128
  47 0014 8003     		lsl	r0, r0, #14
  48 0016 06E0     		b	.L4
  49              	.LVL3:
  50              	.L2:
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable I2C2 reset state */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  51              		.loc 1 160 0
  52 0018 8020     		mov	r0, #128
  53              	.LVL4:
  54 001a C003     		lsl	r0, r0, #15
  55 001c 0121     		mov	r1, #1
  56 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  57              	.LVL5:
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Release I2C2 from reset state */
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  58              		.loc 1 162 0
  59 0022 8020     		mov	r0, #128
  60 0024 C003     		lsl	r0, r0, #15
  61              	.L4:
  62 0026 0021     		mov	r1, #0
  63 0028 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  64              	.LVL6:
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
  65              		.loc 1 164 0
  66              		@ sp needed for prologue
  67 002c 08BD     		pop	{r3, pc}
  68              	.L6:
  69 002e C046     		.align	2
  70              	.L5:
  71 0030 00540040 		.word	1073763328
  72              		.cfi_endproc
  73              	.LFE33:
  75              		.section	.text.I2C_Init,"ax",%progbits
  76              		.align	1
  77              		.global	I2C_Init
  78              		.code	16
  79              		.thumb_func
  81              	I2C_Init:
  82              	.LFB34:
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         contains the configuration information for the specified I2C peripheral.
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
  83              		.loc 1 175 0
  84              		.cfi_startproc
  85              	.LVL7:
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ANALOG_FILTER(I2C_InitStruct->I2C_AnalogFilter));
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_DIGITAL_FILTER(I2C_InitStruct->I2C_DigitalFilter));
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Disable I2Cx Peripheral */
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  86              		.loc 1 188 0
  87 0000 0268     		ldr	r2, [r0]
  88 0002 0123     		mov	r3, #1
  89 0004 9A43     		bic	r2, r3
  90 0006 0260     		str	r2, [r0]
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
  91              		.loc 1 175 0
  92 0008 30B5     		push	{r4, r5, lr}
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 12
  95              		.cfi_offset 4, -12
  96              		.cfi_offset 5, -8
  97              		.cfi_offset 14, -4
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx FILTERS Configuration ------------------*/
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the I2Cx CR1 value */
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR1;
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear I2Cx CR1 register */
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
  98              		.loc 1 194 0
  99 000a 134A     		ldr	r2, .L8
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR1;
 100              		.loc 1 192 0
 101 000c 0468     		ldr	r4, [r0]
 102              	.LVL8:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: analog and digital filter */
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set ANFOFF bit according to I2C_AnalogFilter value */
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set DFN bits according to I2C_DigitalFilter value */
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 103              		.loc 1 198 0
 104 000e 8D68     		ldr	r5, [r1, #8]
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 105              		.loc 1 194 0
 106 0010 2240     		and	r2, r4
 107              	.LVL9:
 108              		.loc 1 198 0
 109 0012 2C02     		lsl	r4, r5, #8
 110 0014 2243     		orr	r2, r4
 111              	.LVL10:
 112 0016 4C68     		ldr	r4, [r1, #4]
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx CR1 */
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx TIMING Configuration -------------------*/
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: Timing */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set TIMINGR bits according to I2C_Timing */
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx TIMING */
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 113              		.loc 1 207 0
 114 0018 0D68     		ldr	r5, [r1]
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 115              		.loc 1 198 0
 116 001a 2243     		orr	r2, r4
 117              	.LVL11:
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 118              		.loc 1 201 0
 119 001c 0260     		str	r2, [r0]
 120              		.loc 1 207 0
 121 001e 0F4A     		ldr	r2, .L8+4
 122              	.LVL12:
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Enable I2Cx Peripheral */
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear tmpreg local variable */
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = 0;
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear OAR1 register */
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = (uint32_t)tmpreg;
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear OAR2 register */
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR2 = (uint32_t)tmpreg;
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: Own Address1 and acknowledged address */
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set OA1 bits according to I2C_OwnAddress1 value */
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                       (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx OAR1 */
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = tmpreg;
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Enable Own Address1 acknowledgement */
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx MODE Configuration ---------------------*/
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: mode */
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2C_InitStruct->I2C_Mode;
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx CR1 */
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= tmpreg;
 123              		.loc 1 234 0
 124 0020 CC68     		ldr	r4, [r1, #12]
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 125              		.loc 1 207 0
 126 0022 2A40     		and	r2, r5
 127 0024 0261     		str	r2, [r0, #16]
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 128              		.loc 1 210 0
 129 0026 0268     		ldr	r2, [r0]
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx ACK Configuration ----------------------*/
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the I2Cx CR2 value */
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear I2Cx CR2 register */
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR2_CLEAR_MASK;
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: acknowledgement */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set NACK bit according to I2C_Ack value */
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= I2C_InitStruct->I2C_Ack;
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx CR2 */
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 130              		.loc 1 246 0
 131              		@ sp needed for prologue
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 132              		.loc 1 210 0
 133 0028 1343     		orr	r3, r2
 134 002a 0360     		str	r3, [r0]
 135              	.LVL13:
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = (uint32_t)tmpreg;
 136              		.loc 1 216 0
 137 002c 0023     		mov	r3, #0
 138 002e 8360     		str	r3, [r0, #8]
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 139              		.loc 1 222 0
 140 0030 8A69     		ldr	r2, [r1, #24]
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR2 = (uint32_t)tmpreg;
 141              		.loc 1 218 0
 142 0032 C360     		str	r3, [r0, #12]
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 143              		.loc 1 222 0
 144 0034 0B69     		ldr	r3, [r1, #16]
 145 0036 1343     		orr	r3, r2
 146              	.LVL14:
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = tmpreg;
 147              		.loc 1 225 0
 148 0038 8360     		str	r3, [r0, #8]
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 149              		.loc 1 227 0
 150 003a 8268     		ldr	r2, [r0, #8]
 151 003c 8023     		mov	r3, #128
 152              	.LVL15:
 153 003e 1B02     		lsl	r3, r3, #8
 154 0040 1343     		orr	r3, r2
 155 0042 8360     		str	r3, [r0, #8]
 156              	.LVL16:
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= tmpreg;
 157              		.loc 1 234 0
 158 0044 0368     		ldr	r3, [r0]
 159 0046 2343     		orr	r3, r4
 160 0048 0360     		str	r3, [r0]
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 161              		.loc 1 238 0
 162 004a 4268     		ldr	r2, [r0, #4]
 163              	.LVL17:
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR2_CLEAR_MASK;
 164              		.loc 1 240 0
 165 004c 044B     		ldr	r3, .L8+8
 166 004e 1340     		and	r3, r2
 167              	.LVL18:
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= I2C_InitStruct->I2C_Ack;
 168              		.loc 1 243 0
 169 0050 4A69     		ldr	r2, [r1, #20]
 170 0052 1343     		orr	r3, r2
 171              	.LVL19:
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 172              		.loc 1 245 0
 173 0054 4360     		str	r3, [r0, #4]
 174              		.loc 1 246 0
 175 0056 30BD     		pop	{r4, r5, pc}
 176              	.L9:
 177              		.align	2
 178              	.L8:
 179 0058 FFE0CF00 		.word	13623551
 180 005c FFFFFFF0 		.word	-251658241
 181 0060 FF7FFF07 		.word	134184959
 182              		.cfi_endproc
 183              	.LFE34:
 185              		.section	.text.I2C_StructInit,"ax",%progbits
 186              		.align	1
 187              		.global	I2C_StructInit
 188              		.code	16
 189              		.thumb_func
 191              	I2C_StructInit:
 192              	.LFB35:
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 193              		.loc 1 254 0
 194              		.cfi_startproc
 195              	.LVL20:
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------- Reset I2C init structure parameters values --------------*/
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_Timing member */
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Timing = 0;
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_AnalogFilter member */
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_DigitalFilter member */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_DigitalFilter = 0;
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_Mode member */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_Ack member */
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 196              		.loc 1 267 0
 197 0000 8022     		mov	r2, #128
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Timing = 0;
 198              		.loc 1 257 0
 199 0002 0023     		mov	r3, #0
 200              		.loc 1 267 0
 201 0004 1202     		lsl	r2, r2, #8
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Timing = 0;
 202              		.loc 1 257 0
 203 0006 0360     		str	r3, [r0]
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 204              		.loc 1 259 0
 205 0008 4360     		str	r3, [r0, #4]
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_DigitalFilter = 0;
 206              		.loc 1 261 0
 207 000a 8360     		str	r3, [r0, #8]
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 208              		.loc 1 263 0
 209 000c C360     		str	r3, [r0, #12]
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 210              		.loc 1 265 0
 211 000e 0361     		str	r3, [r0, #16]
 212              		.loc 1 267 0
 213 0010 4261     		str	r2, [r0, #20]
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 214              		.loc 1 269 0
 215 0012 8361     		str	r3, [r0, #24]
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 216              		.loc 1 270 0
 217              		@ sp needed for prologue
 218 0014 7047     		bx	lr
 219              		.cfi_endproc
 220              	.LFE35:
 222              		.section	.text.I2C_Cmd,"ax",%progbits
 223              		.align	1
 224              		.global	I2C_Cmd
 225              		.code	16
 226              		.thumb_func
 228              	I2C_Cmd:
 229              	.LFB36:
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 230              		.loc 1 280 0
 231              		.cfi_startproc
 232              	.LVL21:
 233 0000 00B5     		push	{lr}
 234              	.LCFI2:
 235              		.cfi_def_cfa_offset 4
 236              		.cfi_offset 14, -4
 237 0002 0123     		mov	r3, #1
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable the selected I2C peripheral */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 238              		.loc 1 287 0
 239 0004 0268     		ldr	r2, [r0]
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 240              		.loc 1 284 0
 241 0006 0029     		cmp	r1, #0
 242 0008 01D0     		beq	.L12
 243              		.loc 1 287 0
 244 000a 1343     		orr	r3, r2
 245 000c 01E0     		b	.L14
 246              	.L12:
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the selected I2C peripheral */
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 247              		.loc 1 292 0
 248 000e 9A43     		bic	r2, r3
 249 0010 131C     		mov	r3, r2
 250              	.L14:
 251 0012 0360     		str	r3, [r0]
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 252              		.loc 1 294 0
 253              		@ sp needed for prologue
 254 0014 00BD     		pop	{pc}
 255              		.cfi_endproc
 256              	.LFE36:
 258              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 259              		.align	1
 260              		.global	I2C_SoftwareResetCmd
 261              		.code	16
 262              		.thumb_func
 264              	I2C_SoftwareResetCmd:
 265              	.LFB37:
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx)
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 266              		.loc 1 302 0
 267              		.cfi_startproc
 268              	.LVL22:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Disable peripheral */
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 269              		.loc 1 307 0
 270 0000 0268     		ldr	r2, [r0]
 271 0002 0123     		mov	r3, #1
 272 0004 9A43     		bic	r2, r3
 273 0006 0260     		str	r2, [r0]
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Perform a dummy read to delay the disable of peripheral for minimum
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****      3 APB clock cycles to perform the software reset functionality */
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *(__IO uint32_t *)(uint32_t)I2Cx; 
 274              		.loc 1 311 0
 275 0008 0268     		ldr	r2, [r0]
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Enable peripheral */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 276              		.loc 1 314 0
 277 000a 0268     		ldr	r2, [r0]
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 278              		.loc 1 315 0
 279              		@ sp needed for prologue
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 280              		.loc 1 314 0
 281 000c 1343     		orr	r3, r2
 282 000e 0360     		str	r3, [r0]
 283              		.loc 1 315 0
 284 0010 7047     		bx	lr
 285              		.cfi_endproc
 286              	.LFE37:
 288              		.section	.text.I2C_ITConfig,"ax",%progbits
 289              		.align	1
 290              		.global	I2C_ITConfig
 291              		.code	16
 292              		.thumb_func
 294              	I2C_ITConfig:
 295              	.LFB38:
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ERRI: Error interrupt mask
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TCI: Transfer Complete interrupt mask
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_STOPI: Stop Detection interrupt mask
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_NACKI: Not Acknowledge received interrupt mask
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ADDRI: Address Match interrupt mask  
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_RXI: RX interrupt mask
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TXI: TX interrupt mask
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint32_t I2C_IT, FunctionalState NewState)
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 296              		.loc 1 334 0
 297              		.cfi_startproc
 298              	.LVL23:
 299 0000 00B5     		push	{lr}
 300              	.LCFI3:
 301              		.cfi_def_cfa_offset 4
 302              		.cfi_offset 14, -4
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable the selected I2C interrupts */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_IT;
 303              		.loc 1 343 0
 304 0002 0368     		ldr	r3, [r0]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 305              		.loc 1 340 0
 306 0004 002A     		cmp	r2, #0
 307 0006 02D0     		beq	.L17
 308              		.loc 1 343 0
 309 0008 1943     		orr	r1, r3
 310              	.LVL24:
 311 000a 0160     		str	r1, [r0]
 312 000c 01E0     		b	.L16
 313              	.LVL25:
 314              	.L17:
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the selected I2C interrupts */
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 315              		.loc 1 348 0
 316 000e 8B43     		bic	r3, r1
 317 0010 0360     		str	r3, [r0]
 318              	.LVL26:
 319              	.L16:
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 320              		.loc 1 350 0
 321              		@ sp needed for prologue
 322 0012 00BD     		pop	{pc}
 323              		.cfi_endproc
 324              	.LFE38:
 326              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 327              		.align	1
 328              		.global	I2C_StretchClockCmd
 329              		.code	16
 330              		.thumb_func
 332              	I2C_StretchClockCmd:
 333              	.LFB39:
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C Clock stretching.
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 334              		.loc 1 360 0
 335              		.cfi_startproc
 336              	.LVL27:
 337 0000 00B5     		push	{lr}
 338              	.LCFI4:
 339              		.cfi_def_cfa_offset 4
 340              		.cfi_offset 14, -4
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable clock stretching */
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 341              		.loc 1 368 0
 342 0002 0268     		ldr	r2, [r0]
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 343              		.loc 1 365 0
 344 0004 0029     		cmp	r1, #0
 345 0006 02D0     		beq	.L20
 346              		.loc 1 368 0
 347 0008 034B     		ldr	r3, .L23
 348 000a 1340     		and	r3, r2
 349 000c 02E0     		b	.L22
 350              	.L20:
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable clock stretching  */
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 351              		.loc 1 373 0
 352 000e 8023     		mov	r3, #128
 353 0010 9B02     		lsl	r3, r3, #10
 354 0012 1343     		orr	r3, r2
 355              	.L22:
 356 0014 0360     		str	r3, [r0]
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 357              		.loc 1 375 0
 358              		@ sp needed for prologue
 359 0016 00BD     		pop	{pc}
 360              	.L24:
 361              		.align	2
 362              	.L23:
 363 0018 FFFFFDFF 		.word	-131073
 364              		.cfi_endproc
 365              	.LFE39:
 367              		.section	.text.I2C_StopModeCmd,"ax",%progbits
 368              		.align	1
 369              		.global	I2C_StopModeCmd
 370              		.code	16
 371              		.thumb_func
 373              	I2C_StopModeCmd:
 374              	.LFB40:
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C wakeup from stop mode.
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         This function is not applicable for  STM32F030 devices.  
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx stop mode.
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_StopModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 375              		.loc 1 386 0
 376              		.cfi_startproc
 377              	.LVL28:
 378 0000 00B5     		push	{lr}
 379              	.LCFI5:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 14, -4
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable wakeup from stop mode */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_WUPEN;   
 382              		.loc 1 394 0
 383 0002 0268     		ldr	r2, [r0]
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 384              		.loc 1 391 0
 385 0004 0029     		cmp	r1, #0
 386 0006 03D0     		beq	.L26
 387              		.loc 1 394 0
 388 0008 8023     		mov	r3, #128
 389 000a DB02     		lsl	r3, r3, #11
 390 000c 1343     		orr	r3, r2
 391 000e 01E0     		b	.L28
 392              	.L26:
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable wakeup from stop mode */    
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 393              		.loc 1 399 0
 394 0010 014B     		ldr	r3, .L29
 395 0012 1340     		and	r3, r2
 396              	.L28:
 397 0014 0360     		str	r3, [r0]
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 398              		.loc 1 401 0
 399              		@ sp needed for prologue
 400 0016 00BD     		pop	{pc}
 401              	.L30:
 402              		.align	2
 403              	.L29:
 404 0018 FFFFFBFF 		.word	-262145
 405              		.cfi_endproc
 406              	.LFE40:
 408              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 409              		.align	1
 410              		.global	I2C_DualAddressCmd
 411              		.code	16
 412              		.thumb_func
 414              	I2C_DualAddressCmd:
 415              	.LFB41:
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C own address 2.
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C own address 2.
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 416              		.loc 1 411 0
 417              		.cfi_startproc
 418              	.LVL29:
 419 0000 00B5     		push	{lr}
 420              	.LCFI6:
 421              		.cfi_def_cfa_offset 4
 422              		.cfi_offset 14, -4
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable own address 2 */
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 423              		.loc 1 419 0
 424 0002 C268     		ldr	r2, [r0, #12]
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 425              		.loc 1 416 0
 426 0004 0029     		cmp	r1, #0
 427 0006 03D0     		beq	.L32
 428              		.loc 1 419 0
 429 0008 8023     		mov	r3, #128
 430 000a 1B02     		lsl	r3, r3, #8
 431 000c 1343     		orr	r3, r2
 432 000e 01E0     		b	.L34
 433              	.L32:
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable own address 2 */
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 434              		.loc 1 424 0
 435 0010 014B     		ldr	r3, .L35
 436 0012 1340     		and	r3, r2
 437              	.L34:
 438 0014 C360     		str	r3, [r0, #12]
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }    
 439              		.loc 1 426 0
 440              		@ sp needed for prologue
 441 0016 00BD     		pop	{pc}
 442              	.L36:
 443              		.align	2
 444              	.L35:
 445 0018 FF7FFFFF 		.word	-32769
 446              		.cfi_endproc
 447              	.LFE41:
 449              		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 450              		.align	1
 451              		.global	I2C_OwnAddress2Config
 452              		.code	16
 453              		.thumb_func
 455              	I2C_OwnAddress2Config:
 456              	.LFB42:
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the I2C slave own address 2 and mask.
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Address: specifies the slave address to be programmed.
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Mask: specifies own address 2 mask to be programmed.
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_NoMask: no mask.
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask01: OA2[1] is masked and don't care.
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask02: OA2[2:1] are masked and don't care.
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask03: OA2[3:1] are masked and don't care.
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask04: OA2[4:1] are masked and don't care.
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask05: OA2[5:1] are masked and don't care.
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 457              		.loc 1 445 0
 458              		.cfi_startproc
 459              	.LVL30:
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS2(Address));
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx SADD */
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 460              		.loc 1 460 0
 461 0000 FE23     		mov	r3, #254
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 462              		.loc 1 445 0
 463 0002 10B5     		push	{r4, lr}
 464              	.LCFI7:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 4, -8
 467              		.cfi_offset 14, -4
 468              		.loc 1 460 0
 469 0004 1940     		and	r1, r3
 470              	.LVL31:
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 471              		.loc 1 454 0
 472 0006 C468     		ldr	r4, [r0, #12]
 473              	.LVL32:
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 474              		.loc 1 457 0
 475 0008 044B     		ldr	r3, .L38
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 476              		.loc 1 461 0
 477 000a 1202     		lsl	r2, r2, #8
 478              	.LVL33:
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 479              		.loc 1 457 0
 480 000c 2340     		and	r3, r4
 481              	.LVL34:
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 482              		.loc 1 460 0
 483 000e 1943     		orr	r1, r3
 484              		.loc 1 461 0
 485 0010 E023     		mov	r3, #224
 486              	.LVL35:
 487 0012 DB00     		lsl	r3, r3, #3
 488 0014 1A40     		and	r2, r3
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 489              		.loc 1 460 0
 490 0016 1143     		orr	r1, r2
 491              	.LVL36:
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 492              		.loc 1 464 0
 493 0018 C160     		str	r1, [r0, #12]
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 494              		.loc 1 465 0
 495              		@ sp needed for prologue
 496 001a 10BD     		pop	{r4, pc}
 497              	.L39:
 498              		.align	2
 499              	.L38:
 500 001c 01F8FFFF 		.word	-2047
 501              		.cfi_endproc
 502              	.LFE42:
 504              		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 505              		.align	1
 506              		.global	I2C_GeneralCallCmd
 507              		.code	16
 508              		.thumb_func
 510              	I2C_GeneralCallCmd:
 511              	.LFB43:
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C general call mode.
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C general call mode.
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 512              		.loc 1 475 0
 513              		.cfi_startproc
 514              	.LVL37:
 515 0000 00B5     		push	{lr}
 516              	.LCFI8:
 517              		.cfi_def_cfa_offset 4
 518              		.cfi_offset 14, -4
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable general call mode */
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_GCEN;
 519              		.loc 1 483 0
 520 0002 0268     		ldr	r2, [r0]
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 521              		.loc 1 480 0
 522 0004 0029     		cmp	r1, #0
 523 0006 03D0     		beq	.L41
 524              		.loc 1 483 0
 525 0008 8023     		mov	r3, #128
 526 000a 1B03     		lsl	r3, r3, #12
 527 000c 1343     		orr	r3, r2
 528 000e 01E0     		b	.L43
 529              	.L41:
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable general call mode */
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 530              		.loc 1 488 0
 531 0010 014B     		ldr	r3, .L44
 532 0012 1340     		and	r3, r2
 533              	.L43:
 534 0014 0360     		str	r3, [r0]
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 535              		.loc 1 490 0
 536              		@ sp needed for prologue
 537 0016 00BD     		pop	{pc}
 538              	.L45:
 539              		.align	2
 540              	.L44:
 541 0018 FFFFF7FF 		.word	-524289
 542              		.cfi_endproc
 543              	.LFE43:
 545              		.section	.text.I2C_SlaveByteControlCmd,"ax",%progbits
 546              		.align	1
 547              		.global	I2C_SlaveByteControlCmd
 548              		.code	16
 549              		.thumb_func
 551              	I2C_SlaveByteControlCmd:
 552              	.LFB44:
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C slave byte control.
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C slave byte control.
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SlaveByteControlCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 553              		.loc 1 500 0
 554              		.cfi_startproc
 555              	.LVL38:
 556 0000 00B5     		push	{lr}
 557              	.LCFI9:
 558              		.cfi_def_cfa_offset 4
 559              		.cfi_offset 14, -4
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable slave byte control */
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SBC;
 560              		.loc 1 508 0
 561 0002 0268     		ldr	r2, [r0]
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 562              		.loc 1 505 0
 563 0004 0029     		cmp	r1, #0
 564 0006 03D0     		beq	.L47
 565              		.loc 1 508 0
 566 0008 8023     		mov	r3, #128
 567 000a 5B02     		lsl	r3, r3, #9
 568 000c 1343     		orr	r3, r2
 569 000e 01E0     		b	.L49
 570              	.L47:
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable slave byte control */
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 571              		.loc 1 513 0
 572 0010 014B     		ldr	r3, .L50
 573 0012 1340     		and	r3, r2
 574              	.L49:
 575 0014 0360     		str	r3, [r0]
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 576              		.loc 1 515 0
 577              		@ sp needed for prologue
 578 0016 00BD     		pop	{pc}
 579              	.L51:
 580              		.align	2
 581              	.L50:
 582 0018 FFFFFEFF 		.word	-65537
 583              		.cfi_endproc
 584              	.LFE44:
 586              		.section	.text.I2C_SlaveAddressConfig,"ax",%progbits
 587              		.align	1
 588              		.global	I2C_SlaveAddressConfig
 589              		.code	16
 590              		.thumb_func
 592              	I2C_SlaveAddressConfig:
 593              	.LFB45:
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the slave address to be transmitted after start generation.
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Address: specifies the slave address to be programmed.
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This function should be called before generating start condition.
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SlaveAddressConfig(I2C_TypeDef* I2Cx, uint16_t Address)
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 594              		.loc 1 525 0
 595              		.cfi_startproc
 596              	.LVL39:
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_SLAVE_ADDRESS(Address));
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 597              		.loc 1 533 0
 598 0000 4368     		ldr	r3, [r0, #4]
 599              	.LVL40:
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx SADD bit [9:0] */
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx SADD */
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 600              		.loc 1 539 0
 601 0002 8905     		lsl	r1, r1, #22
 602              	.LVL41:
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 603              		.loc 1 536 0
 604 0004 9B0A     		lsr	r3, r3, #10
 605              	.LVL42:
 606 0006 9B02     		lsl	r3, r3, #10
 607              	.LVL43:
 608              		.loc 1 539 0
 609 0008 890D     		lsr	r1, r1, #22
 610 000a 1943     		orr	r1, r3
 611              	.LVL44:
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 612              		.loc 1 542 0
 613 000c 4160     		str	r1, [r0, #4]
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 614              		.loc 1 543 0
 615              		@ sp needed for prologue
 616 000e 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE45:
 620              		.section	.text.I2C_10BitAddressingModeCmd,"ax",%progbits
 621              		.align	1
 622              		.global	I2C_10BitAddressingModeCmd
 623              		.code	16
 624              		.thumb_func
 626              	I2C_10BitAddressingModeCmd:
 627              	.LFB46:
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C 10-bit addressing mode for the master.
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C 10-bit addressing mode.
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This function should be called before generating start condition.
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_10BitAddressingModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 628              		.loc 1 554 0
 629              		.cfi_startproc
 630              	.LVL45:
 631 0000 00B5     		push	{lr}
 632              	.LCFI10:
 633              		.cfi_def_cfa_offset 4
 634              		.cfi_offset 14, -4
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable 10-bit addressing mode */
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_ADD10;
 635              		.loc 1 562 0
 636 0002 4268     		ldr	r2, [r0, #4]
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 637              		.loc 1 559 0
 638 0004 0029     		cmp	r1, #0
 639 0006 03D0     		beq	.L54
 640              		.loc 1 562 0
 641 0008 8023     		mov	r3, #128
 642 000a 1B01     		lsl	r3, r3, #4
 643 000c 1343     		orr	r3, r2
 644 000e 01E0     		b	.L56
 645              	.L54:
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable 10-bit addressing mode */
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 646              		.loc 1 567 0
 647 0010 014B     		ldr	r3, .L57
 648 0012 1340     		and	r3, r2
 649              	.L56:
 650 0014 4360     		str	r3, [r0, #4]
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 651              		.loc 1 569 0
 652              		@ sp needed for prologue
 653 0016 00BD     		pop	{pc}
 654              	.L58:
 655              		.align	2
 656              	.L57:
 657 0018 FFF7FFFF 		.word	-2049
 658              		.cfi_endproc
 659              	.LFE46:
 661              		.section	.text.I2C_AutoEndCmd,"ax",%progbits
 662              		.align	1
 663              		.global	I2C_AutoEndCmd
 664              		.code	16
 665              		.thumb_func
 667              	I2C_AutoEndCmd:
 668              	.LFB47:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group2 Communications handling functions
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Communications handling functions 
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                   ##### Communications handling functions #####
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a set of functions that handles I2C communication.
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Automatic End mode is enabled using I2C_AutoEndCmd() function. When Reload
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          mode is enabled via I2C_ReloadCmd() AutoEnd bit has no effect.
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] I2C_NumberOfBytesConfig() function set the number of bytes to be transferred,
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          this configuration should be done before generating start condition in master 
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          mode.
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] When switching from master write operation to read operation in 10Bit addressing
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          mode, master can only sends the 1st 7 bits of the 10 bit address, followed by 
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          Read direction by enabling HEADR bit using I2C_10BitAddressHeader() function.
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In master mode, when transferring more than 255 bytes Reload mode should be used
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          to handle communication. In the first phase of transfer, Nbytes should be set to 
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          255. After transferring these bytes TCR flag is set and I2C_TransferHandling()
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function should be called to handle remaining communication.
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In master mode, when software end mode is selected when all data is transferred
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          TC flag is set I2C_TransferHandling() function should be called to generate STOP
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          or generate ReStart.
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C automatic end mode (stop condition is 
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         automatically sent when nbytes data are transferred).
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C automatic end mode.
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This function has effect if Reload mode is disabled.
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_AutoEndCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 669              		.loc 1 619 0
 670              		.cfi_startproc
 671              	.LVL46:
 672 0000 00B5     		push	{lr}
 673              	.LCFI11:
 674              		.cfi_def_cfa_offset 4
 675              		.cfi_offset 14, -4
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Auto end mode */
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_AUTOEND;
 676              		.loc 1 627 0
 677 0002 4268     		ldr	r2, [r0, #4]
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 678              		.loc 1 624 0
 679 0004 0029     		cmp	r1, #0
 680 0006 03D0     		beq	.L60
 681              		.loc 1 627 0
 682 0008 8023     		mov	r3, #128
 683 000a 9B04     		lsl	r3, r3, #18
 684 000c 1343     		orr	r3, r2
 685 000e 01E0     		b	.L62
 686              	.L60:
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Auto end mode */
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 687              		.loc 1 632 0
 688 0010 014B     		ldr	r3, .L63
 689 0012 1340     		and	r3, r2
 690              	.L62:
 691 0014 4360     		str	r3, [r0, #4]
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 692              		.loc 1 634 0
 693              		@ sp needed for prologue
 694 0016 00BD     		pop	{pc}
 695              	.L64:
 696              		.align	2
 697              	.L63:
 698 0018 FFFFFFFD 		.word	-33554433
 699              		.cfi_endproc
 700              	.LFE47:
 702              		.section	.text.I2C_ReloadCmd,"ax",%progbits
 703              		.align	1
 704              		.global	I2C_ReloadCmd
 705              		.code	16
 706              		.thumb_func
 708              	I2C_ReloadCmd:
 709              	.LFB48:
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C nbytes reload mode.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the nbytes reload mode.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ReloadCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 710              		.loc 1 644 0
 711              		.cfi_startproc
 712              	.LVL47:
 713 0000 00B5     		push	{lr}
 714              	.LCFI12:
 715              		.cfi_def_cfa_offset 4
 716              		.cfi_offset 14, -4
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Auto Reload mode */
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_RELOAD;
 717              		.loc 1 652 0
 718 0002 4268     		ldr	r2, [r0, #4]
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 719              		.loc 1 649 0
 720 0004 0029     		cmp	r1, #0
 721 0006 03D0     		beq	.L66
 722              		.loc 1 652 0
 723 0008 8023     		mov	r3, #128
 724 000a 5B04     		lsl	r3, r3, #17
 725 000c 1343     		orr	r3, r2
 726 000e 01E0     		b	.L68
 727              	.L66:
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Auto Reload mode */
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 728              		.loc 1 657 0
 729 0010 014B     		ldr	r3, .L69
 730 0012 1340     		and	r3, r2
 731              	.L68:
 732 0014 4360     		str	r3, [r0, #4]
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 733              		.loc 1 659 0
 734              		@ sp needed for prologue
 735 0016 00BD     		pop	{pc}
 736              	.L70:
 737              		.align	2
 738              	.L69:
 739 0018 FFFFFFFE 		.word	-16777217
 740              		.cfi_endproc
 741              	.LFE48:
 743              		.section	.text.I2C_NumberOfBytesConfig,"ax",%progbits
 744              		.align	1
 745              		.global	I2C_NumberOfBytesConfig
 746              		.code	16
 747              		.thumb_func
 749              	I2C_NumberOfBytesConfig:
 750              	.LFB49:
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the number of bytes to be transmitted/received.
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Number_Bytes: specifies the number of bytes to be programmed.
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_NumberOfBytesConfig(I2C_TypeDef* I2Cx, uint8_t Number_Bytes)
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 751              		.loc 1 668 0
 752              		.cfi_startproc
 753              	.LVL48:
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 754              		.loc 1 675 0
 755 0000 4268     		ldr	r2, [r0, #4]
 756              	.LVL49:
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx Nbytes bit [7:0] */
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 757              		.loc 1 678 0
 758 0002 034B     		ldr	r3, .L72
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx Nbytes */
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 759              		.loc 1 681 0
 760 0004 0904     		lsl	r1, r1, #16
 761              	.LVL50:
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 762              		.loc 1 678 0
 763 0006 1340     		and	r3, r2
 764              	.LVL51:
 765              		.loc 1 681 0
 766 0008 1943     		orr	r1, r3
 767              	.LVL52:
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 768              		.loc 1 684 0
 769 000a 4160     		str	r1, [r0, #4]
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 770              		.loc 1 685 0
 771              		@ sp needed for prologue
 772 000c 7047     		bx	lr
 773              	.L73:
 774 000e C046     		.align	2
 775              	.L72:
 776 0010 FFFF00FF 		.word	-16711681
 777              		.cfi_endproc
 778              	.LFE49:
 780              		.section	.text.I2C_MasterRequestConfig,"ax",%progbits
 781              		.align	1
 782              		.global	I2C_MasterRequestConfig
 783              		.code	16
 784              		.thumb_func
 786              	I2C_MasterRequestConfig:
 787              	.LFB50:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the type of transfer request for the master.
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_Direction: specifies the transfer request direction to be programmed.
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Master request a write transfer
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Master request a read transfer  
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_MasterRequestConfig(I2C_TypeDef* I2Cx, uint16_t I2C_Direction)
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 788              		.loc 1 697 0
 789              		.cfi_startproc
 790              	.LVL53:
 791 0000 00B5     		push	{lr}
 792              	.LCFI13:
 793              		.cfi_def_cfa_offset 4
 794              		.cfi_offset 14, -4
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Check the parameters */
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (I2C_Direction == I2C_Direction_Transmitter)
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Request a write Transfer */
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 795              		.loc 1 706 0
 796 0002 4268     		ldr	r2, [r0, #4]
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (I2C_Direction == I2C_Direction_Transmitter)
 797              		.loc 1 703 0
 798 0004 0029     		cmp	r1, #0
 799 0006 02D1     		bne	.L75
 800              		.loc 1 706 0
 801 0008 034B     		ldr	r3, .L78
 802 000a 1340     		and	r3, r2
 803 000c 02E0     		b	.L77
 804              	.L75:
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Request a read Transfer */
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_RD_WRN;
 805              		.loc 1 711 0
 806 000e 8023     		mov	r3, #128
 807 0010 DB00     		lsl	r3, r3, #3
 808 0012 1343     		orr	r3, r2
 809              	.L77:
 810 0014 4360     		str	r3, [r0, #4]
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 811              		.loc 1 713 0
 812              		@ sp needed for prologue
 813 0016 00BD     		pop	{pc}
 814              	.L79:
 815              		.align	2
 816              	.L78:
 817 0018 FFFBFFFF 		.word	-1025
 818              		.cfi_endproc
 819              	.LFE50:
 821              		.section	.text.I2C_GenerateSTART,"ax",%progbits
 822              		.align	1
 823              		.global	I2C_GenerateSTART
 824              		.code	16
 825              		.thumb_func
 827              	I2C_GenerateSTART:
 828              	.LFB51:
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 829              		.loc 1 723 0
 830              		.cfi_startproc
 831              	.LVL54:
 832 0000 00B5     		push	{lr}
 833              	.LCFI14:
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 14, -4
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Generate a START condition */
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_START;
 836              		.loc 1 731 0
 837 0002 4268     		ldr	r2, [r0, #4]
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 838              		.loc 1 728 0
 839 0004 0029     		cmp	r1, #0
 840 0006 03D0     		beq	.L81
 841              		.loc 1 731 0
 842 0008 8023     		mov	r3, #128
 843 000a 9B01     		lsl	r3, r3, #6
 844 000c 1343     		orr	r3, r2
 845 000e 01E0     		b	.L83
 846              	.L81:
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the START condition generation */
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 847              		.loc 1 736 0
 848 0010 014B     		ldr	r3, .L84
 849 0012 1340     		and	r3, r2
 850              	.L83:
 851 0014 4360     		str	r3, [r0, #4]
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 852              		.loc 1 738 0
 853              		@ sp needed for prologue
 854 0016 00BD     		pop	{pc}
 855              	.L85:
 856              		.align	2
 857              	.L84:
 858 0018 FFDFFFFF 		.word	-8193
 859              		.cfi_endproc
 860              	.LFE51:
 862              		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 863              		.align	1
 864              		.global	I2C_GenerateSTOP
 865              		.code	16
 866              		.thumb_func
 868              	I2C_GenerateSTOP:
 869              	.LFB52:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 870              		.loc 1 748 0
 871              		.cfi_startproc
 872              	.LVL55:
 873 0000 00B5     		push	{lr}
 874              	.LCFI15:
 875              		.cfi_def_cfa_offset 4
 876              		.cfi_offset 14, -4
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Generate a STOP condition */
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_STOP;
 877              		.loc 1 756 0
 878 0002 4268     		ldr	r2, [r0, #4]
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 879              		.loc 1 753 0
 880 0004 0029     		cmp	r1, #0
 881 0006 03D0     		beq	.L87
 882              		.loc 1 756 0
 883 0008 8023     		mov	r3, #128
 884 000a DB01     		lsl	r3, r3, #7
 885 000c 1343     		orr	r3, r2
 886 000e 01E0     		b	.L89
 887              	.L87:
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the STOP condition generation */
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 888              		.loc 1 761 0
 889 0010 014B     		ldr	r3, .L90
 890 0012 1340     		and	r3, r2
 891              	.L89:
 892 0014 4360     		str	r3, [r0, #4]
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 893              		.loc 1 763 0
 894              		@ sp needed for prologue
 895 0016 00BD     		pop	{pc}
 896              	.L91:
 897              		.align	2
 898              	.L90:
 899 0018 FFBFFFFF 		.word	-16385
 900              		.cfi_endproc
 901              	.LFE52:
 903              		.section	.text.I2C_10BitAddressHeaderCmd,"ax",%progbits
 904              		.align	1
 905              		.global	I2C_10BitAddressHeaderCmd
 906              		.code	16
 907              		.thumb_func
 909              	I2C_10BitAddressHeaderCmd:
 910              	.LFB53:
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C 10-bit header only mode with read direction.
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C 10-bit header only mode.
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This mode can be used only when switching from master transmitter mode 
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         to master receiver mode.
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_10BitAddressHeaderCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 911              		.loc 1 775 0
 912              		.cfi_startproc
 913              	.LVL56:
 914 0000 00B5     		push	{lr}
 915              	.LCFI16:
 916              		.cfi_def_cfa_offset 4
 917              		.cfi_offset 14, -4
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable 10-bit header only mode */
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_HEAD10R;
 918              		.loc 1 783 0
 919 0002 4268     		ldr	r2, [r0, #4]
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 920              		.loc 1 780 0
 921 0004 0029     		cmp	r1, #0
 922 0006 03D0     		beq	.L93
 923              		.loc 1 783 0
 924 0008 8023     		mov	r3, #128
 925 000a 5B01     		lsl	r3, r3, #5
 926 000c 1343     		orr	r3, r2
 927 000e 01E0     		b	.L95
 928              	.L93:
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable 10-bit header only mode */
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 929              		.loc 1 788 0
 930 0010 014B     		ldr	r3, .L96
 931 0012 1340     		and	r3, r2
 932              	.L95:
 933 0014 4360     		str	r3, [r0, #4]
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }    
 934              		.loc 1 790 0
 935              		@ sp needed for prologue
 936 0016 00BD     		pop	{pc}
 937              	.L97:
 938              		.align	2
 939              	.L96:
 940 0018 FFEFFFFF 		.word	-4097
 941              		.cfi_endproc
 942              	.LFE53:
 944              		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 945              		.align	1
 946              		.global	I2C_AcknowledgeConfig
 947              		.code	16
 948              		.thumb_func
 950              	I2C_AcknowledgeConfig:
 951              	.LFB54:
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Generates I2C communication Acknowledge.
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the Acknowledge.
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 952              		.loc 1 800 0
 953              		.cfi_startproc
 954              	.LVL57:
 955 0000 00B5     		push	{lr}
 956              	.LCFI17:
 957              		.cfi_def_cfa_offset 4
 958              		.cfi_offset 14, -4
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable ACK generation */
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 959              		.loc 1 808 0
 960 0002 4268     		ldr	r2, [r0, #4]
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 961              		.loc 1 805 0
 962 0004 0029     		cmp	r1, #0
 963 0006 02D0     		beq	.L99
 964              		.loc 1 808 0
 965 0008 034B     		ldr	r3, .L102
 966 000a 1340     		and	r3, r2
 967 000c 02E0     		b	.L101
 968              	.L99:
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable NACK generation */
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_NACK;
 969              		.loc 1 813 0
 970 000e 8023     		mov	r3, #128
 971 0010 1B02     		lsl	r3, r3, #8
 972 0012 1343     		orr	r3, r2
 973              	.L101:
 974 0014 4360     		str	r3, [r0, #4]
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 975              		.loc 1 815 0
 976              		@ sp needed for prologue
 977 0016 00BD     		pop	{pc}
 978              	.L103:
 979              		.align	2
 980              	.L102:
 981 0018 FF7FFFFF 		.word	-32769
 982              		.cfi_endproc
 983              	.LFE54:
 985              		.section	.text.I2C_GetAddressMatched,"ax",%progbits
 986              		.align	1
 987              		.global	I2C_GetAddressMatched
 988              		.code	16
 989              		.thumb_func
 991              	I2C_GetAddressMatched:
 992              	.LFB55:
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the I2C slave matched address .
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the slave matched address .
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint8_t I2C_GetAddressMatched(I2C_TypeDef* I2Cx)
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 993              		.loc 1 823 0
 994              		.cfi_startproc
 995              	.LVL58:
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the slave matched address in the SR1 register */
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 996              		.loc 1 828 0
 997 0000 8369     		ldr	r3, [r0, #24]
 998 0002 FE20     		mov	r0, #254
 999              	.LVL59:
 1000 0004 0004     		lsl	r0, r0, #16
 1001 0006 1840     		and	r0, r3
 1002 0008 000C     		lsr	r0, r0, #16
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1003              		.loc 1 829 0
 1004              		@ sp needed for prologue
 1005 000a 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE55:
 1009              		.section	.text.I2C_GetTransferDirection,"ax",%progbits
 1010              		.align	1
 1011              		.global	I2C_GetTransferDirection
 1012              		.code	16
 1013              		.thumb_func
 1015              	I2C_GetTransferDirection:
 1016              	.LFB56:
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the I2C slave received request.
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the received request.
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint16_t I2C_GetTransferDirection(I2C_TypeDef* I2Cx)
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1017              		.loc 1 837 0
 1018              		.cfi_startproc
 1019              	.LVL60:
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint16_t direction = 0;
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the slave matched address in the SR1 register */
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 1020              		.loc 1 845 0
 1021 0000 8069     		ldr	r0, [r0, #24]
 1022              	.LVL61:
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* If write transfer is requested */
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (tmpreg == 0)
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* write transfer is requested */
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     direction = I2C_Direction_Transmitter;
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Read transfer is requested */
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     direction = I2C_Direction_Receiver;
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }  
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return direction;
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1023              		.loc 1 859 0
 1024              		@ sp needed for prologue
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 1025              		.loc 1 845 0
 1026 0002 C003     		lsl	r0, r0, #15
 1027              	.LVL62:
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     direction = I2C_Direction_Transmitter;
 1028              		.loc 1 851 0
 1029 0004 C00F     		lsr	r0, r0, #31
 1030 0006 8002     		lsl	r0, r0, #10
 1031              	.LVL63:
 1032              		.loc 1 859 0
 1033 0008 7047     		bx	lr
 1034              		.cfi_endproc
 1035              	.LFE56:
 1037              		.section	.text.I2C_TransferHandling,"ax",%progbits
 1038              		.align	1
 1039              		.global	I2C_TransferHandling
 1040              		.code	16
 1041              		.thumb_func
 1043              	I2C_TransferHandling:
 1044              	.LFB57:
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Handles I2Cx communication when starting transfer or during transfer (TC or TCR flag ar
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Address: specifies the slave address to be programmed.
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Number_Bytes: specifies the number of bytes to be programmed.
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter must be a value between 0 and 255.
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  ReloadEndMode: new state of the I2C START condition generation.
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Reload_Mode: Enable Reload mode .
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_AutoEnd_Mode: Enable Automatic end mode.
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_SoftEnd_Mode: Enable Software end mode.
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  StartStopMode: new state of the I2C START condition generation.
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_No_StartStop: Don't Generate stop and start condition.
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Generate_Stop: Generate stop condition (Number_Bytes should be set to 0).
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t Reloa
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1045              		.loc 1 881 0
 1046              		.cfi_startproc
 1047              	.LVL64:
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_START_STOP_MODE(StartStopMode));
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the CR2 register value */
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* clear tmpreg specific bits */
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* update tmpreg */
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_
 1048              		.loc 1 897 0
 1049 0000 8905     		lsl	r1, r1, #22
 1050              	.LVL65:
 1051 0002 890D     		lsr	r1, r1, #22
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1052              		.loc 1 881 0
 1053 0004 10B5     		push	{r4, lr}
 1054              	.LCFI18:
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 4, -8
 1057              		.cfi_offset 14, -4
 1058              		.loc 1 897 0
 1059 0006 0B43     		orr	r3, r1
 1060              	.LVL66:
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 1061              		.loc 1 891 0
 1062 0008 4468     		ldr	r4, [r0, #4]
 1063              	.LVL67:
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND
 1064              		.loc 1 894 0
 1065 000a 0549     		ldr	r1, .L109
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* update CR2 register */
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;  
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1066              		.loc 1 902 0
 1067              		@ sp needed for prologue
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND
 1068              		.loc 1 894 0
 1069 000c 0C40     		and	r4, r1
 1070              	.LVL68:
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_
 1071              		.loc 1 897 0
 1072 000e 0299     		ldr	r1, [sp, #8]
 1073 0010 2343     		orr	r3, r4
 1074 0012 0B43     		orr	r3, r1
 1075 0014 1404     		lsl	r4, r2, #16
 1076              	.LVL69:
 1077 0016 1A1C     		mov	r2, r3
 1078              	.LVL70:
 1079 0018 2243     		orr	r2, r4
 1080              	.LVL71:
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;  
 1081              		.loc 1 901 0
 1082 001a 4260     		str	r2, [r0, #4]
 1083              		.loc 1 902 0
 1084 001c 10BD     		pop	{r4, pc}
 1085              	.L110:
 1086 001e C046     		.align	2
 1087              	.L109:
 1088 0020 009800FC 		.word	-67069952
 1089              		.cfi_endproc
 1090              	.LFE57:
 1092              		.section	.text.I2C_SMBusAlertCmd,"ax",%progbits
 1093              		.align	1
 1094              		.global	I2C_SMBusAlertCmd
 1095              		.code	16
 1096              		.thumb_func
 1098              	I2C_SMBusAlertCmd:
 1099              	.LFB58:
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group3 SMBUS management functions
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   SMBUS management functions 
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                       ##### SMBUS management functions #####
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a set of functions that handles SMBus communication
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          and timeouts detection.
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The SMBus Device default address (0b1100 001) is enabled by calling I2C_Init()
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function and setting I2C_Mode member of I2C_InitTypeDef() structure to 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C_Mode_SMBusDevice.
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The SMBus Host address (0b0001 000) is enabled by calling I2C_Init()
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function and setting I2C_Mode member of I2C_InitTypeDef() structure to 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C_Mode_SMBusHost.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The Alert Response Address (0b0001 100) is enabled using I2C_SMBusAlertCmd()
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function.
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] To detect cumulative SCL stretch in master and slave mode, TIMEOUTB should be 
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          configured (in accordance to SMBus specification) using I2C_TimeoutBConfig() 
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function then I2C_ExtendedClockTimeoutCmd() function should be called to enable
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the detection.
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] SCL low timeout is detected by configuring TIMEOUTB using I2C_TimeoutBConfig()
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function followed by the call of I2C_ClockTimeoutCmd(). When adding to this 
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          procedure the call of I2C_IdleClockTimeoutCmd() function, Bus Idle condition 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (both SCL and SDA high) is detected also.
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C SMBus alert.
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx SMBus alert.
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SMBusAlertCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1100              		.loc 1 952 0
 1101              		.cfi_startproc
 1102              	.LVL72:
 1103 0000 00B5     		push	{lr}
 1104              	.LCFI19:
 1105              		.cfi_def_cfa_offset 4
 1106              		.cfi_offset 14, -4
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable SMBus alert */
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 1107              		.loc 1 960 0
 1108 0002 0268     		ldr	r2, [r0]
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1109              		.loc 1 957 0
 1110 0004 0029     		cmp	r1, #0
 1111 0006 03D0     		beq	.L112
 1112              		.loc 1 960 0
 1113 0008 8023     		mov	r3, #128
 1114 000a DB03     		lsl	r3, r3, #15
 1115 000c 1343     		orr	r3, r2
 1116 000e 01E0     		b	.L114
 1117              	.L112:
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable SMBus alert */    
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 1118              		.loc 1 965 0
 1119 0010 014B     		ldr	r3, .L115
 1120 0012 1340     		and	r3, r2
 1121              	.L114:
 1122 0014 0360     		str	r3, [r0]
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1123              		.loc 1 967 0
 1124              		@ sp needed for prologue
 1125 0016 00BD     		pop	{pc}
 1126              	.L116:
 1127              		.align	2
 1128              	.L115:
 1129 0018 FFFFBFFF 		.word	-4194305
 1130              		.cfi_endproc
 1131              	.LFE58:
 1133              		.section	.text.I2C_ClockTimeoutCmd,"ax",%progbits
 1134              		.align	1
 1135              		.global	I2C_ClockTimeoutCmd
 1136              		.code	16
 1137              		.thumb_func
 1139              	I2C_ClockTimeoutCmd:
 1140              	.LFB59:
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C Clock Timeout (SCL Timeout detection).
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx clock Timeout.
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1141              		.loc 1 977 0
 1142              		.cfi_startproc
 1143              	.LVL73:
 1144 0000 00B5     		push	{lr}
 1145              	.LCFI20:
 1146              		.cfi_def_cfa_offset 4
 1147              		.cfi_offset 14, -4
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Clock Timeout */
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 1148              		.loc 1 985 0
 1149 0002 4269     		ldr	r2, [r0, #20]
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1150              		.loc 1 982 0
 1151 0004 0029     		cmp	r1, #0
 1152 0006 03D0     		beq	.L118
 1153              		.loc 1 985 0
 1154 0008 8023     		mov	r3, #128
 1155 000a 1B02     		lsl	r3, r3, #8
 1156 000c 1343     		orr	r3, r2
 1157 000e 01E0     		b	.L120
 1158              	.L118:
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Clock Timeout */    
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 1159              		.loc 1 990 0
 1160 0010 014B     		ldr	r3, .L121
 1161 0012 1340     		and	r3, r2
 1162              	.L120:
 1163 0014 4361     		str	r3, [r0, #20]
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1164              		.loc 1 992 0
 1165              		@ sp needed for prologue
 1166 0016 00BD     		pop	{pc}
 1167              	.L122:
 1168              		.align	2
 1169              	.L121:
 1170 0018 FF7FFFFF 		.word	-32769
 1171              		.cfi_endproc
 1172              	.LFE59:
 1174              		.section	.text.I2C_ExtendedClockTimeoutCmd,"ax",%progbits
 1175              		.align	1
 1176              		.global	I2C_ExtendedClockTimeoutCmd
 1177              		.code	16
 1178              		.thumb_func
 1180              	I2C_ExtendedClockTimeoutCmd:
 1181              	.LFB60:
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C Extended Clock Timeout (SCL cumulative Timeout detection).
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx Extended clock Timeout.
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ExtendedClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1182              		.loc 1 1002 0
 1183              		.cfi_startproc
 1184              	.LVL74:
 1185 0000 00B5     		push	{lr}
 1186              	.LCFI21:
 1187              		.cfi_def_cfa_offset 4
 1188              		.cfi_offset 14, -4
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1189              		.loc 1 1007 0
 1190 0002 0029     		cmp	r1, #0
 1191 0004 04D0     		beq	.L124
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Clock Timeout */
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 1192              		.loc 1 1010 0
 1193 0006 4269     		ldr	r2, [r0, #20]
 1194 0008 8023     		mov	r3, #128
 1195 000a 1B06     		lsl	r3, r3, #24
 1196 000c 1343     		orr	r3, r2
 1197 000e 02E0     		b	.L126
 1198              	.L124:
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Clock Timeout */    
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 1199              		.loc 1 1015 0
 1200 0010 4369     		ldr	r3, [r0, #20]
 1201 0012 5B00     		lsl	r3, r3, #1
 1202 0014 5B08     		lsr	r3, r3, #1
 1203              	.L126:
 1204 0016 4361     		str	r3, [r0, #20]
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1205              		.loc 1 1017 0
 1206              		@ sp needed for prologue
 1207 0018 00BD     		pop	{pc}
 1208              		.cfi_endproc
 1209              	.LFE60:
 1211              		.section	.text.I2C_IdleClockTimeoutCmd,"ax",%progbits
 1212              		.align	1
 1213              		.global	I2C_IdleClockTimeoutCmd
 1214              		.code	16
 1215              		.thumb_func
 1217              	I2C_IdleClockTimeoutCmd:
 1218              	.LFB61:
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C Idle Clock Timeout (Bus idle SCL and SDA 
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         high detection).
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx Idle clock Timeout.
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_IdleClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1219              		.loc 1 1028 0
 1220              		.cfi_startproc
 1221              	.LVL75:
 1222 0000 00B5     		push	{lr}
 1223              	.LCFI22:
 1224              		.cfi_def_cfa_offset 4
 1225              		.cfi_offset 14, -4
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Clock Timeout */
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 1226              		.loc 1 1036 0
 1227 0002 4269     		ldr	r2, [r0, #20]
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1228              		.loc 1 1033 0
 1229 0004 0029     		cmp	r1, #0
 1230 0006 03D0     		beq	.L128
 1231              		.loc 1 1036 0
 1232 0008 8023     		mov	r3, #128
 1233 000a 5B01     		lsl	r3, r3, #5
 1234 000c 1343     		orr	r3, r2
 1235 000e 01E0     		b	.L130
 1236              	.L128:
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Clock Timeout */    
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 1237              		.loc 1 1041 0
 1238 0010 014B     		ldr	r3, .L131
 1239 0012 1340     		and	r3, r2
 1240              	.L130:
 1241 0014 4361     		str	r3, [r0, #20]
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1242              		.loc 1 1043 0
 1243              		@ sp needed for prologue
 1244 0016 00BD     		pop	{pc}
 1245              	.L132:
 1246              		.align	2
 1247              	.L131:
 1248 0018 FFEFFFFF 		.word	-4097
 1249              		.cfi_endproc
 1250              	.LFE61:
 1252              		.section	.text.I2C_TimeoutAConfig,"ax",%progbits
 1253              		.align	1
 1254              		.global	I2C_TimeoutAConfig
 1255              		.code	16
 1256              		.thumb_func
 1258              	I2C_TimeoutAConfig:
 1259              	.LFB62:
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the I2C Bus Timeout A (SCL Timeout when TIDLE = 0 or Bus 
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         idle SCL and SDA high when TIDLE = 1).
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Timeout: specifies the TimeoutA to be programmed. 
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_TimeoutAConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1260              		.loc 1 1053 0
 1261              		.cfi_startproc
 1262              	.LVL76:
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_TIMEOUT(Timeout));
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->TIMEOUTR;
 1263              		.loc 1 1061 0
 1264 0000 4369     		ldr	r3, [r0, #20]
 1265              	.LVL77:
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx TIMEOUTA bit [11:0] */
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx TIMEOUTA */
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 1266              		.loc 1 1067 0
 1267 0002 0905     		lsl	r1, r1, #20
 1268              	.LVL78:
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 1269              		.loc 1 1064 0
 1270 0004 1B0B     		lsr	r3, r3, #12
 1271              	.LVL79:
 1272 0006 1B03     		lsl	r3, r3, #12
 1273              	.LVL80:
 1274              		.loc 1 1067 0
 1275 0008 090D     		lsr	r1, r1, #20
 1276 000a 1943     		orr	r1, r3
 1277              	.LVL81:
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMEOUTR = tmpreg;
 1278              		.loc 1 1070 0
 1279 000c 4161     		str	r1, [r0, #20]
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1280              		.loc 1 1071 0
 1281              		@ sp needed for prologue
 1282 000e 7047     		bx	lr
 1283              		.cfi_endproc
 1284              	.LFE62:
 1286              		.section	.text.I2C_TimeoutBConfig,"ax",%progbits
 1287              		.align	1
 1288              		.global	I2C_TimeoutBConfig
 1289              		.code	16
 1290              		.thumb_func
 1292              	I2C_TimeoutBConfig:
 1293              	.LFB63:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the I2C Bus Timeout B (SCL cumulative Timeout).
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Timeout: specifies the TimeoutB to be programmed. 
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_TimeoutBConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1294              		.loc 1 1080 0
 1295              		.cfi_startproc
 1296              	.LVL82:
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_TIMEOUT(Timeout));
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->TIMEOUTR;
 1297              		.loc 1 1088 0
 1298 0000 4269     		ldr	r2, [r0, #20]
 1299              	.LVL83:
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx TIMEOUTB bit [11:0] */
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 1300              		.loc 1 1091 0
 1301 0002 044B     		ldr	r3, .L135
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx TIMEOUTB */
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 1302              		.loc 1 1094 0
 1303 0004 0904     		lsl	r1, r1, #16
 1304              	.LVL84:
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 1305              		.loc 1 1091 0
 1306 0006 1340     		and	r3, r2
 1307              	.LVL85:
 1308              		.loc 1 1094 0
 1309 0008 034A     		ldr	r2, .L135+4
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMEOUTR = tmpreg;
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1310              		.loc 1 1098 0
 1311              		@ sp needed for prologue
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 1312              		.loc 1 1094 0
 1313 000a 1140     		and	r1, r2
 1314 000c 1943     		orr	r1, r3
 1315              	.LVL86:
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMEOUTR = tmpreg;
 1316              		.loc 1 1097 0
 1317 000e 4161     		str	r1, [r0, #20]
 1318              		.loc 1 1098 0
 1319 0010 7047     		bx	lr
 1320              	.L136:
 1321 0012 C046     		.align	2
 1322              	.L135:
 1323 0014 FFFF00F0 		.word	-268369921
 1324 0018 0000FF0F 		.word	268369920
 1325              		.cfi_endproc
 1326              	.LFE63:
 1328              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1329              		.align	1
 1330              		.global	I2C_CalculatePEC
 1331              		.code	16
 1332              		.thumb_func
 1334              	I2C_CalculatePEC:
 1335              	.LFB64:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C PEC calculation.
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC calculation.
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1336              		.loc 1 1108 0
 1337              		.cfi_startproc
 1338              	.LVL87:
 1339 0000 00B5     		push	{lr}
 1340              	.LCFI23:
 1341              		.cfi_def_cfa_offset 4
 1342              		.cfi_offset 14, -4
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable PEC calculation */
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PECEN;   
 1343              		.loc 1 1116 0
 1344 0002 0268     		ldr	r2, [r0]
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1345              		.loc 1 1113 0
 1346 0004 0029     		cmp	r1, #0
 1347 0006 03D0     		beq	.L138
 1348              		.loc 1 1116 0
 1349 0008 8023     		mov	r3, #128
 1350 000a 1B04     		lsl	r3, r3, #16
 1351 000c 1343     		orr	r3, r2
 1352 000e 01E0     		b	.L140
 1353              	.L138:
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable PEC calculation */    
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 1354              		.loc 1 1121 0
 1355 0010 014B     		ldr	r3, .L141
 1356 0012 1340     		and	r3, r2
 1357              	.L140:
 1358 0014 0360     		str	r3, [r0]
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1359              		.loc 1 1123 0
 1360              		@ sp needed for prologue
 1361 0016 00BD     		pop	{pc}
 1362              	.L142:
 1363              		.align	2
 1364              	.L141:
 1365 0018 FFFF7FFF 		.word	-8388609
 1366              		.cfi_endproc
 1367              	.LFE64:
 1369              		.section	.text.I2C_PECRequestCmd,"ax",%progbits
 1370              		.align	1
 1371              		.global	I2C_PECRequestCmd
 1372              		.code	16
 1373              		.thumb_func
 1375              	I2C_PECRequestCmd:
 1376              	.LFB65:
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C PEC transmission/reception request.
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC request.
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_PECRequestCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1377              		.loc 1 1133 0
 1378              		.cfi_startproc
 1379              	.LVL88:
 1380 0000 00B5     		push	{lr}
 1381              	.LCFI24:
 1382              		.cfi_def_cfa_offset 4
 1383              		.cfi_offset 14, -4
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable PEC transmission/reception request */
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_PECBYTE;   
 1384              		.loc 1 1141 0
 1385 0002 4268     		ldr	r2, [r0, #4]
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1386              		.loc 1 1138 0
 1387 0004 0029     		cmp	r1, #0
 1388 0006 03D0     		beq	.L144
 1389              		.loc 1 1141 0
 1390 0008 8023     		mov	r3, #128
 1391 000a DB04     		lsl	r3, r3, #19
 1392 000c 1343     		orr	r3, r2
 1393 000e 01E0     		b	.L146
 1394              	.L144:
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable PEC transmission/reception request */    
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 1395              		.loc 1 1146 0
 1396 0010 014B     		ldr	r3, .L147
 1397 0012 1340     		and	r3, r2
 1398              	.L146:
 1399 0014 4360     		str	r3, [r0, #4]
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1400              		.loc 1 1148 0
 1401              		@ sp needed for prologue
 1402 0016 00BD     		pop	{pc}
 1403              	.L148:
 1404              		.align	2
 1405              	.L147:
 1406 0018 FFFFFFFB 		.word	-67108865
 1407              		.cfi_endproc
 1408              	.LFE65:
 1410              		.section	.text.I2C_GetPEC,"ax",%progbits
 1411              		.align	1
 1412              		.global	I2C_GetPEC
 1413              		.code	16
 1414              		.thumb_func
 1416              	I2C_GetPEC:
 1417              	.LFB66:
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the I2C PEC.
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the PEC .
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1418              		.loc 1 1156 0
 1419              		.cfi_startproc
 1420              	.LVL89:
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the slave matched address in the SR1 register */
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 1421              		.loc 1 1161 0
 1422 0000 006A     		ldr	r0, [r0, #32]
 1423              	.LVL90:
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1424              		.loc 1 1162 0
 1425              		@ sp needed for prologue
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 1426              		.loc 1 1161 0
 1427 0002 C0B2     		uxtb	r0, r0
 1428              		.loc 1 1162 0
 1429 0004 7047     		bx	lr
 1430              		.cfi_endproc
 1431              	.LFE66:
 1433              		.section	.text.I2C_ReadRegister,"ax",%progbits
 1434              		.align	1
 1435              		.global	I2C_ReadRegister
 1436              		.code	16
 1437              		.thumb_func
 1439              	I2C_ReadRegister:
 1440              	.LFB67:
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group4 I2C registers management functions
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   I2C registers management functions 
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                 ##### I2C registers management functions #####
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a functions that allow user the management of 
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C registers.
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /**
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_CR1: CR1 register.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_CR2: CR2 register.
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_OAR1: OAR1 register.
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_OAR2: OAR2 register.
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_TIMINGR: TIMING register.
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_TIMEOUTR: TIMEOUTR register.
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_ISR: ISR register.
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_ICR: ICR register.
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_PECR: PECR register.
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_RXDR: RXDR register.
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_TXDR: TXDR register.
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the read register.
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1441              		.loc 1 1202 0
 1442              		.cfi_startproc
 1443              	.LVL91:
 1444 0000 82B0     		sub	sp, sp, #8
 1445              	.LCFI25:
 1446              		.cfi_def_cfa_offset 8
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   __IO uint32_t tmp = 0;
 1447              		.loc 1 1203 0
 1448 0002 0023     		mov	r3, #0
 1449 0004 0193     		str	r3, [sp, #4]
 1450              	.LVL92:
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmp = (uint32_t)I2Cx;
 1451              		.loc 1 1209 0
 1452 0006 0190     		str	r0, [sp, #4]
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmp += I2C_Register;
 1453              		.loc 1 1210 0
 1454 0008 019B     		ldr	r3, [sp, #4]
 1455 000a C918     		add	r1, r1, r3
 1456              	.LVL93:
 1457 000c 0191     		str	r1, [sp, #4]
 1458              	.LVL94:
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the selected register value */
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (*(__IO uint32_t *) tmp);
 1459              		.loc 1 1213 0
 1460 000e 019B     		ldr	r3, [sp, #4]
 1461 0010 1868     		ldr	r0, [r3]
 1462              	.LVL95:
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1463              		.loc 1 1214 0
 1464 0012 02B0     		add	sp, sp, #8
 1465              		@ sp needed for prologue
 1466 0014 7047     		bx	lr
 1467              		.cfi_endproc
 1468              	.LFE67:
 1470              		.section	.text.I2C_SendData,"ax",%progbits
 1471              		.align	1
 1472              		.global	I2C_SendData
 1473              		.code	16
 1474              		.thumb_func
 1476              	I2C_SendData:
 1477              	.LFB68:
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group5 Data transfers management functions
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Data transfers management functions 
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                 ##### Data transfers management functions #####
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This subsection provides a set of functions allowing to manage 
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the I2C data transfers.
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The read access of the I2C_RXDR register can be done using 
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the I2C_ReceiveData() function and returns the received value.
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          Whereas a write access to the I2C_TXDR can be done using I2C_SendData()
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function and stores the written data into TXDR.
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Data: Byte to be transmitted..
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1478              		.loc 1 1245 0
 1479              		.cfi_startproc
 1480              	.LVL96:
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write in the DR register the data to be sent */
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TXDR = (uint8_t)Data;
 1481              		.loc 1 1250 0
 1482 0000 8162     		str	r1, [r0, #40]
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1483              		.loc 1 1251 0
 1484              		@ sp needed for prologue
 1485 0002 7047     		bx	lr
 1486              		.cfi_endproc
 1487              	.LFE68:
 1489              		.section	.text.I2C_ReceiveData,"ax",%progbits
 1490              		.align	1
 1491              		.global	I2C_ReceiveData
 1492              		.code	16
 1493              		.thumb_func
 1495              	I2C_ReceiveData:
 1496              	.LFB69:
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the received data.
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1497              		.loc 1 1259 0
 1498              		.cfi_startproc
 1499              	.LVL97:
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the data in the DR register */
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)I2Cx->RXDR;
 1500              		.loc 1 1264 0
 1501 0000 406A     		ldr	r0, [r0, #36]
 1502              	.LVL98:
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 1503              		.loc 1 1265 0
 1504              		@ sp needed for prologue
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)I2Cx->RXDR;
 1505              		.loc 1 1264 0
 1506 0002 C0B2     		uxtb	r0, r0
 1507              		.loc 1 1265 0
 1508 0004 7047     		bx	lr
 1509              		.cfi_endproc
 1510              	.LFE69:
 1512              		.section	.text.I2C_DMACmd,"ax",%progbits
 1513              		.align	1
 1514              		.global	I2C_DMACmd
 1515              		.code	16
 1516              		.thumb_func
 1518              	I2C_DMACmd:
 1519              	.LFB70:
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */ 
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group6 DMA transfers management functions
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   DMA transfers management functions 
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                 ##### DMA transfers management functions #####
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides two functions that can be used only in DMA mode.
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In DMA Mode, the I2C communication can be managed by 2 DMA Channel 
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          requests:
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (#) I2C_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (#) I2C_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In this Mode it is advised to use the following function:
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (+) I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState);
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C DMA interface.
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_DMAReq: specifies the I2C DMA transfer request to be enabled or disabled. 
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_DMAReq_Tx: Tx DMA transfer request
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_DMAReq_Rx: Rx DMA transfer request
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the selected I2C DMA transfer request.
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState)
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1520              		.loc 1 1302 0
 1521              		.cfi_startproc
 1522              	.LVL99:
 1523 0000 00B5     		push	{lr}
 1524              	.LCFI26:
 1525              		.cfi_def_cfa_offset 4
 1526              		.cfi_offset 14, -4
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable the selected I2C DMA requests */
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_DMAReq;
 1527              		.loc 1 1311 0
 1528 0002 0368     		ldr	r3, [r0]
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1529              		.loc 1 1308 0
 1530 0004 002A     		cmp	r2, #0
 1531 0006 02D0     		beq	.L154
 1532              		.loc 1 1311 0
 1533 0008 1943     		orr	r1, r3
 1534              	.LVL100:
 1535 000a 0160     		str	r1, [r0]
 1536 000c 01E0     		b	.L153
 1537              	.LVL101:
 1538              	.L154:
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the selected I2C DMA requests */
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 1539              		.loc 1 1316 0
 1540 000e 8B43     		bic	r3, r1
 1541 0010 0360     		str	r3, [r0]
 1542              	.LVL102:
 1543              	.L153:
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1544              		.loc 1 1318 0
 1545              		@ sp needed for prologue
 1546 0012 00BD     		pop	{pc}
 1547              		.cfi_endproc
 1548              	.LFE70:
 1550              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1551              		.align	1
 1552              		.global	I2C_GetFlagStatus
 1553              		.code	16
 1554              		.thumb_func
 1556              	I2C_GetFlagStatus:
 1557              	.LFB71:
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group7 Interrupts and flags management functions
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Interrupts and flags management functions 
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****              ##### Interrupts and flags management functions  #####
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides functions allowing to configure the I2C Interrupts 
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          sources and check or clear the flags or pending bits status.
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          The user should identify which mode will be used in his application to manage 
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the communication: Polling mode, Interrupt mode or DMA mode(refer I2C_Group6).
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *** Polling Mode ***
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ====================
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In Polling Mode, the I2C communication can be managed by 15 flags:
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TXE: to indicate the status of Transmit data register empty flag.
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TXIS: to indicate the status of Transmit interrupt status flag .
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_RXNE: to indicate the status of Receive data register not empty flag.
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_ADDR: to indicate the status of Address matched flag (slave mode).
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_NACKF: to indicate the status of NACK received flag.
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_STOPF: to indicate the status of STOP detection flag.
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TC: to indicate the status of Transfer complete flag(master mode).
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TCR: to indicate the status of Transfer complete reload flag.
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_BERR: to indicate the status of Bus error flag.
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_ARLO: to indicate the status of Arbitration lost flag.
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_OVR: to indicate the status of Overrun/Underrun flag.
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_PECERR: to indicate the status of PEC error in reception flag.
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TIMEOUT: to indicate the status of Timeout or Tlow detection flag.
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_ALERT: to indicate the status of SMBus Alert flag.
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_BUSY: to indicate the status of Bus busy flag.
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In this Mode it is advised to use the following functions:
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..]
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (@)Do not use the BUSY flag to handle each data transmission or reception.It is 
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****            better to use the TXIS and RXNE flags instead.
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *** Interrupt Mode ***
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ======================
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In Interrupt Mode, the I2C communication can be managed by 7 interrupt sources
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          and 15 pending bits: 
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Interrupt Source:
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ERRI: specifies the interrupt source for the Error interrupt.
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TCI: specifies the interrupt source for the Transfer Complete interrupt.
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_STOPI: specifies the interrupt source for the Stop Detection interrupt.
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_NACKI: specifies the interrupt source for the Not Acknowledge received interrupt
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ADDRI: specifies the interrupt source for the Address Match interrupt.
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_RXI: specifies the interrupt source for the RX interrupt.
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TXI: specifies the interrupt source for the TX interrupt.
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Pending Bits:
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TXIS: to indicate the status of Transmit interrupt status flag.
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_RXNE: to indicate the status of Receive data register not empty flag.
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ADDR: to indicate the status of Address matched flag (slave mode).
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_NACKF: to indicate the status of NACK received flag.
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_STOPF: to indicate the status of STOP detection flag.
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TC: to indicate the status of Transfer complete flag (master mode).
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TCR: to indicate the status of Transfer complete reload flag.
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_BERR: to indicate the status of Bus error flag.
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ARLO: to indicate the status of Arbitration lost flag.
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_OVR: to indicate the status of Overrun/Underrun flag.
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_PECERR: to indicate the status of PEC error in reception flag.
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TIMEOUT: to indicate the status of Timeout or Tlow detection flag.
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ALERT: to indicate the status of SMBus Alert flag.
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In this Mode it is advised to use the following functions:
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Transmit data register empty
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TXIS: Transmit interrupt status
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Receive data register not empty
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address matched (slave mode)
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_NACKF: NACK received flag
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: STOP detection flag
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TC: Transfer complete (master mode)
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TCR: Transfer complete reload
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ALERT: SMBus Alert
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1558              		.loc 1 1422 0
 1559              		.cfi_startproc
 1560              	.LVL103:
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   FlagStatus bitstatus = RESET;
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the ISR register value */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->ISR;
 1561              		.loc 1 1431 0
 1562 0000 8069     		ldr	r0, [r0, #24]
 1563              	.LVL104:
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get flag status */
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_FLAG;
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if(tmpreg != 0)
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_FLAG is set */
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = SET;
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_FLAG is reset */
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = RESET;
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return bitstatus;
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 1564              		.loc 1 1447 0
 1565              		@ sp needed for prologue
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_FLAG;
 1566              		.loc 1 1434 0
 1567 0002 0840     		and	r0, r1
 1568              	.LVL105:
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return bitstatus;
 1569              		.loc 1 1446 0
 1570 0004 431E     		sub	r3, r0, #1
 1571 0006 9841     		sbc	r0, r0, r3
 1572              	.LVL106:
 1573              		.loc 1 1447 0
 1574 0008 7047     		bx	lr
 1575              		.cfi_endproc
 1576              	.LFE71:
 1578              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1579              		.align	1
 1580              		.global	I2C_ClearFlag
 1581              		.code	16
 1582              		.thumb_func
 1584              	I2C_ClearFlag:
 1585              	.LFB72:
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address matched (slave mode)
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_NACKF: NACK received flag
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: STOP detection flag
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ALERT: SMBus Alert
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** { 
 1586              		.loc 1 1466 0
 1587              		.cfi_startproc
 1588              	.LVL107:
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear the selected flag */
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->ICR = I2C_FLAG;
 1589              		.loc 1 1472 0
 1590 0000 C161     		str	r1, [r0, #28]
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 1591              		.loc 1 1473 0
 1592              		@ sp needed for prologue
 1593 0002 7047     		bx	lr
 1594              		.cfi_endproc
 1595              	.LFE72:
 1597              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1598              		.align	1
 1599              		.global	I2C_GetITStatus
 1600              		.code	16
 1601              		.thumb_func
 1603              	I2C_GetITStatus:
 1604              	.LFB73:
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check.
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TXIS: Transmit interrupt status
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_RXNE: Receive data register not empty
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address matched (slave mode)
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_NACKF: NACK received flag
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_STOPF: STOP detection flag
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TC: Transfer complete (master mode)
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TCR: Transfer complete reload
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ALERT: SMBus Alert
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1605              		.loc 1 1496 0
 1606              		.cfi_startproc
 1607              	.LVL108:
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ITStatus bitstatus = RESET;
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t enablestatus = 0;
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* If Error interrupt */
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if ((uint32_t)(I2C_IT & ERROR_IT_MASK))
 1608              		.loc 1 1507 0
 1609 0000 FC23     		mov	r3, #252
 1610 0002 9B01     		lsl	r3, r3, #6
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1611              		.loc 1 1496 0
 1612 0004 00B5     		push	{lr}
 1613              	.LCFI27:
 1614              		.cfi_def_cfa_offset 4
 1615              		.cfi_offset 14, -4
 1616              		.loc 1 1507 0
 1617 0006 1942     		tst	r1, r3
 1618 0008 02D0     		beq	.L159
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 1619              		.loc 1 1509 0
 1620 000a 0268     		ldr	r2, [r0]
 1621 000c 8023     		mov	r3, #128
 1622 000e 04E0     		b	.L162
 1623              	.L159:
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* If TC interrupt */
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else if ((uint32_t)(I2C_IT & TC_IT_MASK))
 1624              		.loc 1 1512 0
 1625 0010 C023     		mov	r3, #192
 1626 0012 1942     		tst	r1, r3
 1627 0014 03D0     		beq	.L161
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 1628              		.loc 1 1514 0
 1629 0016 0268     		ldr	r2, [r0]
 1630 0018 4023     		mov	r3, #64
 1631              	.L162:
 1632 001a 1340     		and	r3, r2
 1633              	.LVL109:
 1634 001c 01E0     		b	.L160
 1635              	.LVL110:
 1636              	.L161:
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 1637              		.loc 1 1518 0
 1638 001e 0368     		ldr	r3, [r0]
 1639 0020 0B40     		and	r3, r1
 1640              	.LVL111:
 1641              	.L160:
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the ISR register value */
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->ISR;
 1642              		.loc 1 1522 0
 1643 0022 8069     		ldr	r0, [r0, #24]
 1644              	.LVL112:
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get flag status */
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_IT;
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the status of the specified I2C flag */
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if((tmpreg != RESET) && enablestatus)
 1645              		.loc 1 1528 0
 1646 0024 5A1E     		sub	r2, r3, #1
 1647 0026 9341     		sbc	r3, r3, r2
 1648              	.LVL113:
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_IT;
 1649              		.loc 1 1525 0
 1650 0028 0840     		and	r0, r1
 1651              	.LVL114:
 1652              		.loc 1 1528 0
 1653 002a 411E     		sub	r1, r0, #1
 1654 002c 8841     		sbc	r0, r0, r1
 1655              	.LVL115:
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_IT is set */
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = SET;
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_IT is reset */
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = RESET;
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the I2C_IT status */
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return bitstatus;
 1656              		.loc 1 1540 0
 1657 002e 1840     		and	r0, r3
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1658              		.loc 1 1541 0
 1659              		@ sp needed for prologue
 1660 0030 00BD     		pop	{pc}
 1661              		.cfi_endproc
 1662              	.LFE73:
 1664              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 1665              		.align	1
 1666              		.global	I2C_ClearITPendingBit
 1667              		.code	16
 1668              		.thumb_func
 1670              	I2C_ClearITPendingBit:
 1671              	.LFB74:
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear.
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address matched (slave mode)
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_NACKF: NACK received flag
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_STOPF: STOP detection flag
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ALERT: SMBus Alert
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1672              		.loc 1 1560 0
 1673              		.cfi_startproc
 1674              	.LVL116:
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear the selected flag */
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->ICR = I2C_IT;
 1675              		.loc 1 1566 0
 1676 0000 C161     		str	r1, [r0, #28]
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1677              		.loc 1 1567 0
 1678              		@ sp needed for prologue
 1679 0002 7047     		bx	lr
 1680              		.cfi_endproc
 1681              	.LFE74:
 1683              		.text
 1684              	.Letext0:
 1685              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1686              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 1687              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
 1688              		.file 5 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_i2c.c
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:18     .text.I2C_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:23     .text.I2C_DeInit:00000000 I2C_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:71     .text.I2C_DeInit:00000030 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:76     .text.I2C_Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:81     .text.I2C_Init:00000000 I2C_Init
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:179    .text.I2C_Init:00000058 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:186    .text.I2C_StructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:191    .text.I2C_StructInit:00000000 I2C_StructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:223    .text.I2C_Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:228    .text.I2C_Cmd:00000000 I2C_Cmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:259    .text.I2C_SoftwareResetCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:264    .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:289    .text.I2C_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:294    .text.I2C_ITConfig:00000000 I2C_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:327    .text.I2C_StretchClockCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:332    .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:363    .text.I2C_StretchClockCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:368    .text.I2C_StopModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:373    .text.I2C_StopModeCmd:00000000 I2C_StopModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:404    .text.I2C_StopModeCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:409    .text.I2C_DualAddressCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:414    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:445    .text.I2C_DualAddressCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:450    .text.I2C_OwnAddress2Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:455    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:500    .text.I2C_OwnAddress2Config:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:505    .text.I2C_GeneralCallCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:510    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:541    .text.I2C_GeneralCallCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:546    .text.I2C_SlaveByteControlCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:551    .text.I2C_SlaveByteControlCmd:00000000 I2C_SlaveByteControlCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:582    .text.I2C_SlaveByteControlCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:587    .text.I2C_SlaveAddressConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:592    .text.I2C_SlaveAddressConfig:00000000 I2C_SlaveAddressConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:621    .text.I2C_10BitAddressingModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:626    .text.I2C_10BitAddressingModeCmd:00000000 I2C_10BitAddressingModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:657    .text.I2C_10BitAddressingModeCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:662    .text.I2C_AutoEndCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:667    .text.I2C_AutoEndCmd:00000000 I2C_AutoEndCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:698    .text.I2C_AutoEndCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:703    .text.I2C_ReloadCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:708    .text.I2C_ReloadCmd:00000000 I2C_ReloadCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:739    .text.I2C_ReloadCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:744    .text.I2C_NumberOfBytesConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:749    .text.I2C_NumberOfBytesConfig:00000000 I2C_NumberOfBytesConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:776    .text.I2C_NumberOfBytesConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:781    .text.I2C_MasterRequestConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:786    .text.I2C_MasterRequestConfig:00000000 I2C_MasterRequestConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:817    .text.I2C_MasterRequestConfig:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:822    .text.I2C_GenerateSTART:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:827    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:858    .text.I2C_GenerateSTART:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:863    .text.I2C_GenerateSTOP:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:868    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:899    .text.I2C_GenerateSTOP:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:904    .text.I2C_10BitAddressHeaderCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:909    .text.I2C_10BitAddressHeaderCmd:00000000 I2C_10BitAddressHeaderCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:940    .text.I2C_10BitAddressHeaderCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:945    .text.I2C_AcknowledgeConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:950    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:981    .text.I2C_AcknowledgeConfig:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:986    .text.I2C_GetAddressMatched:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:991    .text.I2C_GetAddressMatched:00000000 I2C_GetAddressMatched
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1010   .text.I2C_GetTransferDirection:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1015   .text.I2C_GetTransferDirection:00000000 I2C_GetTransferDirection
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1038   .text.I2C_TransferHandling:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1043   .text.I2C_TransferHandling:00000000 I2C_TransferHandling
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1088   .text.I2C_TransferHandling:00000020 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1093   .text.I2C_SMBusAlertCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1098   .text.I2C_SMBusAlertCmd:00000000 I2C_SMBusAlertCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1129   .text.I2C_SMBusAlertCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1134   .text.I2C_ClockTimeoutCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1139   .text.I2C_ClockTimeoutCmd:00000000 I2C_ClockTimeoutCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1170   .text.I2C_ClockTimeoutCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1175   .text.I2C_ExtendedClockTimeoutCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1180   .text.I2C_ExtendedClockTimeoutCmd:00000000 I2C_ExtendedClockTimeoutCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1212   .text.I2C_IdleClockTimeoutCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1217   .text.I2C_IdleClockTimeoutCmd:00000000 I2C_IdleClockTimeoutCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1248   .text.I2C_IdleClockTimeoutCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1253   .text.I2C_TimeoutAConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1258   .text.I2C_TimeoutAConfig:00000000 I2C_TimeoutAConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1287   .text.I2C_TimeoutBConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1292   .text.I2C_TimeoutBConfig:00000000 I2C_TimeoutBConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1323   .text.I2C_TimeoutBConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1329   .text.I2C_CalculatePEC:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1334   .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1365   .text.I2C_CalculatePEC:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1370   .text.I2C_PECRequestCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1375   .text.I2C_PECRequestCmd:00000000 I2C_PECRequestCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1406   .text.I2C_PECRequestCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1411   .text.I2C_GetPEC:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1416   .text.I2C_GetPEC:00000000 I2C_GetPEC
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1434   .text.I2C_ReadRegister:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1439   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1471   .text.I2C_SendData:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1476   .text.I2C_SendData:00000000 I2C_SendData
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1490   .text.I2C_ReceiveData:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1495   .text.I2C_ReceiveData:00000000 I2C_ReceiveData
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1513   .text.I2C_DMACmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1518   .text.I2C_DMACmd:00000000 I2C_DMACmd
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1551   .text.I2C_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1556   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1579   .text.I2C_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1584   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1598   .text.I2C_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1603   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1665   .text.I2C_ClearITPendingBit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccRzZDsm.s:1670   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_i2c.h.85.b3bd9e0f95f00cc43238b778ec0825c4

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
