   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TI1_Config,"ax",%progbits
  18              		.align	1
  19              		.code	16
  20              		.thumb_func
  22              	TI1_Config:
  23              	.LFB122:
  24              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @file    stm32f0xx_tim.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          functionalities of the TIM peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + TimeBase management
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Output Compare management
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Input Capture management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Interrupts, DMA and flags management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Clocks management
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Synchronization management
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Specific interface management
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Specific remapping management      
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *              
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *  @verbatim
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                     ##### How to use this driver #####
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] This driver provides functions to configure and program the TIM 
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          of all STM32F0xx devices These functions are split in 8 groups: 
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM TimeBase management: this group includes all needed functions 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              to configure the TM Timebase unit:
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set/Get Prescaler.
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set/Get Autoreload.
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Counter modes configuration.
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set Clock division.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the One Pulse mode.
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Update Request Configuration.
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Update Disable Configuration.
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Auto-Preload Configuration.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable the counter.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM Output Compare management: this group includes all needed 
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              functions to configure the Capture/Compare unit used in Output 
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              compare mode: 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure each channel, independently, in Output Compare mode.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the output compare modes.
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the Polarities of each channel.
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set/Get the Capture/Compare register values.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the Output Compare Fast mode. 
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the Output Compare Forced mode.  
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Output Compare-Preload Configuration. 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clear Output Compare Reference.
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the OCREF Clear signal.
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable the Capture/Compare Channels.    
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM Input Capture management: this group includes all needed 
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              functions to configure the Capture/Compare unit used in 
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              Input Capture mode:
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure each channel in input capture mode.
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure Channel1/2 in PWM Input mode.
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set the Input Capture Prescaler.
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Get the Capture/Compare values.  
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (#) Advanced-control timers (TIM1) specific features
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Configures the Break input, dead time, Lock level, the OSSI,
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                  the OSSR State and the AOE(automatic output enable)
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Enable/Disable the TIM peripheral Main Outputs
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Select the Commutation event
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Set/Reset the Capture Compare Preload Control bit     
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM interrupts, DMA and flags management.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable interrupt sources.
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Get flags status.
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clear flags/ Pending bits.
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable DMA requests. 
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure DMA burst mode.
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select CaptureCompare DMA request.  
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM clocks management: this group includes all needed functions 
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              to configure the clock controller unit:
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select internal/External clock.
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx.
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM synchronization management: this group includes all needed. 
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              functions to configure the Synchronization unit:
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Input Trigger.  
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Output Trigger.  
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Master Slave Mode. 
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) ETR Configuration when used as external trigger.   
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM specific interface management, this group includes all 
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              needed functions to use the specific TIM interface:
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Encoder Interface Configuration.
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Hall Sensor.   
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM specific remapping management includes the Remapping 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              configuration of specific timers
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *    
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ******************************************************************************
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @attention
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * You may not use this file except in compliance with the License.
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * You may obtain a copy of the License at:
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * Unless required by applicable law or agreed to in writing, software 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * See the License for the specific language governing permissions and
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * limitations under the License.
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ******************************************************************************
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Includes ------------------------------------------------------------------*/
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #include "stm32f0xx_tim.h"
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #include "stm32f0xx_rcc.h"
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM 
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief TIM driver modules
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private typedef -----------------------------------------------------------*/
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private define ------------------------------------------------------------*/
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define SMCR_ETR_MASK               ((uint16_t)0x00FF) 
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define CCMR_OFFSET                 ((uint16_t)0x0018)
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define CCER_CCE_SET                ((uint16_t)0x0001)
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define CCER_CCNE_SET               ((uint16_t)0x0004) 
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private macro -------------------------------------------------------------*/
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private variables ---------------------------------------------------------*/
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private function prototypes -----------------------------------------------*/
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private functions ---------------------------------------------------------*/
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Private_Functions
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group1 TimeBase management functions
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief   TimeBase management functions 
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                  ##### TimeBase management functions #####
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in Timing(Time base) Mode ***
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] To use the Timer in Timing(Time base) mode, the following steps are 
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          mandatory:
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable TIM clock using 
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Fill the TIM_TimeBaseInitStruct with the desired parameters.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure 
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              the Time Base unit with the corresponding configuration.
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the NVIC if you need to generate the update interrupt. 
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the corresponding interrupt using the function 
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_ITConfig(TIMx, TIM_IT_Update). 
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..]
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) All other functions can be used seperatly to modify, if needed,
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             a specific feature of the Timer. 
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *   
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIMx == TIM1)
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }     
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM2)
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM3)
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM6)
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   } 
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM7)
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM14) 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {       
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }        
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM15)
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   } 
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM16)
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   } 
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM17)
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     {
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     }  
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****      
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         structure that contains the configuration information for
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         the specified TIM peripheral.
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Select the Counter Mode */
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx != TIM6)
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the clock division */
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Autoreload value */
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Prescaler value */
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Repetition Counter value */
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Generate an update event to reload the Prescaler and the Repetition counter
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****      values immediately */
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         which will be initialized.
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Prescaler.
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Prescaler value */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = Prescaler;
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or reset the UG Bit */
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, or 3 to select the TIM peripheral.
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CMS and DIR Bits */
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Counter Mode */
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR1 register */
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Counter Register value
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          peripheral.
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Counter: specifies the Counter register new value.
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    assert_param(IS_TIM_ALL_PERIPH(TIMx));
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Counter Register value */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CNT = Counter;
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Autoreload Register value */
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = Autoreload;
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Counter value.
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Counter Register value.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Counter Register value */
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CNT;
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Prescaler value.
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Prescaler Register value.
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Prescaler Register value */
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->PSC;
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Update Disable Bit */
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Update Disable Bit */
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_UpdateSource_Regular: Source of update is the counter
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                 overflow/underflow or the setting of UG bit, or an update
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                 generation through the slave mode controller.
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the URS Bit */
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the URS Bit */
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the ARR Preload Bit */
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the ARR Preload Bit */
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OPMode_Single
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OPMode_Repetitive
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OPM Bit */
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the OPM Mode */
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Clock Division value.
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following value:
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CKD Bits */
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the CKD value */
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17to select the TIMx
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the TIM Counter */
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the TIM Counter */
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group2 Advanced-control timers (TIM1) specific features
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief   Advanced-control timers (TIM1) specific features
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim   
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       ##### Advanced-control timers (TIM1) specific features #####
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================  
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****        ===================================================================      
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****               *** TIM Driver: how to use the Break feature ***
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****        =================================================================== 
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****        [..] After configuring the Timer channel(s) in the appropriate Output Compare mode: 
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                          
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                AOE(automatic output enable).
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Once the break even occurs, the Timer's output signals are put in reset
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                state or in a known state (according to the configuration made in
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_BDTRConfig() function).
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the: Break feature, dead time, Lock level, OSSI/OSSR State
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         and the AOE(automatic output enable).
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 15, 16 or 17 to select the TIM 
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         will be initialized.
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIMx peripheral.
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the TIM Main Output */
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the TIM Main Output */
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }  
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group3 Output Compare management functions
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Output Compare management functions 
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                 ##### Output Compare management functions #####
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in Output Compare Mode ***
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] To use the Timer in Output Compare mode, the following steps are mandatory:
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable TIM clock using 
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function.
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the TIM pins by configuring the corresponding GPIO pins
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Time base unit as described in the first part of this 
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              driver, if needed, else the Timer will run with the default 
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              configuration:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Autoreload value = 0xFFFF.
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Prescaler value = 0x0000.
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Counter mode = Up counting.
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clock Division = TIM_CKD_DIV1.
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Fill the TIM_OCInitStruct with the desired parameters including:
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) The TIM Output Compare mode: TIM_OCMode.
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Output State: TIM_OutputState.
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Pulse value: TIM_Pulse.
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Output Compare Polarity : TIM_OCPolarity.
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired 
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              channel with the corresponding configuration.
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..]
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) All other functions can be used separately to modify, if needed,
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           a specific feature of the Timer.
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) In case of PWM mode, this function is mandatory:
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE).
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) If the corresponding interrupt or DMA request are needed, the user should:
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (#@) Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests).
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (#@) Enable the corresponding interrupt (or DMA request) using the function
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                  TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)).
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  /* Disable the Channel 1: Reset the CC1E Bit */
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare Mode Bits */
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N Polarity level */
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N State */
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    /* Disable the Channel 2: Reset the CC2E Bit */
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */  
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Check the parameters */
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare State */
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM1)
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     {    
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Check the parameters */
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Reset the Output N Polarity level */
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Set the Output N Polarity */
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Reset the Output N State */
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Set the Output N State */
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Reset the Output Compare N IDLE State */
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Set the Output N Idle state */
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     }
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N Polarity level */
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N State */
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC4E Bit */
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare IDLE State */
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */  
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         be initialized.
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000000;
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   This function disables the selected channel before changing the Output
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         Compare Mode.
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         User has to enable this channel using TIM_CCxCmd and TIM_CCxNCmd functions.
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Timing
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Active
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Toggle
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_PWM1
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_PWM2
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint32_t tmp = 0;
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmp1 = 0;
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint32_t) TIMx;
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (TIM_Channel>>1);
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare1 Register value */
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = Compare1;
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare2 Register value */
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = Compare2;
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare3 Register value */
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = Compare3;
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare4 Register value */
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = Compare4;
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIMx peripheral
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the CCPC Bit */
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the CCPC Bit */
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1PE Bit */
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 and 15 to select the TIM peripheral.
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2PE Bit */
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC3PE Bit */
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC4PE Bit */
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1FE Bit */
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2FE Bit */
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC3FE Bit */
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC4FE Bit */
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1CE Bit */
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2CE Bit */
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC3CE Bit */
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC4CE Bit */
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC1P Bit */
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCPolarity;
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIM peripheral.
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC1NP Bit */
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC2P Bit */
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1 to select the TIM peripheral.
1769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC2NP Bit */
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
1786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC3P Bit */
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
1812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1 to select the TIM peripheral.
1819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
1829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC3NP Bit */
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC4P Bit */
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the OCReference Clear source.
1869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCReferenceClear: specifies the OCReference Clear source.
1872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to
1874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connecte
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));
1882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the TIM_OCReferenceClear source */
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
1892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
1905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
1908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
1911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CCxE Bit */
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
1914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or reset the CCxE Bit */ 
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIM peripheral.
1922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
1928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
1929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
1934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
1939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
1941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CCxNE Bit */
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
1944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or reset the CCxNE Bit */ 
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 15, 16 or 17 to select the TIMx peripheral
1952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Commutation event.
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
1962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the COM Bit */
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
1965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
1967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the COM Bit */
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
1970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
1975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group4 Input Capture management functions
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Input Capture management functions 
1979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
1980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
1981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
1982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                ##### Input Capture management functions #####
1983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
1984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           *** TIM Driver: how to use it in Input Capture Mode ***
1986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
1987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] To use the Timer in Input Capture mode, the following steps are mandatory:
1988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              function.
1990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the TIM pins by configuring the corresponding GPIO pins.
1991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Time base unit as described in the first part of this 
1992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              driver, if needed, else the Timer will run with the default configuration:
1993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Autoreload value = 0xFFFF.
1994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Prescaler value = 0x0000.
1995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Counter mode = Up counting.
1996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clock Division = TIM_CKD_DIV1.
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Fill the TIM_ICInitStruct with the desired parameters including:
1998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Channel: TIM_Channel.
1999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input Capture polarity: TIM_ICPolarity.
2000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input Capture selection: TIM_ICSelection.
2001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input Capture Prescaler: TIM_ICPrescaler.
2002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input CApture filter value: TIM_ICFilter.
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired 
2004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              channel with the corresponding configuration and to measure only 
2005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              frequency or duty cycle of the input signal,or, Call 
2006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) to configure the desired 
2007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              channels with the corresponding configuration and to measure the 
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              frequency and the duty cycle of the input signal.
2009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the NVIC or the DMA to read the measured frequency.
2010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the corresponding interrupt (or DMA request) to read 
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              the Captured value, using the function TIM_ITConfig(TIMx, TIM_IT_CCx)
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)).
2013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
2014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Use TIM_GetCapturex(TIMx); to read the captured value.
2015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..]
2016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) All other functions can be used separately to modify, if needed,
2017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             a specific feature of the Timer. 
2018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified
2025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_ICInitStruct.
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
2029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
2030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
2038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
2039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
2040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
2041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
2042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
2054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
2064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI3 Configuration */
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
2068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI4 Configuration */
2077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
2087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
2088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         be initialized.
2089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIM peripheral according to the specified
2103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_ICInitStruct to measure an external PWM signal.
2104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
2107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
2108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
2109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
2114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
2115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Opposite Input Polarity */
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
2119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
2125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Opposite Input */
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
2128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
2130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
2134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   { 
2149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 1 Register value.
2166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 1 Register value */
2173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR1;
2174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 2 Register value.
2180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 2 Register value */
2187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR2;
2188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 3 Register value.
2195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 3 Register value */
2202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR3;
2203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 4 Register value.
2210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 4 Register value */
2217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR4;
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC1PSC Bits */
2239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC1PSC value */
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC2PSC Bits */
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
2264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC2PSC value */
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC3PSC Bits */
2287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
2288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC3PSC value */
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
2306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC4PSC Bits */
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
2312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC4PSC value */
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
2318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
2321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Interrupts, DMA and flags management functions 
2322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
2323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
2324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           ##### Interrupts, DMA and flags management functions #####
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
2334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIMx peripheral.
2335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
2339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * 
2349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update interrupt.
2350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1,TIM_IT_CC2 or TIM_IT_Trigger. 
2351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *       
2355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIM interrupts.
2356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
2360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
2361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the Interrupt sources */
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
2370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the Interrupt sources */
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
2375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
2380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the 
2381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         TIM peripheral.
2382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_EventSource: specifies the event source.
2386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one or more of the following values:  
2387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Update: Timer update Event source
2388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
2389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
2390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
2391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
2392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_COM: Timer COM event source  
2393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
2394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Break: Timer Break event source
2395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event.  
2397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1.
2398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *             
2399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
2402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
2403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
2406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the event sources */
2407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_EventSource;
2408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1, TIM_FLAG_CC2 or TIM_FLAG_Trigger.
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_Break is used only with TIM1 and TIM15. 
2435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_COM is used only with TIM1 TIM15, TIM16 and TIM17.
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
2441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET; 
2442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
2448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = SET;
2450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = RESET;
2454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears the TIMx's pending flags.
2460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,TIM_FLAG_CC2 or 
2481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         TIM_FLAG_Trigger. 
2482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_Break is used only with TIM1 and TIM15. 
2484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
2490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
2493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Clear the flags */
2495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
2496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET;  
2526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
2527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
2533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
2535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
2536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = SET;
2538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = RESET;
2542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
2544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM1 update Interrupt source
2555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Clear the IT pending Bit */
2578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
2579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx's DMA interface.
2583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 15, 16 or 17  to select the TIM peripheral.
2584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_DMABase: DMA Base address.
2586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CR1
2588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CR2
2589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_SMCR
2590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_DIER
2591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_SR
2592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_EGR
2593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCMR1
2594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCMR2
2595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCER
2596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CNT
2597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_PSC
2598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_ARR
2599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR1
2600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR2
2601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR3 
2602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR4
2603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_DCR
2604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_OR
2605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
2606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
2607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
2610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
2614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
2615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
2616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
2617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
2621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 15, 16 or 17 to select the TIM peripheral. 
2622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
2626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_Update: TIM update Interrupt source
2628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
2629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
2630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
2631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
2632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
2633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
2634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the DMA Request sources.
2635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
2639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
2640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST10_PERIPH(TIMx));
2642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
2643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the DMA sources */
2648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
2649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the DMA sources */
2653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
2654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
2659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 15, 16 or 17  to select the TIM peripheral.
2660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
2662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
2666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
2669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the CCDS Bit */
2674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
2675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the CCDS Bit */
2679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
2680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
2685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group6 Clocks management functions
2688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Clocks management functions
2689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
2690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
2691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                      ##### Clocks management functions #####
2693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx internal Clock
2701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
2706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
2710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
2711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
2715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ITRSource: Trigger source.
2718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR0: Internal Trigger 0
2720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR1: Internal Trigger 1
2721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR2: Internal Trigger 2
2722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR3: Internal Trigger 3
2723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
2730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Internal Trigger */
2731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
2732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
2738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
2741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
2743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
2744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
2745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
2746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
2748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
2749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ICFilter: specifies the filter value.
2750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x0 and 0xF.
2751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
2754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
2755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
2759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
2760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the Timer Input Clock Source */
2762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
2763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Trigger source */
2771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
2772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the External clock Mode1
2778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPo
2795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                              uint16_t ExtTRGFilter)
2796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
2798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the ETR Clock source */
2806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
2809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
2811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
2812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
2814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Trigger selection : ETRF */
2815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
2816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
2817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
2818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the External clock Mode2
2823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
2840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the ETR Clock source */
2849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable the External clock mode2 */
2851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
2852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
2856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group7 Synchronization management functions
2859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Synchronization management functions 
2860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
2861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
2862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                ##### Synchronization management functions #####
2864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in synchronization Mode ***
2866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] Case of two/several Timers
2868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Master Timers using the following functions:
2869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx,
2870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_TRGOSource).
2871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx,
2872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_MasterSlaveMode);  
2873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Slave Timers using the following functions: 
2874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, 
2875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_InputTriggerSource);  
2876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
2877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] Case of Timers and external trigger(ETR pin)
2878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Etrenal trigger using this function:
2879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
2880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
2881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Slave Timers using the following functions:
2882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx,
2883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_InputTriggerSource);
2884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
2885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the Input Trigger source
2891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
2894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
2900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
2901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
2902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
2903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
2908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
2911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
2912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
2914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the TS Bits */
2916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
2917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Input Trigger source */
2918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
2919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
2920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, or 15 to select the TIM peripheral.
2926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *   - For all TIMx
2933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigge
2934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output (TR
2935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output (TRGO
2936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *   - For all TIMx except TIM6 and TIM7
2938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF fl
2939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                     is to be set, as soon as a capture or compare match occurs 
2940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output (TRGO).
2941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output (TRGO).
2942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output (TRGO).
2943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
2944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST9_PERIPH(TIMx));
2951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the MMS Bits */
2954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
2955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the TRGO source */
2956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
2957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal (TRGI) re-initi
2966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                      the counter and triggers an update of the registers.
2967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (
2968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRG
2969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the 
2970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
2976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
2979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
2980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Slave Mode */
2981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
2982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                             and its slaves (through TRGO).
2992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Disable: No action
2993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
3000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the MSM Bit */
3002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
3003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the MSM Bit */
3005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
3006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
3010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
3013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
3015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
3016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
3017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
3018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
3019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
3021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
3022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
3023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
3024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
3027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                    uint16_t ExtTRGFilter)
3028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
3030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
3032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
3034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
3035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
3036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the ETR Bits */
3039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
3040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
3041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
3042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
3043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
3048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group8 Specific interface management functions
3051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Specific interface management functions 
3052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
3053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
3054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              ##### Specific interface management functions #####
3056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
3059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
3060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
3064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2 or 3 to select the TIM peripheral.
3065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
3067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
3069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
3070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
3071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                       on the level of the other input.
3072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
3073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
3074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
3077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
3078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
3083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
3084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
3086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
3087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
3088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
3089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
3090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
3092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
3093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
3094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
3096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
3098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
3099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
3100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the encoder Mode */
3102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
3103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
3104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
3105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
3106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
3107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
3108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_C
3109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
3110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
3111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
3113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
3114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
3115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
3116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
3120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
3123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
3124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
3127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
3129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
3133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
3134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the TI1S Bit */
3135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
3136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
3137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
3138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
3139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the TI1S Bit */
3140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
3141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
3142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
3146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group9 Specific remapping management function
3149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief   Specific remapping management function
3150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
3151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
3152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                ##### Specific remapping management function #####
3154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
3157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
3158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIM14 Remapping input Capabilities.
3161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 14 to select the TIM peripheral.
3162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Remap: specifies the TIM input reampping source.
3163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_GPIO: TIM14 Channel 1 is connected to GPIO.
3165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_RTC_CLK: TIM14 Channel 1 is connected to RTC input clock.
3166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                RTC input clock can be LSE, LSI or HSE/div128.
3167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_HSE_DIV32: TIM14 Channel 1 is connected to HSE/32 clock.  
3168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_MCO: TIM14 Channel 1 is connected to MCO clock.  
3169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                            MCO clock can be HSI14, SYSCLK, HSI, HSE or PLL/2.  
3170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
3173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  /* Check the parameters */
3175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST11_PERIPH(TIMx));
3176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_REMAP(TIM_Remap));
3177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Timer remapping configuration */
3179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->OR =  TIM_Remap;
3180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
3184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI1 as Input.
3188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
3189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
3197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
3198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
3199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
  25              		.loc 1 3205 0
  26              		.cfi_startproc
  27              	.LVL0:
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
3206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
3207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
3208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  36              		.loc 1 3208 0
  37 0002 058C     		ldrh	r5, [r0, #32]
  38 0004 0124     		mov	r4, #1
  39 0006 A543     		bic	r5, r4
  40 0008 0584     		strh	r5, [r0, #32]
3209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
  41              		.loc 1 3209 0
  42 000a 068B     		ldrh	r6, [r0, #24]
  43              	.LVL1:
3210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
  44              		.loc 1 3212 0
  45 000c F327     		mov	r7, #243
  46 000e BE43     		bic	r6, r7
  47              	.LVL2:
3210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
  48              		.loc 1 3210 0
  49 0010 058C     		ldrh	r5, [r0, #32]
  50              	.LVL3:
3213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  51              		.loc 1 3213 0
  52 0012 3243     		orr	r2, r6
  53              	.LVL4:
  54 0014 1B01     		lsl	r3, r3, #4
  55              	.LVL5:
  56 0016 1A43     		orr	r2, r3
  57              	.LVL6:
3214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
3215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC1E Bit */
3216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  58              		.loc 1 3216 0
  59 0018 0A23     		mov	r3, #10
  60 001a 9D43     		bic	r5, r3
  61              	.LVL7:
3217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  62              		.loc 1 3217 0
  63 001c 2C43     		orr	r4, r5
  64 001e 2143     		orr	r1, r4
  65              	.LVL8:
3218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
  66              		.loc 1 3219 0
  67 0020 0283     		strh	r2, [r0, #24]
3220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
3221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
  68              		.loc 1 3221 0
  69              		@ sp needed for prologue
3220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
  70              		.loc 1 3220 0
  71 0022 0184     		strh	r1, [r0, #32]
  72              		.loc 1 3221 0
  73 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
  74              		.cfi_endproc
  75              	.LFE122:
  77              		.section	.text.TI2_Config,"ax",%progbits
  78              		.align	1
  79              		.code	16
  80              		.thumb_func
  82              	TI2_Config:
  83              	.LFB123:
3222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI2 as Input.
3225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
3226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
3227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
3234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
3235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
3236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
  84              		.loc 1 3242 0
  85              		.cfi_startproc
  86              	.LVL9:
  87 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 20
  90              		.cfi_offset 4, -20
  91              		.cfi_offset 5, -16
  92              		.cfi_offset 6, -12
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
3243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
3244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
3245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  95              		.loc 1 3245 0
  96 0002 058C     		ldrh	r5, [r0, #32]
  97 0004 1024     		mov	r4, #16
  98 0006 A543     		bic	r5, r4
  99 0008 0584     		strh	r5, [r0, #32]
3246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 100              		.loc 1 3246 0
 101 000a 078B     		ldrh	r7, [r0, #24]
 102              	.LVL10:
3247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
3249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
 103              		.loc 1 3250 0
 104 000c 084E     		ldr	r6, .L3
3247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 105              		.loc 1 3247 0
 106 000e 058C     		ldrh	r5, [r0, #32]
 107              	.LVL11:
 108              		.loc 1 3250 0
 109 0010 3740     		and	r7, r6
 110              	.LVL12:
3251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
3252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 111              		.loc 1 3252 0
 112 0012 1602     		lsl	r6, r2, #8
3251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 113              		.loc 1 3251 0
 114 0014 3A1C     		mov	r2, r7
 115              	.LVL13:
 116 0016 3243     		orr	r2, r6
 117 0018 1B03     		lsl	r3, r3, #12
 118              	.LVL14:
 119 001a 92B2     		uxth	r2, r2
 120              		.loc 1 3252 0
 121 001c 1A43     		orr	r2, r3
 122              	.LVL15:
3253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC2E Bit */
3254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 123              		.loc 1 3254 0
 124 001e A023     		mov	r3, #160
 125 0020 9D43     		bic	r5, r3
 126              	.LVL16:
3255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 127              		.loc 1 3255 0
 128 0022 2C43     		orr	r4, r5
3248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 129              		.loc 1 3248 0
 130 0024 0901     		lsl	r1, r1, #4
 131              	.LVL17:
 132              		.loc 1 3255 0
 133 0026 0C43     		orr	r4, r1
 134              	.LVL18:
3256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 135              		.loc 1 3257 0
 136 0028 0283     		strh	r2, [r0, #24]
3258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
3259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 137              		.loc 1 3259 0
 138              		@ sp needed for prologue
3258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 139              		.loc 1 3258 0
 140 002a 0484     		strh	r4, [r0, #32]
 141              	.LVL19:
 142              	.LVL20:
 143              		.loc 1 3259 0
 144 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 145              	.L4:
 146 002e C046     		.align	2
 147              	.L3:
 148 0030 FF0C0000 		.word	3327
 149              		.cfi_endproc
 150              	.LFE123:
 152              		.section	.text.TIM_DeInit,"ax",%progbits
 153              		.align	1
 154              		.global	TIM_DeInit
 155              		.code	16
 156              		.thumb_func
 158              	TIM_DeInit:
 159              	.LFB33:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 160              		.loc 1 195 0
 161              		.cfi_startproc
 162              	.LVL21:
 163 0000 08B5     		push	{r3, lr}
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 3, -8
 167              		.cfi_offset 14, -4
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIMx == TIM1)
 168              		.loc 1 199 0
 169 0002 314B     		ldr	r3, .L17
 170 0004 9842     		cmp	r0, r3
 171 0006 07D1     		bne	.L6
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 172              		.loc 1 201 0
 173 0008 8020     		mov	r0, #128
 174              	.LVL22:
 175 000a 0001     		lsl	r0, r0, #4
 176 000c 0121     		mov	r1, #1
 177 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 178              	.LVL23:
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 179              		.loc 1 202 0
 180 0012 8020     		mov	r0, #128
 181 0014 0001     		lsl	r0, r0, #4
 182 0016 52E0     		b	.L15
 183              	.LVL24:
 184              	.L6:
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM2)
 185              		.loc 1 204 0
 186 0018 8023     		mov	r3, #128
 187 001a DB05     		lsl	r3, r3, #23
 188 001c 9842     		cmp	r0, r3
 189 001e 05D1     		bne	.L8
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 190              		.loc 1 206 0
 191 0020 0120     		mov	r0, #1
 192              	.LVL25:
 193 0022 011C     		mov	r1, r0
 194 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 195              	.LVL26:
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 196              		.loc 1 207 0
 197 0028 0120     		mov	r0, #1
 198 002a 24E0     		b	.L16
 199              	.LVL27:
 200              	.L8:
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM3)
 201              		.loc 1 209 0
 202 002c 274B     		ldr	r3, .L17+4
 203 002e 9842     		cmp	r0, r3
 204 0030 05D1     		bne	.L9
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 205              		.loc 1 211 0
 206 0032 0220     		mov	r0, #2
 207              	.LVL28:
 208 0034 0121     		mov	r1, #1
 209 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 210              	.LVL29:
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 211              		.loc 1 212 0
 212 003a 0220     		mov	r0, #2
 213 003c 1BE0     		b	.L16
 214              	.LVL30:
 215              	.L9:
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM6)
 216              		.loc 1 214 0
 217 003e 244B     		ldr	r3, .L17+8
 218 0040 9842     		cmp	r0, r3
 219 0042 05D1     		bne	.L10
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 220              		.loc 1 216 0
 221 0044 1020     		mov	r0, #16
 222              	.LVL31:
 223 0046 0121     		mov	r1, #1
 224 0048 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 225              	.LVL32:
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 226              		.loc 1 217 0
 227 004c 1020     		mov	r0, #16
 228 004e 12E0     		b	.L16
 229              	.LVL33:
 230              	.L10:
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM7)
 231              		.loc 1 219 0
 232 0050 204B     		ldr	r3, .L17+12
 233 0052 9842     		cmp	r0, r3
 234 0054 05D1     		bne	.L11
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 235              		.loc 1 221 0
 236 0056 2020     		mov	r0, #32
 237              	.LVL34:
 238 0058 0121     		mov	r1, #1
 239 005a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 240              	.LVL35:
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 241              		.loc 1 222 0
 242 005e 2020     		mov	r0, #32
 243 0060 09E0     		b	.L16
 244              	.LVL36:
 245              	.L11:
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM14) 
 246              		.loc 1 224 0
 247 0062 1D4B     		ldr	r3, .L17+16
 248 0064 9842     		cmp	r0, r3
 249 0066 0AD1     		bne	.L12
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 250              		.loc 1 226 0
 251 0068 8020     		mov	r0, #128
 252              	.LVL37:
 253 006a 4000     		lsl	r0, r0, #1
 254 006c 0121     		mov	r1, #1
 255 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 256              	.LVL38:
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 257              		.loc 1 227 0
 258 0072 8020     		mov	r0, #128
 259 0074 4000     		lsl	r0, r0, #1
 260              	.L16:
 261 0076 0021     		mov	r1, #0
 262 0078 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 263              	.LVL39:
 264 007c 22E0     		b	.L5
 265              	.LVL40:
 266              	.L12:
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM15)
 267              		.loc 1 229 0
 268 007e 174B     		ldr	r3, .L17+20
 269 0080 9842     		cmp	r0, r3
 270 0082 07D1     		bne	.L13
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 271              		.loc 1 231 0
 272 0084 8020     		mov	r0, #128
 273              	.LVL41:
 274 0086 4002     		lsl	r0, r0, #9
 275 0088 0121     		mov	r1, #1
 276 008a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 277              	.LVL42:
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 278              		.loc 1 232 0
 279 008e 8020     		mov	r0, #128
 280 0090 4002     		lsl	r0, r0, #9
 281 0092 14E0     		b	.L15
 282              	.LVL43:
 283              	.L13:
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM16)
 284              		.loc 1 234 0
 285 0094 124B     		ldr	r3, .L17+24
 286 0096 9842     		cmp	r0, r3
 287 0098 07D1     		bne	.L14
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 288              		.loc 1 236 0
 289 009a 8020     		mov	r0, #128
 290              	.LVL44:
 291 009c 8002     		lsl	r0, r0, #10
 292 009e 0121     		mov	r1, #1
 293 00a0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 294              	.LVL45:
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 295              		.loc 1 237 0
 296 00a4 8020     		mov	r0, #128
 297 00a6 8002     		lsl	r0, r0, #10
 298 00a8 09E0     		b	.L15
 299              	.LVL46:
 300              	.L14:
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM17)
 301              		.loc 1 241 0
 302 00aa 0E4B     		ldr	r3, .L17+28
 303 00ac 9842     		cmp	r0, r3
 304 00ae 09D1     		bne	.L5
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 305              		.loc 1 243 0
 306 00b0 8020     		mov	r0, #128
 307              	.LVL47:
 308 00b2 C002     		lsl	r0, r0, #11
 309 00b4 0121     		mov	r1, #1
 310 00b6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 311              	.LVL48:
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 312              		.loc 1 244 0
 313 00ba 8020     		mov	r0, #128
 314 00bc C002     		lsl	r0, r0, #11
 315              	.L15:
 316 00be 0021     		mov	r1, #0
 317 00c0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 318              	.LVL49:
 319              	.L5:
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 320              		.loc 1 248 0
 321              		@ sp needed for prologue
 322 00c4 08BD     		pop	{r3, pc}
 323              	.L18:
 324 00c6 C046     		.align	2
 325              	.L17:
 326 00c8 002C0140 		.word	1073818624
 327 00cc 00040040 		.word	1073742848
 328 00d0 00100040 		.word	1073745920
 329 00d4 00140040 		.word	1073746944
 330 00d8 00200040 		.word	1073750016
 331 00dc 00400140 		.word	1073823744
 332 00e0 00440140 		.word	1073824768
 333 00e4 00480140 		.word	1073825792
 334              		.cfi_endproc
 335              	.LFE33:
 337              		.section	.text.TIM_TimeBaseInit,"ax",%progbits
 338              		.align	1
 339              		.global	TIM_TimeBaseInit
 340              		.code	16
 341              		.thumb_func
 343              	TIM_TimeBaseInit:
 344              	.LFB34:
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 345              		.loc 1 264 0
 346              		.cfi_startproc
 347              	.LVL50:
 348 0000 30B5     		push	{r4, r5, lr}
 349              	.LCFI3:
 350              		.cfi_def_cfa_offset 12
 351              		.cfi_offset 4, -12
 352              		.cfi_offset 5, -8
 353              		.cfi_offset 14, -4
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 354              		.loc 1 274 0
 355 0002 194C     		ldr	r4, .L29
 356 0004 C025     		mov	r5, #192
 357 0006 0219     		add	r2, r0, r4
 358 0008 2D06     		lsl	r5, r5, #24
 359 000a 5442     		neg	r4, r2
 360 000c 6241     		adc	r2, r2, r4
 361 000e 4419     		add	r4, r0, r5
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 362              		.loc 1 272 0
 363 0010 0388     		ldrh	r3, [r0]
 364              	.LVL51:
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 365              		.loc 1 274 0
 366 0012 002C     		cmp	r4, #0
 367 0014 04D0     		beq	.L20
 368 0016 002A     		cmp	r2, #0
 369 0018 02D1     		bne	.L20
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 370              		.loc 1 274 0 is_stmt 0 discriminator 1
 371 001a 144C     		ldr	r4, .L29+4
 372 001c A042     		cmp	r0, r4
 373 001e 03D1     		bne	.L21
 374              	.L20:
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 375              		.loc 1 277 0 is_stmt 1
 376 0020 7024     		mov	r4, #112
 377 0022 A343     		bic	r3, r4
 378              	.LVL52:
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 379              		.loc 1 278 0
 380 0024 4C88     		ldrh	r4, [r1, #2]
 381 0026 2343     		orr	r3, r4
 382              	.LVL53:
 383              	.L21:
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx != TIM6)
 384              		.loc 1 281 0
 385 0028 114C     		ldr	r4, .L29+8
 386 002a A042     		cmp	r0, r4
 387 002c 03D0     		beq	.L22
 388              	.LVL54:
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 389              		.loc 1 285 0
 390 002e 114D     		ldr	r5, .L29+12
 391 0030 0C89     		ldrh	r4, [r1, #8]
 392 0032 2B40     		and	r3, r5
 393              	.LVL55:
 394 0034 2343     		orr	r3, r4
 395              	.LVL56:
 396              	.L22:
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 397              		.loc 1 288 0
 398 0036 0380     		strh	r3, [r0]
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 399              		.loc 1 291 0
 400 0038 4B68     		ldr	r3, [r1, #4]
 401              	.LVL57:
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 402              		.loc 1 296 0
 403 003a 0F4C     		ldr	r4, .L29+16
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 404              		.loc 1 291 0
 405 003c C362     		str	r3, [r0, #44]
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 406              		.loc 1 294 0
 407 003e 0B88     		ldrh	r3, [r1]
 408 0040 0385     		strh	r3, [r0, #40]
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 409              		.loc 1 296 0
 410 0042 0319     		add	r3, r0, r4
 411 0044 002B     		cmp	r3, #0
 412 0046 09D0     		beq	.L23
 413 0048 002A     		cmp	r2, #0
 414 004a 07D1     		bne	.L23
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 415              		.loc 1 296 0 is_stmt 0 discriminator 1
 416 004c 0B4D     		ldr	r5, .L29+20
 417 004e 4319     		add	r3, r0, r5
 418 0050 002B     		cmp	r3, #0
 419 0052 03D0     		beq	.L23
 420 0054 0A4A     		ldr	r2, .L29+24
 421 0056 8318     		add	r3, r0, r2
 422 0058 002B     		cmp	r3, #0
 423 005a 01D1     		bne	.L24
 424              	.L23:
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 425              		.loc 1 299 0 is_stmt 1
 426 005c 8B7A     		ldrb	r3, [r1, #10]
 427 005e 0386     		strh	r3, [r0, #48]
 428              	.L24:
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 429              		.loc 1 304 0
 430 0060 0123     		mov	r3, #1
 431 0062 8382     		strh	r3, [r0, #20]
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 432              		.loc 1 305 0
 433              		@ sp needed for prologue
 434 0064 30BD     		pop	{r4, r5, pc}
 435              	.L30:
 436 0066 C046     		.align	2
 437              	.L29:
 438 0068 00D4FEBF 		.word	-1073818624
 439 006c 00040040 		.word	1073742848
 440 0070 00100040 		.word	1073745920
 441 0074 FFFCFFFF 		.word	-769
 442 0078 00C0FEBF 		.word	-1073823744
 443 007c 00B8FEBF 		.word	-1073825792
 444 0080 00BCFEBF 		.word	-1073824768
 445              		.cfi_endproc
 446              	.LFE34:
 448              		.section	.text.TIM_TimeBaseStructInit,"ax",%progbits
 449              		.align	1
 450              		.global	TIM_TimeBaseStructInit
 451              		.code	16
 452              		.thumb_func
 454              	TIM_TimeBaseStructInit:
 455              	.LFB35:
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 456              		.loc 1 314 0
 457              		.cfi_startproc
 458              	.LVL58:
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 459              		.loc 1 316 0
 460 0000 0123     		mov	r3, #1
 461 0002 5B42     		neg	r3, r3
 462 0004 4360     		str	r3, [r0, #4]
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 463              		.loc 1 317 0
 464 0006 0023     		mov	r3, #0
 465 0008 0380     		strh	r3, [r0]
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 466              		.loc 1 318 0
 467 000a 0381     		strh	r3, [r0, #8]
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 468              		.loc 1 319 0
 469 000c 4380     		strh	r3, [r0, #2]
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 470              		.loc 1 320 0
 471 000e 8372     		strb	r3, [r0, #10]
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 472              		.loc 1 321 0
 473              		@ sp needed for prologue
 474 0010 7047     		bx	lr
 475              		.cfi_endproc
 476              	.LFE35:
 478              		.section	.text.TIM_PrescalerConfig,"ax",%progbits
 479              		.align	1
 480              		.global	TIM_PrescalerConfig
 481              		.code	16
 482              		.thumb_func
 484              	TIM_PrescalerConfig:
 485              	.LFB36:
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 486              		.loc 1 337 0
 487              		.cfi_startproc
 488              	.LVL59:
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = Prescaler;
 489              		.loc 1 343 0
 490 0000 0185     		strh	r1, [r0, #40]
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 491              		.loc 1 346 0
 492              		@ sp needed for prologue
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 493              		.loc 1 345 0
 494 0002 8282     		strh	r2, [r0, #20]
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 495              		.loc 1 346 0
 496 0004 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE36:
 500              		.section	.text.TIM_CounterModeConfig,"ax",%progbits
 501              		.align	1
 502              		.global	TIM_CounterModeConfig
 503              		.code	16
 504              		.thumb_func
 506              	TIM_CounterModeConfig:
 507              	.LFB37:
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 508              		.loc 1 362 0
 509              		.cfi_startproc
 510              	.LVL60:
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;
 511              		.loc 1 369 0
 512 0000 0388     		ldrh	r3, [r0]
 513              	.LVL61:
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 514              		.loc 1 371 0
 515 0002 7022     		mov	r2, #112
 516 0004 9343     		bic	r3, r2
 517              	.LVL62:
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 518              		.loc 1 373 0
 519 0006 1943     		orr	r1, r3
 520              	.LVL63:
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 521              		.loc 1 375 0
 522 0008 0180     		strh	r1, [r0]
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 523              		.loc 1 376 0
 524              		@ sp needed for prologue
 525 000a 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE37:
 529              		.section	.text.TIM_SetCounter,"ax",%progbits
 530              		.align	1
 531              		.global	TIM_SetCounter
 532              		.code	16
 533              		.thumb_func
 535              	TIM_SetCounter:
 536              	.LFB38:
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 537              		.loc 1 389 0
 538              		.cfi_startproc
 539              	.LVL64:
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CNT = Counter;
 540              		.loc 1 394 0
 541 0000 4162     		str	r1, [r0, #36]
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 542              		.loc 1 395 0
 543              		@ sp needed for prologue
 544 0002 7047     		bx	lr
 545              		.cfi_endproc
 546              	.LFE38:
 548              		.section	.text.TIM_SetAutoreload,"ax",%progbits
 549              		.align	1
 550              		.global	TIM_SetAutoreload
 551              		.code	16
 552              		.thumb_func
 554              	TIM_SetAutoreload:
 555              	.LFB39:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 556              		.loc 1 407 0
 557              		.cfi_startproc
 558              	.LVL65:
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = Autoreload;
 559              		.loc 1 412 0
 560 0000 C162     		str	r1, [r0, #44]
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 561              		.loc 1 413 0
 562              		@ sp needed for prologue
 563 0002 7047     		bx	lr
 564              		.cfi_endproc
 565              	.LFE39:
 567              		.section	.text.TIM_GetCounter,"ax",%progbits
 568              		.align	1
 569              		.global	TIM_GetCounter
 570              		.code	16
 571              		.thumb_func
 573              	TIM_GetCounter:
 574              	.LFB40:
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 575              		.loc 1 425 0
 576              		.cfi_startproc
 577              	.LVL66:
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CNT;
 578              		.loc 1 430 0
 579 0000 406A     		ldr	r0, [r0, #36]
 580              	.LVL67:
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 581              		.loc 1 431 0
 582              		@ sp needed for prologue
 583 0002 7047     		bx	lr
 584              		.cfi_endproc
 585              	.LFE40:
 587              		.section	.text.TIM_GetPrescaler,"ax",%progbits
 588              		.align	1
 589              		.global	TIM_GetPrescaler
 590              		.code	16
 591              		.thumb_func
 593              	TIM_GetPrescaler:
 594              	.LFB41:
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 595              		.loc 1 443 0
 596              		.cfi_startproc
 597              	.LVL68:
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->PSC;
 598              		.loc 1 448 0
 599 0000 008D     		ldrh	r0, [r0, #40]
 600              	.LVL69:
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 601              		.loc 1 449 0
 602              		@ sp needed for prologue
 603 0002 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE41:
 607              		.section	.text.TIM_UpdateDisableConfig,"ax",%progbits
 608              		.align	1
 609              		.global	TIM_UpdateDisableConfig
 610              		.code	16
 611              		.thumb_func
 613              	TIM_UpdateDisableConfig:
 614              	.LFB42:
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 615              		.loc 1 463 0
 616              		.cfi_startproc
 617              	.LVL70:
 618 0000 00B5     		push	{lr}
 619              	.LCFI4:
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 14, -4
 622 0002 0223     		mov	r3, #2
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 623              		.loc 1 471 0
 624 0004 0288     		ldrh	r2, [r0]
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 625              		.loc 1 468 0
 626 0006 0029     		cmp	r1, #0
 627 0008 01D0     		beq	.L39
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 628              		.loc 1 471 0
 629 000a 1343     		orr	r3, r2
 630 000c 01E0     		b	.L41
 631              	.L39:
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 632              		.loc 1 476 0
 633 000e 9A43     		bic	r2, r3
 634 0010 131C     		mov	r3, r2
 635              	.L41:
 636 0012 0380     		strh	r3, [r0]
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 637              		.loc 1 478 0
 638              		@ sp needed for prologue
 639 0014 00BD     		pop	{pc}
 640              		.cfi_endproc
 641              	.LFE42:
 643              		.section	.text.TIM_UpdateRequestConfig,"ax",%progbits
 644              		.align	1
 645              		.global	TIM_UpdateRequestConfig
 646              		.code	16
 647              		.thumb_func
 649              	TIM_UpdateRequestConfig:
 650              	.LFB43:
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 651              		.loc 1 496 0
 652              		.cfi_startproc
 653              	.LVL71:
 654 0000 00B5     		push	{lr}
 655              	.LCFI5:
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 14, -4
 658 0002 0423     		mov	r3, #4
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 659              		.loc 1 504 0
 660 0004 0288     		ldrh	r2, [r0]
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 661              		.loc 1 501 0
 662 0006 0029     		cmp	r1, #0
 663 0008 01D0     		beq	.L43
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 664              		.loc 1 504 0
 665 000a 1343     		orr	r3, r2
 666 000c 01E0     		b	.L45
 667              	.L43:
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 668              		.loc 1 509 0
 669 000e 9A43     		bic	r2, r3
 670 0010 131C     		mov	r3, r2
 671              	.L45:
 672 0012 0380     		strh	r3, [r0]
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 673              		.loc 1 511 0
 674              		@ sp needed for prologue
 675 0014 00BD     		pop	{pc}
 676              		.cfi_endproc
 677              	.LFE43:
 679              		.section	.text.TIM_ARRPreloadConfig,"ax",%progbits
 680              		.align	1
 681              		.global	TIM_ARRPreloadConfig
 682              		.code	16
 683              		.thumb_func
 685              	TIM_ARRPreloadConfig:
 686              	.LFB44:
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 687              		.loc 1 525 0
 688              		.cfi_startproc
 689              	.LVL72:
 690 0000 00B5     		push	{lr}
 691              	.LCFI6:
 692              		.cfi_def_cfa_offset 4
 693              		.cfi_offset 14, -4
 694 0002 8023     		mov	r3, #128
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 695              		.loc 1 533 0
 696 0004 0288     		ldrh	r2, [r0]
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 697              		.loc 1 530 0
 698 0006 0029     		cmp	r1, #0
 699 0008 01D0     		beq	.L47
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 700              		.loc 1 533 0
 701 000a 1343     		orr	r3, r2
 702 000c 01E0     		b	.L49
 703              	.L47:
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 704              		.loc 1 538 0
 705 000e 9A43     		bic	r2, r3
 706 0010 131C     		mov	r3, r2
 707              	.L49:
 708 0012 0380     		strh	r3, [r0]
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 709              		.loc 1 540 0
 710              		@ sp needed for prologue
 711 0014 00BD     		pop	{pc}
 712              		.cfi_endproc
 713              	.LFE44:
 715              		.section	.text.TIM_SelectOnePulseMode,"ax",%progbits
 716              		.align	1
 717              		.global	TIM_SelectOnePulseMode
 718              		.code	16
 719              		.thumb_func
 721              	TIM_SelectOnePulseMode:
 722              	.LFB45:
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 723              		.loc 1 556 0
 724              		.cfi_startproc
 725              	.LVL73:
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 726              		.loc 1 562 0
 727 0000 0388     		ldrh	r3, [r0]
 728 0002 0822     		mov	r2, #8
 729 0004 9343     		bic	r3, r2
 730 0006 0380     		strh	r3, [r0]
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 731              		.loc 1 564 0
 732 0008 0388     		ldrh	r3, [r0]
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 733              		.loc 1 565 0
 734              		@ sp needed for prologue
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 735              		.loc 1 564 0
 736 000a 1943     		orr	r1, r3
 737              	.LVL74:
 738 000c 0180     		strh	r1, [r0]
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 739              		.loc 1 565 0
 740 000e 7047     		bx	lr
 741              		.cfi_endproc
 742              	.LFE45:
 744              		.section	.text.TIM_SetClockDivision,"ax",%progbits
 745              		.align	1
 746              		.global	TIM_SetClockDivision
 747              		.code	16
 748              		.thumb_func
 750              	TIM_SetClockDivision:
 751              	.LFB46:
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 752              		.loc 1 579 0
 753              		.cfi_startproc
 754              	.LVL75:
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 755              		.loc 1 585 0
 756 0000 0288     		ldrh	r2, [r0]
 757 0002 034B     		ldr	r3, .L52
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 758              		.loc 1 588 0
 759              		@ sp needed for prologue
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 760              		.loc 1 585 0
 761 0004 1340     		and	r3, r2
 762 0006 0380     		strh	r3, [r0]
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 763              		.loc 1 587 0
 764 0008 0388     		ldrh	r3, [r0]
 765 000a 1943     		orr	r1, r3
 766              	.LVL76:
 767 000c 0180     		strh	r1, [r0]
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 768              		.loc 1 588 0
 769 000e 7047     		bx	lr
 770              	.L53:
 771              		.align	2
 772              	.L52:
 773 0010 FFFCFFFF 		.word	-769
 774              		.cfi_endproc
 775              	.LFE46:
 777              		.section	.text.TIM_Cmd,"ax",%progbits
 778              		.align	1
 779              		.global	TIM_Cmd
 780              		.code	16
 781              		.thumb_func
 783              	TIM_Cmd:
 784              	.LFB47:
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 785              		.loc 1 602 0
 786              		.cfi_startproc
 787              	.LVL77:
 788 0000 00B5     		push	{lr}
 789              	.LCFI7:
 790              		.cfi_def_cfa_offset 4
 791              		.cfi_offset 14, -4
 792 0002 0123     		mov	r3, #1
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 793              		.loc 1 610 0
 794 0004 0288     		ldrh	r2, [r0]
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 795              		.loc 1 607 0
 796 0006 0029     		cmp	r1, #0
 797 0008 01D0     		beq	.L55
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 798              		.loc 1 610 0
 799 000a 1343     		orr	r3, r2
 800 000c 01E0     		b	.L57
 801              	.L55:
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 802              		.loc 1 615 0
 803 000e 9A43     		bic	r2, r3
 804 0010 131C     		mov	r3, r2
 805              	.L57:
 806 0012 0380     		strh	r3, [r0]
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 807              		.loc 1 617 0
 808              		@ sp needed for prologue
 809 0014 00BD     		pop	{pc}
 810              		.cfi_endproc
 811              	.LFE47:
 813              		.section	.text.TIM_BDTRConfig,"ax",%progbits
 814              		.align	1
 815              		.global	TIM_BDTRConfig
 816              		.code	16
 817              		.thumb_func
 819              	TIM_BDTRConfig:
 820              	.LFB48:
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 821              		.loc 1 660 0
 822              		.cfi_startproc
 823              	.LVL78:
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 824              		.loc 1 671 0
 825 0000 4A88     		ldrh	r2, [r1, #2]
 826 0002 0B88     		ldrh	r3, [r1]
 827 0004 0630     		add	r0, r0, #6
 828              	.LVL79:
 829 0006 1343     		orr	r3, r2
 830 0008 8A88     		ldrh	r2, [r1, #4]
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 831              		.loc 1 675 0
 832              		@ sp needed for prologue
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 833              		.loc 1 671 0
 834 000a 1343     		orr	r3, r2
 835 000c CA88     		ldrh	r2, [r1, #6]
 836 000e 1343     		orr	r3, r2
 837 0010 0A89     		ldrh	r2, [r1, #8]
 838 0012 1343     		orr	r3, r2
 839 0014 4A89     		ldrh	r2, [r1, #10]
 840 0016 1343     		orr	r3, r2
 841 0018 8A89     		ldrh	r2, [r1, #12]
 842 001a 1343     		orr	r3, r2
 843 001c C387     		strh	r3, [r0, #62]
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 844              		.loc 1 675 0
 845 001e 7047     		bx	lr
 846              		.cfi_endproc
 847              	.LFE48:
 849              		.section	.text.TIM_BDTRStructInit,"ax",%progbits
 850              		.align	1
 851              		.global	TIM_BDTRStructInit
 852              		.code	16
 853              		.thumb_func
 855              	TIM_BDTRStructInit:
 856              	.LFB49:
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 857              		.loc 1 684 0
 858              		.cfi_startproc
 859              	.LVL80:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 860              		.loc 1 686 0
 861 0000 0023     		mov	r3, #0
 862 0002 0380     		strh	r3, [r0]
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 863              		.loc 1 687 0
 864 0004 4380     		strh	r3, [r0, #2]
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 865              		.loc 1 688 0
 866 0006 8380     		strh	r3, [r0, #4]
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 867              		.loc 1 689 0
 868 0008 C380     		strh	r3, [r0, #6]
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 869              		.loc 1 690 0
 870 000a 0381     		strh	r3, [r0, #8]
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 871              		.loc 1 691 0
 872 000c 4381     		strh	r3, [r0, #10]
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 873              		.loc 1 692 0
 874 000e 8381     		strh	r3, [r0, #12]
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 875              		.loc 1 693 0
 876              		@ sp needed for prologue
 877 0010 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE49:
 881              		.section	.text.TIM_CtrlPWMOutputs,"ax",%progbits
 882              		.align	1
 883              		.global	TIM_CtrlPWMOutputs
 884              		.code	16
 885              		.thumb_func
 887              	TIM_CtrlPWMOutputs:
 888              	.LFB50:
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 889              		.loc 1 703 0
 890              		.cfi_startproc
 891              	.LVL81:
 892 0000 00B5     		push	{lr}
 893              	.LCFI8:
 894              		.cfi_def_cfa_offset 4
 895              		.cfi_offset 14, -4
 896 0002 0630     		add	r0, r0, #6
 897              	.LVL82:
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 898              		.loc 1 707 0
 899 0004 0029     		cmp	r1, #0
 900 0006 04D0     		beq	.L61
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 901              		.loc 1 710 0
 902 0008 C28F     		ldrh	r2, [r0, #62]
 903 000a 8023     		mov	r3, #128
 904 000c 1B02     		lsl	r3, r3, #8
 905 000e 1343     		orr	r3, r2
 906 0010 02E0     		b	.L63
 907              	.L61:
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 908              		.loc 1 715 0
 909 0012 C38F     		ldrh	r3, [r0, #62]
 910 0014 5B04     		lsl	r3, r3, #17
 911 0016 5B0C     		lsr	r3, r3, #17
 912              	.L63:
 913 0018 C387     		strh	r3, [r0, #62]
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 914              		.loc 1 717 0
 915              		@ sp needed for prologue
 916 001a 00BD     		pop	{pc}
 917              		.cfi_endproc
 918              	.LFE50:
 920              		.section	.text.TIM_OC1Init,"ax",%progbits
 921              		.align	1
 922              		.global	TIM_OC1Init
 923              		.code	16
 924              		.thumb_func
 926              	TIM_OC1Init:
 927              	.LFB51:
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 928              		.loc 1 776 0
 929              		.cfi_startproc
 930              	.LVL83:
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 931              		.loc 1 785 0
 932 0000 038C     		ldrh	r3, [r0, #32]
 933 0002 0122     		mov	r2, #1
 934 0004 9343     		bic	r3, r2
 935 0006 0384     		strh	r3, [r0, #32]
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 936              		.loc 1 776 0
 937 0008 70B5     		push	{r4, r5, r6, lr}
 938              	.LCFI9:
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 4, -16
 941              		.cfi_offset 5, -12
 942              		.cfi_offset 6, -8
 943              		.cfi_offset 14, -4
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 944              		.loc 1 787 0
 945 000a 058C     		ldrh	r5, [r0, #32]
 946              	.LVL84:
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 947              		.loc 1 789 0
 948 000c 8288     		ldrh	r2, [r0, #4]
 949              	.LVL85:
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 950              		.loc 1 792 0
 951 000e 048B     		ldrh	r4, [r0, #24]
 952              	.LVL86:
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 953              		.loc 1 796 0
 954 0010 7323     		mov	r3, #115
 955 0012 9C43     		bic	r4, r3
 956              	.LVL87:
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 957              		.loc 1 799 0
 958 0014 0B88     		ldrh	r3, [r1]
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 959              		.loc 1 804 0
 960 0016 4E88     		ldrh	r6, [r1, #2]
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 961              		.loc 1 799 0
 962 0018 1C43     		orr	r4, r3
 963              	.LVL88:
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 964              		.loc 1 802 0
 965 001a 0223     		mov	r3, #2
 966 001c 9D43     		bic	r5, r3
 967              	.LVL89:
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 968              		.loc 1 804 0
 969 001e 8B89     		ldrh	r3, [r1, #12]
 970 0020 3343     		orr	r3, r6
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 971              		.loc 1 809 0
 972 0022 124E     		ldr	r6, .L71
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 973              		.loc 1 807 0
 974 0024 2B43     		orr	r3, r5
 975              	.LVL90:
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 976              		.loc 1 809 0
 977 0026 8519     		add	r5, r0, r6
 978 0028 002D     		cmp	r5, #0
 979 002a 0BD0     		beq	.L65
 980 002c 104E     		ldr	r6, .L71+4
 981 002e 8519     		add	r5, r0, r6
 982 0030 002D     		cmp	r5, #0
 983 0032 07D0     		beq	.L65
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 984              		.loc 1 809 0 is_stmt 0 discriminator 1
 985 0034 0F4E     		ldr	r6, .L71+8
 986 0036 8519     		add	r5, r0, r6
 987 0038 002D     		cmp	r5, #0
 988 003a 03D0     		beq	.L65
 989 003c 0E4E     		ldr	r6, .L71+12
 990 003e 8519     		add	r5, r0, r6
 991 0040 002D     		cmp	r5, #0
 992 0042 0DD1     		bne	.L66
 993              	.L65:
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 994              		.loc 1 817 0 is_stmt 1
 995 0044 0825     		mov	r5, #8
 996 0046 AB43     		bic	r3, r5
 997              	.LVL91:
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 998              		.loc 1 819 0
 999 0048 CD89     		ldrh	r5, [r1, #14]
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 1000              		.loc 1 831 0
 1001 004a 4E8A     		ldrh	r6, [r1, #18]
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 1002              		.loc 1 819 0
 1003 004c 2B43     		orr	r3, r5
 1004              	.LVL92:
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 1005              		.loc 1 822 0
 1006 004e 0425     		mov	r5, #4
 1007 0050 AB43     		bic	r3, r5
 1008              	.LVL93:
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 1009              		.loc 1 824 0
 1010 0052 8D88     		ldrh	r5, [r1, #4]
 1011 0054 2B43     		orr	r3, r5
 1012              	.LVL94:
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 1013              		.loc 1 828 0
 1014 0056 094D     		ldr	r5, .L71+16
 1015 0058 2A40     		and	r2, r5
 1016              	.LVL95:
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 1017              		.loc 1 831 0
 1018 005a 0D8A     		ldrh	r5, [r1, #16]
 1019 005c 3543     		orr	r5, r6
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 1020              		.loc 1 833 0
 1021 005e 2A43     		orr	r2, r5
 1022              	.LVL96:
 1023              	.L66:
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1024              		.loc 1 836 0
 1025 0060 8280     		strh	r2, [r0, #4]
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 1026              		.loc 1 842 0
 1027 0062 8A68     		ldr	r2, [r1, #8]
 1028              	.LVL97:
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 1029              		.loc 1 839 0
 1030 0064 0483     		strh	r4, [r0, #24]
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1031              		.loc 1 846 0
 1032              		@ sp needed for prologue
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 1033              		.loc 1 842 0
 1034 0066 4263     		str	r2, [r0, #52]
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1035              		.loc 1 845 0
 1036 0068 0384     		strh	r3, [r0, #32]
 1037              	.LVL98:
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1038              		.loc 1 846 0
 1039 006a 70BD     		pop	{r4, r5, r6, pc}
 1040              	.L72:
 1041              		.align	2
 1042              	.L71:
 1043 006c 00C0FEBF 		.word	-1073823744
 1044 0070 00D4FEBF 		.word	-1073818624
 1045 0074 00B8FEBF 		.word	-1073825792
 1046 0078 00BCFEBF 		.word	-1073824768
 1047 007c FFFCFFFF 		.word	-769
 1048              		.cfi_endproc
 1049              	.LFE51:
 1051              		.section	.text.TIM_OC2Init,"ax",%progbits
 1052              		.align	1
 1053              		.global	TIM_OC2Init
 1054              		.code	16
 1055              		.thumb_func
 1057              	TIM_OC2Init:
 1058              	.LFB52:
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1059              		.loc 1 859 0
 1060              		.cfi_startproc
 1061              	.LVL99:
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 1062              		.loc 1 868 0
 1063 0000 038C     		ldrh	r3, [r0, #32]
 1064 0002 1022     		mov	r2, #16
 1065 0004 9343     		bic	r3, r2
 1066 0006 0384     		strh	r3, [r0, #32]
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1067              		.loc 1 859 0
 1068 0008 F0B5     		push	{r4, r5, r6, r7, lr}
 1069              	.LCFI10:
 1070              		.cfi_def_cfa_offset 20
 1071              		.cfi_offset 4, -20
 1072              		.cfi_offset 5, -16
 1073              		.cfi_offset 6, -12
 1074              		.cfi_offset 7, -8
 1075              		.cfi_offset 14, -4
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 1076              		.loc 1 871 0
 1077 000a 028C     		ldrh	r2, [r0, #32]
 1078              	.LVL100:
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 1079              		.loc 1 880 0
 1080 000c 1D4C     		ldr	r4, .L83
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1081              		.loc 1 873 0
 1082 000e 8388     		ldrh	r3, [r0, #4]
 1083              	.LVL101:
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 1084              		.loc 1 876 0
 1085 0010 058B     		ldrh	r5, [r0, #24]
 1086              	.LVL102:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1087              		.loc 1 893 0
 1088 0012 1D4E     		ldr	r6, .L83+4
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 1089              		.loc 1 880 0
 1090 0014 2540     		and	r5, r4
 1091              	.LVL103:
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1092              		.loc 1 883 0
 1093 0016 0C88     		ldrh	r4, [r1]
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1094              		.loc 1 893 0
 1095 0018 1C4F     		ldr	r7, .L83+8
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1096              		.loc 1 883 0
 1097 001a 2402     		lsl	r4, r4, #8
 1098 001c 2543     		orr	r5, r4
 1099              	.LVL104:
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 1100              		.loc 1 886 0
 1101 001e 2024     		mov	r4, #32
 1102 0020 A243     		bic	r2, r4
 1103              	.LVL105:
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 1104              		.loc 1 888 0
 1105 0022 8C89     		ldrh	r4, [r1, #12]
 1106 0024 2401     		lsl	r4, r4, #4
 1107 0026 2243     		orr	r2, r4
 1108              	.LVL106:
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1109              		.loc 1 891 0
 1110 0028 4C88     		ldrh	r4, [r1, #2]
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 1111              		.loc 1 888 0
 1112 002a 92B2     		uxth	r2, r2
 1113              	.LVL107:
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1114              		.loc 1 891 0
 1115 002c 2401     		lsl	r4, r4, #4
 1116 002e 2243     		orr	r2, r4
 1117              	.LVL108:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1118              		.loc 1 893 0
 1119 0030 8419     		add	r4, r0, r6
 1120 0032 6642     		neg	r6, r4
 1121 0034 7441     		adc	r4, r4, r6
 1122 0036 C619     		add	r6, r0, r7
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1123              		.loc 1 891 0
 1124 0038 92B2     		uxth	r2, r2
 1125              	.LVL109:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1126              		.loc 1 893 0
 1127 003a 002E     		cmp	r6, #0
 1128 003c 01D0     		beq	.L76
 1129 003e 002C     		cmp	r4, #0
 1130 0040 19D0     		beq	.L74
 1131              	.L76:
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 1132              		.loc 1 899 0
 1133 0042 134E     		ldr	r6, .L83+12
 1134 0044 3340     		and	r3, r6
 1135              	.LVL110:
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 1136              		.loc 1 902 0
 1137 0046 0E8A     		ldrh	r6, [r1, #16]
 1138 0048 B600     		lsl	r6, r6, #2
 1139 004a 3343     		orr	r3, r6
 1140              	.LVL111:
 1141 004c 9BB2     		uxth	r3, r3
 1142              	.LVL112:
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM1)
 1143              		.loc 1 904 0
 1144 004e 002C     		cmp	r4, #0
 1145 0050 11D0     		beq	.L74
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 1146              		.loc 1 912 0
 1147 0052 8024     		mov	r4, #128
 1148 0054 A243     		bic	r2, r4
 1149              	.LVL113:
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 1150              		.loc 1 914 0
 1151 0056 CC89     		ldrh	r4, [r1, #14]
 1152 0058 2401     		lsl	r4, r4, #4
 1153 005a 2243     		orr	r2, r4
 1154              	.LVL114:
 1155 005c 92B2     		uxth	r2, r2
 1156              	.LVL115:
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 1157              		.loc 1 917 0
 1158 005e 4024     		mov	r4, #64
 1159 0060 A243     		bic	r2, r4
 1160              	.LVL116:
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1161              		.loc 1 919 0
 1162 0062 8C88     		ldrh	r4, [r1, #4]
 1163 0064 2401     		lsl	r4, r4, #4
 1164 0066 2243     		orr	r2, r4
 1165              	.LVL117:
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 1166              		.loc 1 922 0
 1167 0068 0A4C     		ldr	r4, .L83+16
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1168              		.loc 1 919 0
 1169 006a 92B2     		uxth	r2, r2
 1170              	.LVL118:
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 1171              		.loc 1 922 0
 1172 006c 2340     		and	r3, r4
 1173              	.LVL119:
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 1174              		.loc 1 925 0
 1175 006e 4C8A     		ldrh	r4, [r1, #18]
 1176 0070 A400     		lsl	r4, r4, #2
 1177 0072 2343     		orr	r3, r4
 1178              	.LVL120:
 1179 0074 9BB2     		uxth	r3, r3
 1180              	.LVL121:
 1181              	.L74:
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1182              		.loc 1 929 0
 1183 0076 8380     		strh	r3, [r0, #4]
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 1184              		.loc 1 935 0
 1185 0078 8B68     		ldr	r3, [r1, #8]
 1186              	.LVL122:
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 1187              		.loc 1 932 0
 1188 007a 0583     		strh	r5, [r0, #24]
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1189              		.loc 1 939 0
 1190              		@ sp needed for prologue
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 1191              		.loc 1 935 0
 1192 007c 8363     		str	r3, [r0, #56]
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1193              		.loc 1 938 0
 1194 007e 0284     		strh	r2, [r0, #32]
 1195              	.LVL123:
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1196              		.loc 1 939 0
 1197 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 1198              	.L84:
 1199 0082 C046     		.align	2
 1200              	.L83:
 1201 0084 FF8CFFFF 		.word	-29441
 1202 0088 00D4FEBF 		.word	-1073818624
 1203 008c 00C0FEBF 		.word	-1073823744
 1204 0090 FFFBFFFF 		.word	-1025
 1205 0094 FFF7FFFF 		.word	-2049
 1206              		.cfi_endproc
 1207              	.LFE52:
 1209              		.section	.text.TIM_OC3Init,"ax",%progbits
 1210              		.align	1
 1211              		.global	TIM_OC3Init
 1212              		.code	16
 1213              		.thumb_func
 1215              	TIM_OC3Init:
 1216              	.LFB53:
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1217              		.loc 1 952 0
 1218              		.cfi_startproc
 1219              	.LVL124:
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 1220              		.loc 1 961 0
 1221 0000 028C     		ldrh	r2, [r0, #32]
 1222 0002 194B     		ldr	r3, .L87
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1223              		.loc 1 952 0
 1224 0004 30B5     		push	{r4, r5, lr}
 1225              	.LCFI11:
 1226              		.cfi_def_cfa_offset 12
 1227              		.cfi_offset 4, -12
 1228              		.cfi_offset 5, -8
 1229              		.cfi_offset 14, -4
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 1230              		.loc 1 961 0
 1231 0006 1340     		and	r3, r2
 1232 0008 0384     		strh	r3, [r0, #32]
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 1233              		.loc 1 964 0
 1234 000a 058C     		ldrh	r5, [r0, #32]
 1235              	.LVL125:
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1236              		.loc 1 966 0
 1237 000c 8288     		ldrh	r2, [r0, #4]
 1238              	.LVL126:
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1239              		.loc 1 969 0
 1240 000e 848B     		ldrh	r4, [r0, #28]
 1241              	.LVL127:
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 1242              		.loc 1 973 0
 1243 0010 7323     		mov	r3, #115
 1244 0012 9C43     		bic	r4, r3
 1245              	.LVL128:
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 1246              		.loc 1 975 0
 1247 0014 0B88     		ldrh	r3, [r1]
 1248 0016 1C43     		orr	r4, r3
 1249              	.LVL129:
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 1250              		.loc 1 978 0
 1251 0018 144B     		ldr	r3, .L87+4
 1252 001a 2B40     		and	r3, r5
 1253              	.LVL130:
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 1254              		.loc 1 980 0
 1255 001c 8D89     		ldrh	r5, [r1, #12]
 1256 001e 2D02     		lsl	r5, r5, #8
 1257 0020 2B43     		orr	r3, r5
 1258              	.LVL131:
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1259              		.loc 1 983 0
 1260 0022 4D88     		ldrh	r5, [r1, #2]
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 1261              		.loc 1 980 0
 1262 0024 9BB2     		uxth	r3, r3
 1263              	.LVL132:
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1264              		.loc 1 983 0
 1265 0026 2D02     		lsl	r5, r5, #8
 1266 0028 2B43     		orr	r3, r5
 1267              	.LVL133:
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 1268              		.loc 1 985 0
 1269 002a 114D     		ldr	r5, .L87+8
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1270              		.loc 1 983 0
 1271 002c 9BB2     		uxth	r3, r3
 1272              	.LVL134:
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 1273              		.loc 1 985 0
 1274 002e A842     		cmp	r0, r5
 1275 0030 14D1     		bne	.L86
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 1276              		.loc 1 993 0
 1277 0032 104D     		ldr	r5, .L87+12
 1278 0034 2B40     		and	r3, r5
 1279              	.LVL135:
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 1280              		.loc 1 995 0
 1281 0036 CD89     		ldrh	r5, [r1, #14]
 1282 0038 2D02     		lsl	r5, r5, #8
 1283 003a 2B43     		orr	r3, r5
 1284              	.LVL136:
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 1285              		.loc 1 997 0
 1286 003c 0E4D     		ldr	r5, .L87+16
 1287 003e 2B40     		and	r3, r5
 1288              	.LVL137:
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 1289              		.loc 1 1000 0
 1290 0040 8D88     		ldrh	r5, [r1, #4]
 1291 0042 2D02     		lsl	r5, r5, #8
 1292 0044 2B43     		orr	r3, r5
 1293              	.LVL138:
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 1294              		.loc 1 1003 0
 1295 0046 0D4D     		ldr	r5, .L87+20
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 1296              		.loc 1 1000 0
 1297 0048 9BB2     		uxth	r3, r3
 1298              	.LVL139:
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 1299              		.loc 1 1003 0
 1300 004a 2A40     		and	r2, r5
 1301              	.LVL140:
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1302              		.loc 1 1005 0
 1303 004c 0D8A     		ldrh	r5, [r1, #16]
 1304 004e 2D01     		lsl	r5, r5, #4
 1305 0050 2A43     		orr	r2, r5
 1306              	.LVL141:
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1307              		.loc 1 1007 0
 1308 0052 4D8A     		ldrh	r5, [r1, #18]
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1309              		.loc 1 1005 0
 1310 0054 92B2     		uxth	r2, r2
 1311              	.LVL142:
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1312              		.loc 1 1007 0
 1313 0056 2D01     		lsl	r5, r5, #4
 1314 0058 2A43     		orr	r2, r5
 1315              	.LVL143:
 1316 005a 92B2     		uxth	r2, r2
 1317              	.LVL144:
 1318              	.L86:
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1319              		.loc 1 1010 0
 1320 005c 8280     		strh	r2, [r0, #4]
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1321              		.loc 1 1016 0
 1322 005e 8A68     		ldr	r2, [r1, #8]
 1323              	.LVL145:
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1324              		.loc 1 1013 0
 1325 0060 8483     		strh	r4, [r0, #28]
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1326              		.loc 1 1020 0
 1327              		@ sp needed for prologue
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1328              		.loc 1 1016 0
 1329 0062 C263     		str	r2, [r0, #60]
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1330              		.loc 1 1019 0
 1331 0064 0384     		strh	r3, [r0, #32]
 1332              	.LVL146:
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1333              		.loc 1 1020 0
 1334 0066 30BD     		pop	{r4, r5, pc}
 1335              	.L88:
 1336              		.align	2
 1337              	.L87:
 1338 0068 FFFEFFFF 		.word	-257
 1339 006c FFFDFFFF 		.word	-513
 1340 0070 002C0140 		.word	1073818624
 1341 0074 FFF7FFFF 		.word	-2049
 1342 0078 FFFB0000 		.word	64511
 1343 007c FFCFFFFF 		.word	-12289
 1344              		.cfi_endproc
 1345              	.LFE53:
 1347              		.section	.text.TIM_OC4Init,"ax",%progbits
 1348              		.align	1
 1349              		.global	TIM_OC4Init
 1350              		.code	16
 1351              		.thumb_func
 1353              	TIM_OC4Init:
 1354              	.LFB54:
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1355              		.loc 1 1033 0
 1356              		.cfi_startproc
 1357              	.LVL147:
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 1358              		.loc 1 1042 0
 1359 0000 028C     		ldrh	r2, [r0, #32]
 1360 0002 124B     		ldr	r3, .L91
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1361              		.loc 1 1033 0
 1362 0004 30B5     		push	{r4, r5, lr}
 1363              	.LCFI12:
 1364              		.cfi_def_cfa_offset 12
 1365              		.cfi_offset 4, -12
 1366              		.cfi_offset 5, -8
 1367              		.cfi_offset 14, -4
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 1368              		.loc 1 1042 0
 1369 0006 1340     		and	r3, r2
 1370 0008 0384     		strh	r3, [r0, #32]
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 1371              		.loc 1 1045 0
 1372 000a 058C     		ldrh	r5, [r0, #32]
 1373              	.LVL148:
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 1374              		.loc 1 1054 0
 1375 000c 104A     		ldr	r2, .L91+4
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1376              		.loc 1 1047 0
 1377 000e 8388     		ldrh	r3, [r0, #4]
 1378              	.LVL149:
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1379              		.loc 1 1050 0
 1380 0010 848B     		ldrh	r4, [r0, #28]
 1381              	.LVL150:
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 1382              		.loc 1 1054 0
 1383 0012 1440     		and	r4, r2
 1384              	.LVL151:
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1385              		.loc 1 1057 0
 1386 0014 0A88     		ldrh	r2, [r1]
 1387 0016 1202     		lsl	r2, r2, #8
 1388 0018 1443     		orr	r4, r2
 1389              	.LVL152:
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 1390              		.loc 1 1060 0
 1391 001a 0E4A     		ldr	r2, .L91+8
 1392 001c 2A40     		and	r2, r5
 1393              	.LVL153:
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1394              		.loc 1 1062 0
 1395 001e 8D89     		ldrh	r5, [r1, #12]
 1396 0020 2D03     		lsl	r5, r5, #12
 1397 0022 2A43     		orr	r2, r5
 1398              	.LVL154:
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1399              		.loc 1 1065 0
 1400 0024 4D88     		ldrh	r5, [r1, #2]
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1401              		.loc 1 1062 0
 1402 0026 92B2     		uxth	r2, r2
 1403              	.LVL155:
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1404              		.loc 1 1065 0
 1405 0028 2D03     		lsl	r5, r5, #12
 1406 002a 2A43     		orr	r2, r5
 1407              	.LVL156:
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 1408              		.loc 1 1067 0
 1409 002c 0A4D     		ldr	r5, .L91+12
 1410 002e A842     		cmp	r0, r5
 1411 0030 05D1     		bne	.L90
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 1412              		.loc 1 1071 0
 1413 0032 0A4D     		ldr	r5, .L91+16
 1414 0034 2B40     		and	r3, r5
 1415              	.LVL157:
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 1416              		.loc 1 1073 0
 1417 0036 0D8A     		ldrh	r5, [r1, #16]
 1418 0038 AD01     		lsl	r5, r5, #6
 1419 003a 2B43     		orr	r3, r5
 1420              	.LVL158:
 1421 003c 9BB2     		uxth	r3, r3
 1422              	.LVL159:
 1423              	.L90:
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1424              		.loc 1 1076 0
 1425 003e 8380     		strh	r3, [r0, #4]
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1426              		.loc 1 1082 0
 1427 0040 8B68     		ldr	r3, [r1, #8]
 1428              	.LVL160:
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1429              		.loc 1 1079 0
 1430 0042 8483     		strh	r4, [r0, #28]
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1431              		.loc 1 1086 0
 1432              		@ sp needed for prologue
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1433              		.loc 1 1082 0
 1434 0044 0364     		str	r3, [r0, #64]
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1435              		.loc 1 1085 0
 1436 0046 0284     		strh	r2, [r0, #32]
 1437              	.LVL161:
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1438              		.loc 1 1086 0
 1439 0048 30BD     		pop	{r4, r5, pc}
 1440              	.L92:
 1441 004a C046     		.align	2
 1442              	.L91:
 1443 004c FFEFFFFF 		.word	-4097
 1444 0050 FF8CFFFF 		.word	-29441
 1445 0054 FFDFFFFF 		.word	-8193
 1446 0058 002C0140 		.word	1073818624
 1447 005c FFBFFFFF 		.word	-16385
 1448              		.cfi_endproc
 1449              	.LFE54:
 1451              		.section	.text.TIM_OCStructInit,"ax",%progbits
 1452              		.align	1
 1453              		.global	TIM_OCStructInit
 1454              		.code	16
 1455              		.thumb_func
 1457              	TIM_OCStructInit:
 1458              	.LFB55:
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1459              		.loc 1 1095 0
 1460              		.cfi_startproc
 1461              	.LVL162:
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 1462              		.loc 1 1097 0
 1463 0000 0023     		mov	r3, #0
 1464 0002 0380     		strh	r3, [r0]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1465              		.loc 1 1098 0
 1466 0004 4380     		strh	r3, [r0, #2]
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1467              		.loc 1 1099 0
 1468 0006 8380     		strh	r3, [r0, #4]
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 1469              		.loc 1 1100 0
 1470 0008 8360     		str	r3, [r0, #8]
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1471              		.loc 1 1101 0
 1472 000a 8381     		strh	r3, [r0, #12]
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1473              		.loc 1 1102 0
 1474 000c C381     		strh	r3, [r0, #14]
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1475              		.loc 1 1103 0
 1476 000e 0382     		strh	r3, [r0, #16]
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1477              		.loc 1 1104 0
 1478 0010 4382     		strh	r3, [r0, #18]
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1479              		.loc 1 1105 0
 1480              		@ sp needed for prologue
 1481 0012 7047     		bx	lr
 1482              		.cfi_endproc
 1483              	.LFE55:
 1485              		.section	.text.TIM_SelectOCxM,"ax",%progbits
 1486              		.align	1
 1487              		.global	TIM_SelectOCxM
 1488              		.code	16
 1489              		.thumb_func
 1491              	TIM_SelectOCxM:
 1492              	.LFB56:
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1493              		.loc 1 1132 0
 1494              		.cfi_startproc
 1495              	.LVL163:
 1496 0000 30B5     		push	{r4, r5, lr}
 1497              	.LCFI13:
 1498              		.cfi_def_cfa_offset 12
 1499              		.cfi_offset 4, -12
 1500              		.cfi_offset 5, -8
 1501              		.cfi_offset 14, -4
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 1502              		.loc 1 1143 0
 1503 0002 0125     		mov	r5, #1
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1504              		.loc 1 1146 0
 1505 0004 048C     		ldrh	r4, [r0, #32]
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 1506              		.loc 1 1143 0
 1507 0006 8D40     		lsl	r5, r5, r1
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1508              		.loc 1 1146 0
 1509 0008 AC43     		bic	r4, r5
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
 1510              		.loc 1 1141 0
 1511 000a 031C     		mov	r3, r0
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1512              		.loc 1 1146 0
 1513 000c 0484     		strh	r4, [r0, #32]
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 1514              		.loc 1 1148 0
 1515 000e 0820     		mov	r0, #8
 1516              	.LVL164:
 1517 0010 0C1C     		mov	r4, r1
 1518 0012 8443     		bic	r4, r0
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
 1519              		.loc 1 1141 0
 1520 0014 1833     		add	r3, r3, #24
 1521              	.LVL165:
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 1522              		.loc 1 1148 0
 1523 0016 201E     		sub	r0, r4, #0
 1524 0018 07D1     		bne	.L95
 1525              	.LVL166:
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (TIM_Channel>>1);
 1526              		.loc 1 1150 0
 1527 001a 4908     		lsr	r1, r1, #1
 1528              	.LVL167:
 1529 001c C918     		add	r1, r1, r3
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 1530              		.loc 1 1153 0
 1531 001e 0B68     		ldr	r3, [r1]
 1532              	.LVL168:
 1533 0020 7020     		mov	r0, #112
 1534 0022 8343     		bic	r3, r0
 1535 0024 0B60     		str	r3, [r1]
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
 1536              		.loc 1 1156 0
 1537 0026 0B68     		ldr	r3, [r1]
 1538 0028 0AE0     		b	.L97
 1539              	.LVL169:
 1540              	.L95:
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 1541              		.loc 1 1160 0
 1542 002a 0439     		sub	r1, r1, #4
 1543              	.LVL170:
 1544 002c 89B2     		uxth	r1, r1
 1545              	.LVL171:
 1546 002e 4908     		lsr	r1, r1, #1
 1547 0030 C918     		add	r1, r1, r3
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 1548              		.loc 1 1163 0
 1549 0032 0868     		ldr	r0, [r1]
 1550 0034 044B     		ldr	r3, .L98
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 1551              		.loc 1 1166 0
 1552 0036 1202     		lsl	r2, r2, #8
 1553              	.LVL172:
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 1554              		.loc 1 1163 0
 1555 0038 0340     		and	r3, r0
 1556 003a 0B60     		str	r3, [r1]
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 1557              		.loc 1 1166 0
 1558 003c 0B68     		ldr	r3, [r1]
 1559 003e 92B2     		uxth	r2, r2
 1560              	.L97:
 1561 0040 1A43     		orr	r2, r3
 1562 0042 0A60     		str	r2, [r1]
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1563              		.loc 1 1168 0
 1564              		@ sp needed for prologue
 1565 0044 30BD     		pop	{r4, r5, pc}
 1566              	.L99:
 1567 0046 C046     		.align	2
 1568              	.L98:
 1569 0048 FF8FFFFF 		.word	-28673
 1570              		.cfi_endproc
 1571              	.LFE56:
 1573              		.section	.text.TIM_SetCompare1,"ax",%progbits
 1574              		.align	1
 1575              		.global	TIM_SetCompare1
 1576              		.code	16
 1577              		.thumb_func
 1579              	TIM_SetCompare1:
 1580              	.LFB57:
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1581              		.loc 1 1178 0
 1582              		.cfi_startproc
 1583              	.LVL173:
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = Compare1;
 1584              		.loc 1 1183 0
 1585 0000 4163     		str	r1, [r0, #52]
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1586              		.loc 1 1184 0
 1587              		@ sp needed for prologue
 1588 0002 7047     		bx	lr
 1589              		.cfi_endproc
 1590              	.LFE57:
 1592              		.section	.text.TIM_SetCompare2,"ax",%progbits
 1593              		.align	1
 1594              		.global	TIM_SetCompare2
 1595              		.code	16
 1596              		.thumb_func
 1598              	TIM_SetCompare2:
 1599              	.LFB58:
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1600              		.loc 1 1194 0
 1601              		.cfi_startproc
 1602              	.LVL174:
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = Compare2;
 1603              		.loc 1 1199 0
 1604 0000 8163     		str	r1, [r0, #56]
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1605              		.loc 1 1200 0
 1606              		@ sp needed for prologue
 1607 0002 7047     		bx	lr
 1608              		.cfi_endproc
 1609              	.LFE58:
 1611              		.section	.text.TIM_SetCompare3,"ax",%progbits
 1612              		.align	1
 1613              		.global	TIM_SetCompare3
 1614              		.code	16
 1615              		.thumb_func
 1617              	TIM_SetCompare3:
 1618              	.LFB59:
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1619              		.loc 1 1209 0
 1620              		.cfi_startproc
 1621              	.LVL175:
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = Compare3;
 1622              		.loc 1 1214 0
 1623 0000 C163     		str	r1, [r0, #60]
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1624              		.loc 1 1215 0
 1625              		@ sp needed for prologue
 1626 0002 7047     		bx	lr
 1627              		.cfi_endproc
 1628              	.LFE59:
 1630              		.section	.text.TIM_SetCompare4,"ax",%progbits
 1631              		.align	1
 1632              		.global	TIM_SetCompare4
 1633              		.code	16
 1634              		.thumb_func
 1636              	TIM_SetCompare4:
 1637              	.LFB60:
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1638              		.loc 1 1225 0
 1639              		.cfi_startproc
 1640              	.LVL176:
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = Compare4;
 1641              		.loc 1 1230 0
 1642 0000 0164     		str	r1, [r0, #64]
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1643              		.loc 1 1231 0
 1644              		@ sp needed for prologue
 1645 0002 7047     		bx	lr
 1646              		.cfi_endproc
 1647              	.LFE60:
 1649              		.section	.text.TIM_ForcedOC1Config,"ax",%progbits
 1650              		.align	1
 1651              		.global	TIM_ForcedOC1Config
 1652              		.code	16
 1653              		.thumb_func
 1655              	TIM_ForcedOC1Config:
 1656              	.LFB61:
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1657              		.loc 1 1244 0
 1658              		.cfi_startproc
 1659              	.LVL177:
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1660              		.loc 1 1249 0
 1661 0000 038B     		ldrh	r3, [r0, #24]
 1662              	.LVL178:
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 1663              		.loc 1 1251 0
 1664 0002 7022     		mov	r2, #112
 1665 0004 9343     		bic	r3, r2
 1666              	.LVL179:
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
 1667              		.loc 1 1253 0
 1668 0006 1943     		orr	r1, r3
 1669              	.LVL180:
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1670              		.loc 1 1255 0
 1671 0008 0183     		strh	r1, [r0, #24]
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1672              		.loc 1 1256 0
 1673              		@ sp needed for prologue
 1674 000a 7047     		bx	lr
 1675              		.cfi_endproc
 1676              	.LFE61:
 1678              		.section	.text.TIM_ForcedOC2Config,"ax",%progbits
 1679              		.align	1
 1680              		.global	TIM_ForcedOC2Config
 1681              		.code	16
 1682              		.thumb_func
 1684              	TIM_ForcedOC2Config:
 1685              	.LFB62:
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1686              		.loc 1 1269 0
 1687              		.cfi_startproc
 1688              	.LVL181:
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1689              		.loc 1 1276 0
 1690 0000 028B     		ldrh	r2, [r0, #24]
 1691              	.LVL182:
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 1692              		.loc 1 1278 0
 1693 0002 034B     		ldr	r3, .L106
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1694              		.loc 1 1283 0
 1695              		@ sp needed for prologue
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 1696              		.loc 1 1278 0
 1697 0004 1A40     		and	r2, r3
 1698              	.LVL183:
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 1699              		.loc 1 1280 0
 1700 0006 0B02     		lsl	r3, r1, #8
 1701 0008 111C     		mov	r1, r2
 1702              	.LVL184:
 1703 000a 1943     		orr	r1, r3
 1704              	.LVL185:
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1705              		.loc 1 1282 0
 1706 000c 0183     		strh	r1, [r0, #24]
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1707              		.loc 1 1283 0
 1708 000e 7047     		bx	lr
 1709              	.L107:
 1710              		.align	2
 1711              	.L106:
 1712 0010 FF8FFFFF 		.word	-28673
 1713              		.cfi_endproc
 1714              	.LFE62:
 1716              		.section	.text.TIM_ForcedOC3Config,"ax",%progbits
 1717              		.align	1
 1718              		.global	TIM_ForcedOC3Config
 1719              		.code	16
 1720              		.thumb_func
 1722              	TIM_ForcedOC3Config:
 1723              	.LFB63:
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1724              		.loc 1 1296 0
 1725              		.cfi_startproc
 1726              	.LVL186:
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1727              		.loc 1 1303 0
 1728 0000 838B     		ldrh	r3, [r0, #28]
 1729              	.LVL187:
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 1730              		.loc 1 1305 0
 1731 0002 7022     		mov	r2, #112
 1732 0004 9343     		bic	r3, r2
 1733              	.LVL188:
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
 1734              		.loc 1 1307 0
 1735 0006 1943     		orr	r1, r3
 1736              	.LVL189:
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1737              		.loc 1 1309 0
 1738 0008 8183     		strh	r1, [r0, #28]
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1739              		.loc 1 1310 0
 1740              		@ sp needed for prologue
 1741 000a 7047     		bx	lr
 1742              		.cfi_endproc
 1743              	.LFE63:
 1745              		.section	.text.TIM_ForcedOC4Config,"ax",%progbits
 1746              		.align	1
 1747              		.global	TIM_ForcedOC4Config
 1748              		.code	16
 1749              		.thumb_func
 1751              	TIM_ForcedOC4Config:
 1752              	.LFB64:
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1753              		.loc 1 1323 0
 1754              		.cfi_startproc
 1755              	.LVL190:
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1756              		.loc 1 1329 0
 1757 0000 828B     		ldrh	r2, [r0, #28]
 1758              	.LVL191:
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 1759              		.loc 1 1331 0
 1760 0002 034B     		ldr	r3, .L110
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1761              		.loc 1 1336 0
 1762              		@ sp needed for prologue
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 1763              		.loc 1 1331 0
 1764 0004 1A40     		and	r2, r3
 1765              	.LVL192:
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 1766              		.loc 1 1333 0
 1767 0006 0B02     		lsl	r3, r1, #8
 1768 0008 111C     		mov	r1, r2
 1769              	.LVL193:
 1770 000a 1943     		orr	r1, r3
 1771              	.LVL194:
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1772              		.loc 1 1335 0
 1773 000c 8183     		strh	r1, [r0, #28]
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1774              		.loc 1 1336 0
 1775 000e 7047     		bx	lr
 1776              	.L111:
 1777              		.align	2
 1778              	.L110:
 1779 0010 FF8FFFFF 		.word	-28673
 1780              		.cfi_endproc
 1781              	.LFE64:
 1783              		.section	.text.TIM_CCPreloadControl,"ax",%progbits
 1784              		.align	1
 1785              		.global	TIM_CCPreloadControl
 1786              		.code	16
 1787              		.thumb_func
 1789              	TIM_CCPreloadControl:
 1790              	.LFB65:
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 1791              		.loc 1 1347 0
 1792              		.cfi_startproc
 1793              	.LVL195:
 1794 0000 00B5     		push	{lr}
 1795              	.LCFI14:
 1796              		.cfi_def_cfa_offset 4
 1797              		.cfi_offset 14, -4
 1798 0002 0123     		mov	r3, #1
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 1799              		.loc 1 1354 0
 1800 0004 8288     		ldrh	r2, [r0, #4]
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 1801              		.loc 1 1351 0
 1802 0006 0029     		cmp	r1, #0
 1803 0008 01D0     		beq	.L113
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 1804              		.loc 1 1354 0
 1805 000a 1343     		orr	r3, r2
 1806 000c 01E0     		b	.L115
 1807              	.L113:
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 1808              		.loc 1 1359 0
 1809 000e 9A43     		bic	r2, r3
 1810 0010 131C     		mov	r3, r2
 1811              	.L115:
 1812 0012 8380     		strh	r3, [r0, #4]
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1813              		.loc 1 1361 0
 1814              		@ sp needed for prologue
 1815 0014 00BD     		pop	{pc}
 1816              		.cfi_endproc
 1817              	.LFE65:
 1819              		.section	.text.TIM_OC1PreloadConfig,"ax",%progbits
 1820              		.align	1
 1821              		.global	TIM_OC1PreloadConfig
 1822              		.code	16
 1823              		.thumb_func
 1825              	TIM_OC1PreloadConfig:
 1826              	.LFB66:
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1827              		.loc 1 1375 0
 1828              		.cfi_startproc
 1829              	.LVL196:
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1830              		.loc 1 1381 0
 1831 0000 038B     		ldrh	r3, [r0, #24]
 1832              	.LVL197:
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 1833              		.loc 1 1383 0
 1834 0002 0822     		mov	r2, #8
 1835 0004 9343     		bic	r3, r2
 1836              	.LVL198:
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
 1837              		.loc 1 1385 0
 1838 0006 1943     		orr	r1, r3
 1839              	.LVL199:
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1840              		.loc 1 1387 0
 1841 0008 0183     		strh	r1, [r0, #24]
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1842              		.loc 1 1388 0
 1843              		@ sp needed for prologue
 1844 000a 7047     		bx	lr
 1845              		.cfi_endproc
 1846              	.LFE66:
 1848              		.section	.text.TIM_OC2PreloadConfig,"ax",%progbits
 1849              		.align	1
 1850              		.global	TIM_OC2PreloadConfig
 1851              		.code	16
 1852              		.thumb_func
 1854              	TIM_OC2PreloadConfig:
 1855              	.LFB67:
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1856              		.loc 1 1401 0
 1857              		.cfi_startproc
 1858              	.LVL200:
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1859              		.loc 1 1407 0
 1860 0000 028B     		ldrh	r2, [r0, #24]
 1861              	.LVL201:
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 1862              		.loc 1 1409 0
 1863 0002 034B     		ldr	r3, .L118
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1864              		.loc 1 1414 0
 1865              		@ sp needed for prologue
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 1866              		.loc 1 1409 0
 1867 0004 1A40     		and	r2, r3
 1868              	.LVL202:
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 1869              		.loc 1 1411 0
 1870 0006 0B02     		lsl	r3, r1, #8
 1871 0008 111C     		mov	r1, r2
 1872              	.LVL203:
 1873 000a 1943     		orr	r1, r3
 1874              	.LVL204:
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1875              		.loc 1 1413 0
 1876 000c 0183     		strh	r1, [r0, #24]
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1877              		.loc 1 1414 0
 1878 000e 7047     		bx	lr
 1879              	.L119:
 1880              		.align	2
 1881              	.L118:
 1882 0010 FFF7FFFF 		.word	-2049
 1883              		.cfi_endproc
 1884              	.LFE67:
 1886              		.section	.text.TIM_OC3PreloadConfig,"ax",%progbits
 1887              		.align	1
 1888              		.global	TIM_OC3PreloadConfig
 1889              		.code	16
 1890              		.thumb_func
 1892              	TIM_OC3PreloadConfig:
 1893              	.LFB68:
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1894              		.loc 1 1427 0
 1895              		.cfi_startproc
 1896              	.LVL205:
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1897              		.loc 1 1434 0
 1898 0000 838B     		ldrh	r3, [r0, #28]
 1899              	.LVL206:
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 1900              		.loc 1 1436 0
 1901 0002 0822     		mov	r2, #8
 1902 0004 9343     		bic	r3, r2
 1903              	.LVL207:
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
 1904              		.loc 1 1438 0
 1905 0006 1943     		orr	r1, r3
 1906              	.LVL208:
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1907              		.loc 1 1440 0
 1908 0008 8183     		strh	r1, [r0, #28]
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1909              		.loc 1 1441 0
 1910              		@ sp needed for prologue
 1911 000a 7047     		bx	lr
 1912              		.cfi_endproc
 1913              	.LFE68:
 1915              		.section	.text.TIM_OC4PreloadConfig,"ax",%progbits
 1916              		.align	1
 1917              		.global	TIM_OC4PreloadConfig
 1918              		.code	16
 1919              		.thumb_func
 1921              	TIM_OC4PreloadConfig:
 1922              	.LFB69:
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1923              		.loc 1 1454 0
 1924              		.cfi_startproc
 1925              	.LVL209:
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1926              		.loc 1 1461 0
 1927 0000 828B     		ldrh	r2, [r0, #28]
 1928              	.LVL210:
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 1929              		.loc 1 1463 0
 1930 0002 034B     		ldr	r3, .L122
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1931              		.loc 1 1468 0
 1932              		@ sp needed for prologue
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 1933              		.loc 1 1463 0
 1934 0004 1A40     		and	r2, r3
 1935              	.LVL211:
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 1936              		.loc 1 1465 0
 1937 0006 0B02     		lsl	r3, r1, #8
 1938 0008 111C     		mov	r1, r2
 1939              	.LVL212:
 1940 000a 1943     		orr	r1, r3
 1941              	.LVL213:
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1942              		.loc 1 1467 0
 1943 000c 8183     		strh	r1, [r0, #28]
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1944              		.loc 1 1468 0
 1945 000e 7047     		bx	lr
 1946              	.L123:
 1947              		.align	2
 1948              	.L122:
 1949 0010 FFF7FFFF 		.word	-2049
 1950              		.cfi_endproc
 1951              	.LFE69:
 1953              		.section	.text.TIM_OC1FastConfig,"ax",%progbits
 1954              		.align	1
 1955              		.global	TIM_OC1FastConfig
 1956              		.code	16
 1957              		.thumb_func
 1959              	TIM_OC1FastConfig:
 1960              	.LFB70:
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1961              		.loc 1 1481 0
 1962              		.cfi_startproc
 1963              	.LVL214:
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1964              		.loc 1 1489 0
 1965 0000 038B     		ldrh	r3, [r0, #24]
 1966              	.LVL215:
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 1967              		.loc 1 1491 0
 1968 0002 0422     		mov	r2, #4
 1969 0004 9343     		bic	r3, r2
 1970              	.LVL216:
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
 1971              		.loc 1 1493 0
 1972 0006 1943     		orr	r1, r3
 1973              	.LVL217:
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1974              		.loc 1 1495 0
 1975 0008 0183     		strh	r1, [r0, #24]
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1976              		.loc 1 1496 0
 1977              		@ sp needed for prologue
 1978 000a 7047     		bx	lr
 1979              		.cfi_endproc
 1980              	.LFE70:
 1982              		.section	.text.TIM_OC2FastConfig,"ax",%progbits
 1983              		.align	1
 1984              		.global	TIM_OC2FastConfig
 1985              		.code	16
 1986              		.thumb_func
 1988              	TIM_OC2FastConfig:
 1989              	.LFB71:
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1990              		.loc 1 1509 0
 1991              		.cfi_startproc
 1992              	.LVL218:
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1993              		.loc 1 1517 0
 1994 0000 028B     		ldrh	r2, [r0, #24]
 1995              	.LVL219:
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 1996              		.loc 1 1519 0
 1997 0002 034B     		ldr	r3, .L126
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1998              		.loc 1 1524 0
 1999              		@ sp needed for prologue
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 2000              		.loc 1 1519 0
 2001 0004 1A40     		and	r2, r3
 2002              	.LVL220:
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 2003              		.loc 1 1521 0
 2004 0006 0B02     		lsl	r3, r1, #8
 2005 0008 111C     		mov	r1, r2
 2006              	.LVL221:
 2007 000a 1943     		orr	r1, r3
 2008              	.LVL222:
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2009              		.loc 1 1523 0
 2010 000c 0183     		strh	r1, [r0, #24]
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2011              		.loc 1 1524 0
 2012 000e 7047     		bx	lr
 2013              	.L127:
 2014              		.align	2
 2015              	.L126:
 2016 0010 FFFBFFFF 		.word	-1025
 2017              		.cfi_endproc
 2018              	.LFE71:
 2020              		.section	.text.TIM_OC3FastConfig,"ax",%progbits
 2021              		.align	1
 2022              		.global	TIM_OC3FastConfig
 2023              		.code	16
 2024              		.thumb_func
 2026              	TIM_OC3FastConfig:
 2027              	.LFB72:
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2028              		.loc 1 1537 0
 2029              		.cfi_startproc
 2030              	.LVL223:
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2031              		.loc 1 1545 0
 2032 0000 838B     		ldrh	r3, [r0, #28]
 2033              	.LVL224:
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 2034              		.loc 1 1547 0
 2035 0002 0422     		mov	r2, #4
 2036 0004 9343     		bic	r3, r2
 2037              	.LVL225:
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
 2038              		.loc 1 1549 0
 2039 0006 1943     		orr	r1, r3
 2040              	.LVL226:
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2041              		.loc 1 1551 0
 2042 0008 8183     		strh	r1, [r0, #28]
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2043              		.loc 1 1552 0
 2044              		@ sp needed for prologue
 2045 000a 7047     		bx	lr
 2046              		.cfi_endproc
 2047              	.LFE72:
 2049              		.section	.text.TIM_OC4FastConfig,"ax",%progbits
 2050              		.align	1
 2051              		.global	TIM_OC4FastConfig
 2052              		.code	16
 2053              		.thumb_func
 2055              	TIM_OC4FastConfig:
 2056              	.LFB73:
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2057              		.loc 1 1565 0
 2058              		.cfi_startproc
 2059              	.LVL227:
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2060              		.loc 1 1573 0
 2061 0000 828B     		ldrh	r2, [r0, #28]
 2062              	.LVL228:
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 2063              		.loc 1 1575 0
 2064 0002 034B     		ldr	r3, .L130
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2065              		.loc 1 1580 0
 2066              		@ sp needed for prologue
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 2067              		.loc 1 1575 0
 2068 0004 1A40     		and	r2, r3
 2069              	.LVL229:
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 2070              		.loc 1 1577 0
 2071 0006 0B02     		lsl	r3, r1, #8
 2072 0008 111C     		mov	r1, r2
 2073              	.LVL230:
 2074 000a 1943     		orr	r1, r3
 2075              	.LVL231:
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2076              		.loc 1 1579 0
 2077 000c 8183     		strh	r1, [r0, #28]
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2078              		.loc 1 1580 0
 2079 000e 7047     		bx	lr
 2080              	.L131:
 2081              		.align	2
 2082              	.L130:
 2083 0010 FFFBFFFF 		.word	-1025
 2084              		.cfi_endproc
 2085              	.LFE73:
 2087              		.section	.text.TIM_ClearOC1Ref,"ax",%progbits
 2088              		.align	1
 2089              		.global	TIM_ClearOC1Ref
 2090              		.code	16
 2091              		.thumb_func
 2093              	TIM_ClearOC1Ref:
 2094              	.LFB74:
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2095              		.loc 1 1593 0
 2096              		.cfi_startproc
 2097              	.LVL232:
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2098              		.loc 1 1600 0
 2099 0000 038B     		ldrh	r3, [r0, #24]
 2100              	.LVL233:
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 2101              		.loc 1 1602 0
 2102 0002 8022     		mov	r2, #128
 2103 0004 9343     		bic	r3, r2
 2104              	.LVL234:
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
 2105              		.loc 1 1604 0
 2106 0006 1943     		orr	r1, r3
 2107              	.LVL235:
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2108              		.loc 1 1606 0
 2109 0008 0183     		strh	r1, [r0, #24]
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2110              		.loc 1 1607 0
 2111              		@ sp needed for prologue
 2112 000a 7047     		bx	lr
 2113              		.cfi_endproc
 2114              	.LFE74:
 2116              		.section	.text.TIM_ClearOC2Ref,"ax",%progbits
 2117              		.align	1
 2118              		.global	TIM_ClearOC2Ref
 2119              		.code	16
 2120              		.thumb_func
 2122              	TIM_ClearOC2Ref:
 2123              	.LFB75:
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2124              		.loc 1 1620 0
 2125              		.cfi_startproc
 2126              	.LVL236:
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2127              		.loc 1 1627 0
 2128 0000 038B     		ldrh	r3, [r0, #24]
 2129              	.LVL237:
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 2130              		.loc 1 1631 0
 2131 0002 0902     		lsl	r1, r1, #8
 2132              	.LVL238:
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 2133              		.loc 1 1629 0
 2134 0004 5B04     		lsl	r3, r3, #17
 2135              	.LVL239:
 2136 0006 5B0C     		lsr	r3, r3, #17
 2137              	.LVL240:
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 2138              		.loc 1 1631 0
 2139 0008 1943     		orr	r1, r3
 2140              	.LVL241:
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2141              		.loc 1 1633 0
 2142 000a 0183     		strh	r1, [r0, #24]
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2143              		.loc 1 1634 0
 2144              		@ sp needed for prologue
 2145 000c 7047     		bx	lr
 2146              		.cfi_endproc
 2147              	.LFE75:
 2149              		.section	.text.TIM_ClearOC3Ref,"ax",%progbits
 2150              		.align	1
 2151              		.global	TIM_ClearOC3Ref
 2152              		.code	16
 2153              		.thumb_func
 2155              	TIM_ClearOC3Ref:
 2156              	.LFB76:
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2157              		.loc 1 1647 0
 2158              		.cfi_startproc
 2159              	.LVL242:
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2160              		.loc 1 1654 0
 2161 0000 838B     		ldrh	r3, [r0, #28]
 2162              	.LVL243:
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 2163              		.loc 1 1656 0
 2164 0002 8022     		mov	r2, #128
 2165 0004 9343     		bic	r3, r2
 2166              	.LVL244:
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
 2167              		.loc 1 1658 0
 2168 0006 1943     		orr	r1, r3
 2169              	.LVL245:
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2170              		.loc 1 1660 0
 2171 0008 8183     		strh	r1, [r0, #28]
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2172              		.loc 1 1661 0
 2173              		@ sp needed for prologue
 2174 000a 7047     		bx	lr
 2175              		.cfi_endproc
 2176              	.LFE76:
 2178              		.section	.text.TIM_ClearOC4Ref,"ax",%progbits
 2179              		.align	1
 2180              		.global	TIM_ClearOC4Ref
 2181              		.code	16
 2182              		.thumb_func
 2184              	TIM_ClearOC4Ref:
 2185              	.LFB77:
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2186              		.loc 1 1674 0
 2187              		.cfi_startproc
 2188              	.LVL246:
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2189              		.loc 1 1681 0
 2190 0000 838B     		ldrh	r3, [r0, #28]
 2191              	.LVL247:
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 2192              		.loc 1 1685 0
 2193 0002 0902     		lsl	r1, r1, #8
 2194              	.LVL248:
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 2195              		.loc 1 1683 0
 2196 0004 5B04     		lsl	r3, r3, #17
 2197              	.LVL249:
 2198 0006 5B0C     		lsr	r3, r3, #17
 2199              	.LVL250:
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 2200              		.loc 1 1685 0
 2201 0008 1943     		orr	r1, r3
 2202              	.LVL251:
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2203              		.loc 1 1687 0
 2204 000a 8183     		strh	r1, [r0, #28]
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2205              		.loc 1 1688 0
 2206              		@ sp needed for prologue
 2207 000c 7047     		bx	lr
 2208              		.cfi_endproc
 2209              	.LFE77:
 2211              		.section	.text.TIM_OC1PolarityConfig,"ax",%progbits
 2212              		.align	1
 2213              		.global	TIM_OC1PolarityConfig
 2214              		.code	16
 2215              		.thumb_func
 2217              	TIM_OC1PolarityConfig:
 2218              	.LFB78:
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2219              		.loc 1 1701 0
 2220              		.cfi_startproc
 2221              	.LVL252:
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2222              		.loc 1 1708 0
 2223 0000 038C     		ldrh	r3, [r0, #32]
 2224              	.LVL253:
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 2225              		.loc 1 1710 0
 2226 0002 0222     		mov	r2, #2
 2227 0004 9343     		bic	r3, r2
 2228              	.LVL254:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCPolarity;
 2229              		.loc 1 1711 0
 2230 0006 1943     		orr	r1, r3
 2231              	.LVL255:
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2232              		.loc 1 1713 0
 2233 0008 0184     		strh	r1, [r0, #32]
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2234              		.loc 1 1714 0
 2235              		@ sp needed for prologue
 2236 000a 7047     		bx	lr
 2237              		.cfi_endproc
 2238              	.LFE78:
 2240              		.section	.text.TIM_OC1NPolarityConfig,"ax",%progbits
 2241              		.align	1
 2242              		.global	TIM_OC1NPolarityConfig
 2243              		.code	16
 2244              		.thumb_func
 2246              	TIM_OC1NPolarityConfig:
 2247              	.LFB79:
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2248              		.loc 1 1726 0
 2249              		.cfi_startproc
 2250              	.LVL256:
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2251              		.loc 1 1732 0
 2252 0000 038C     		ldrh	r3, [r0, #32]
 2253              	.LVL257:
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 2254              		.loc 1 1734 0
 2255 0002 0822     		mov	r2, #8
 2256 0004 9343     		bic	r3, r2
 2257              	.LVL258:
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
 2258              		.loc 1 1735 0
 2259 0006 1943     		orr	r1, r3
 2260              	.LVL259:
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2261              		.loc 1 1737 0
 2262 0008 0184     		strh	r1, [r0, #32]
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2263              		.loc 1 1738 0
 2264              		@ sp needed for prologue
 2265 000a 7047     		bx	lr
 2266              		.cfi_endproc
 2267              	.LFE79:
 2269              		.section	.text.TIM_OC2PolarityConfig,"ax",%progbits
 2270              		.align	1
 2271              		.global	TIM_OC2PolarityConfig
 2272              		.code	16
 2273              		.thumb_func
 2275              	TIM_OC2PolarityConfig:
 2276              	.LFB80:
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2277              		.loc 1 1751 0
 2278              		.cfi_startproc
 2279              	.LVL260:
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2280              		.loc 1 1758 0
 2281 0000 028C     		ldrh	r2, [r0, #32]
 2282              	.LVL261:
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 2283              		.loc 1 1760 0
 2284 0002 2023     		mov	r3, #32
 2285 0004 9A43     		bic	r2, r3
 2286              	.LVL262:
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 2287              		.loc 1 1761 0
 2288 0006 0B01     		lsl	r3, r1, #4
 2289 0008 111C     		mov	r1, r2
 2290              	.LVL263:
 2291 000a 1943     		orr	r1, r3
 2292              	.LVL264:
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2293              		.loc 1 1763 0
 2294 000c 0184     		strh	r1, [r0, #32]
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2295              		.loc 1 1764 0
 2296              		@ sp needed for prologue
 2297 000e 7047     		bx	lr
 2298              		.cfi_endproc
 2299              	.LFE80:
 2301              		.section	.text.TIM_OC2NPolarityConfig,"ax",%progbits
 2302              		.align	1
 2303              		.global	TIM_OC2NPolarityConfig
 2304              		.code	16
 2305              		.thumb_func
 2307              	TIM_OC2NPolarityConfig:
 2308              	.LFB81:
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2309              		.loc 1 1776 0
 2310              		.cfi_startproc
 2311              	.LVL265:
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2312              		.loc 1 1782 0
 2313 0000 028C     		ldrh	r2, [r0, #32]
 2314              	.LVL266:
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 2315              		.loc 1 1784 0
 2316 0002 8023     		mov	r3, #128
 2317 0004 9A43     		bic	r2, r3
 2318              	.LVL267:
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 2319              		.loc 1 1785 0
 2320 0006 0B01     		lsl	r3, r1, #4
 2321 0008 111C     		mov	r1, r2
 2322              	.LVL268:
 2323 000a 1943     		orr	r1, r3
 2324              	.LVL269:
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2325              		.loc 1 1787 0
 2326 000c 0184     		strh	r1, [r0, #32]
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2327              		.loc 1 1788 0
 2328              		@ sp needed for prologue
 2329 000e 7047     		bx	lr
 2330              		.cfi_endproc
 2331              	.LFE81:
 2333              		.section	.text.TIM_OC3PolarityConfig,"ax",%progbits
 2334              		.align	1
 2335              		.global	TIM_OC3PolarityConfig
 2336              		.code	16
 2337              		.thumb_func
 2339              	TIM_OC3PolarityConfig:
 2340              	.LFB82:
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2341              		.loc 1 1801 0
 2342              		.cfi_startproc
 2343              	.LVL270:
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2344              		.loc 1 1808 0
 2345 0000 028C     		ldrh	r2, [r0, #32]
 2346              	.LVL271:
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 2347              		.loc 1 1810 0
 2348 0002 034B     		ldr	r3, .L141
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2349              		.loc 1 1814 0
 2350              		@ sp needed for prologue
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 2351              		.loc 1 1810 0
 2352 0004 1A40     		and	r2, r3
 2353              	.LVL272:
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 2354              		.loc 1 1811 0
 2355 0006 0B02     		lsl	r3, r1, #8
 2356 0008 111C     		mov	r1, r2
 2357              	.LVL273:
 2358 000a 1943     		orr	r1, r3
 2359              	.LVL274:
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2360              		.loc 1 1813 0
 2361 000c 0184     		strh	r1, [r0, #32]
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2362              		.loc 1 1814 0
 2363 000e 7047     		bx	lr
 2364              	.L142:
 2365              		.align	2
 2366              	.L141:
 2367 0010 FFFDFFFF 		.word	-513
 2368              		.cfi_endproc
 2369              	.LFE82:
 2371              		.section	.text.TIM_OC3NPolarityConfig,"ax",%progbits
 2372              		.align	1
 2373              		.global	TIM_OC3NPolarityConfig
 2374              		.code	16
 2375              		.thumb_func
 2377              	TIM_OC3NPolarityConfig:
 2378              	.LFB83:
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2379              		.loc 1 1826 0
 2380              		.cfi_startproc
 2381              	.LVL275:
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2382              		.loc 1 1833 0
 2383 0000 028C     		ldrh	r2, [r0, #32]
 2384              	.LVL276:
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 2385              		.loc 1 1835 0
 2386 0002 034B     		ldr	r3, .L144
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2387              		.loc 1 1839 0
 2388              		@ sp needed for prologue
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 2389              		.loc 1 1835 0
 2390 0004 1A40     		and	r2, r3
 2391              	.LVL277:
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 2392              		.loc 1 1836 0
 2393 0006 0B02     		lsl	r3, r1, #8
 2394 0008 111C     		mov	r1, r2
 2395              	.LVL278:
 2396 000a 1943     		orr	r1, r3
 2397              	.LVL279:
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2398              		.loc 1 1838 0
 2399 000c 0184     		strh	r1, [r0, #32]
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2400              		.loc 1 1839 0
 2401 000e 7047     		bx	lr
 2402              	.L145:
 2403              		.align	2
 2404              	.L144:
 2405 0010 FFF7FFFF 		.word	-2049
 2406              		.cfi_endproc
 2407              	.LFE83:
 2409              		.section	.text.TIM_OC4PolarityConfig,"ax",%progbits
 2410              		.align	1
 2411              		.global	TIM_OC4PolarityConfig
 2412              		.code	16
 2413              		.thumb_func
 2415              	TIM_OC4PolarityConfig:
 2416              	.LFB84:
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2417              		.loc 1 1852 0
 2418              		.cfi_startproc
 2419              	.LVL280:
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2420              		.loc 1 1859 0
 2421 0000 028C     		ldrh	r2, [r0, #32]
 2422              	.LVL281:
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 2423              		.loc 1 1861 0
 2424 0002 034B     		ldr	r3, .L147
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2425              		.loc 1 1865 0
 2426              		@ sp needed for prologue
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 2427              		.loc 1 1861 0
 2428 0004 1A40     		and	r2, r3
 2429              	.LVL282:
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 2430              		.loc 1 1862 0
 2431 0006 0B03     		lsl	r3, r1, #12
 2432 0008 111C     		mov	r1, r2
 2433              	.LVL283:
 2434 000a 1943     		orr	r1, r3
 2435              	.LVL284:
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2436              		.loc 1 1864 0
 2437 000c 0184     		strh	r1, [r0, #32]
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2438              		.loc 1 1865 0
 2439 000e 7047     		bx	lr
 2440              	.L148:
 2441              		.align	2
 2442              	.L147:
 2443 0010 FFDFFFFF 		.word	-8193
 2444              		.cfi_endproc
 2445              	.LFE84:
 2447              		.section	.text.TIM_SelectOCREFClear,"ax",%progbits
 2448              		.align	1
 2449              		.global	TIM_SelectOCREFClear
 2450              		.code	16
 2451              		.thumb_func
 2453              	TIM_SelectOCREFClear:
 2454              	.LFB85:
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2455              		.loc 1 1878 0
 2456              		.cfi_startproc
 2457              	.LVL285:
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 2458              		.loc 1 1884 0
 2459 0000 0389     		ldrh	r3, [r0, #8]
 2460 0002 0822     		mov	r2, #8
 2461 0004 9343     		bic	r3, r2
 2462 0006 0381     		strh	r3, [r0, #8]
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
 2463              		.loc 1 1885 0
 2464 0008 0389     		ldrh	r3, [r0, #8]
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2465              		.loc 1 1886 0
 2466              		@ sp needed for prologue
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
 2467              		.loc 1 1885 0
 2468 000a 1943     		orr	r1, r3
 2469              	.LVL286:
 2470 000c 0181     		strh	r1, [r0, #8]
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2471              		.loc 1 1886 0
 2472 000e 7047     		bx	lr
 2473              		.cfi_endproc
 2474              	.LFE85:
 2476              		.section	.text.TIM_CCxCmd,"ax",%progbits
 2477              		.align	1
 2478              		.global	TIM_CCxCmd
 2479              		.code	16
 2480              		.thumb_func
 2482              	TIM_CCxCmd:
 2483              	.LFB86:
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2484              		.loc 1 1903 0
 2485              		.cfi_startproc
 2486              	.LVL287:
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 2487              		.loc 1 1913 0
 2488 0000 038C     		ldrh	r3, [r0, #32]
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2489              		.loc 1 1903 0
 2490 0002 10B5     		push	{r4, lr}
 2491              	.LCFI15:
 2492              		.cfi_def_cfa_offset 8
 2493              		.cfi_offset 4, -8
 2494              		.cfi_offset 14, -4
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
 2495              		.loc 1 1910 0
 2496 0004 0124     		mov	r4, #1
 2497 0006 8C40     		lsl	r4, r4, r1
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 2498              		.loc 1 1913 0
 2499 0008 A343     		bic	r3, r4
 2500 000a 0384     		strh	r3, [r0, #32]
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 2501              		.loc 1 1916 0
 2502 000c 038C     		ldrh	r3, [r0, #32]
 2503 000e 8A40     		lsl	r2, r2, r1
 2504              	.LVL288:
 2505 0010 111C     		mov	r1, r2
 2506              	.LVL289:
 2507 0012 1943     		orr	r1, r3
 2508 0014 0184     		strh	r1, [r0, #32]
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2509              		.loc 1 1917 0
 2510              		@ sp needed for prologue
 2511 0016 10BD     		pop	{r4, pc}
 2512              		.cfi_endproc
 2513              	.LFE86:
 2515              		.section	.text.TIM_CCxNCmd,"ax",%progbits
 2516              		.align	1
 2517              		.global	TIM_CCxNCmd
 2518              		.code	16
 2519              		.thumb_func
 2521              	TIM_CCxNCmd:
 2522              	.LFB87:
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2523              		.loc 1 1932 0
 2524              		.cfi_startproc
 2525              	.LVL290:
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 2526              		.loc 1 1943 0
 2527 0000 038C     		ldrh	r3, [r0, #32]
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2528              		.loc 1 1932 0
 2529 0002 10B5     		push	{r4, lr}
 2530              	.LCFI16:
 2531              		.cfi_def_cfa_offset 8
 2532              		.cfi_offset 4, -8
 2533              		.cfi_offset 14, -4
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
 2534              		.loc 1 1940 0
 2535 0004 0424     		mov	r4, #4
 2536 0006 8C40     		lsl	r4, r4, r1
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 2537              		.loc 1 1943 0
 2538 0008 A343     		bic	r3, r4
 2539 000a 0384     		strh	r3, [r0, #32]
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 2540              		.loc 1 1946 0
 2541 000c 038C     		ldrh	r3, [r0, #32]
 2542 000e 8A40     		lsl	r2, r2, r1
 2543              	.LVL291:
 2544 0010 111C     		mov	r1, r2
 2545              	.LVL292:
 2546 0012 1943     		orr	r1, r3
 2547 0014 0184     		strh	r1, [r0, #32]
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2548              		.loc 1 1947 0
 2549              		@ sp needed for prologue
 2550 0016 10BD     		pop	{r4, pc}
 2551              		.cfi_endproc
 2552              	.LFE87:
 2554              		.section	.text.TIM_SelectCOM,"ax",%progbits
 2555              		.align	1
 2556              		.global	TIM_SelectCOM
 2557              		.code	16
 2558              		.thumb_func
 2560              	TIM_SelectCOM:
 2561              	.LFB88:
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2562              		.loc 1 1957 0
 2563              		.cfi_startproc
 2564              	.LVL293:
 2565 0000 00B5     		push	{lr}
 2566              	.LCFI17:
 2567              		.cfi_def_cfa_offset 4
 2568              		.cfi_offset 14, -4
 2569 0002 0423     		mov	r3, #4
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 2570              		.loc 1 1964 0
 2571 0004 8288     		ldrh	r2, [r0, #4]
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 2572              		.loc 1 1961 0
 2573 0006 0029     		cmp	r1, #0
 2574 0008 01D0     		beq	.L153
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 2575              		.loc 1 1964 0
 2576 000a 1343     		orr	r3, r2
 2577 000c 01E0     		b	.L155
 2578              	.L153:
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 2579              		.loc 1 1969 0
 2580 000e 9A43     		bic	r2, r3
 2581 0010 131C     		mov	r3, r2
 2582              	.L155:
 2583 0012 8380     		strh	r3, [r0, #4]
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2584              		.loc 1 1971 0
 2585              		@ sp needed for prologue
 2586 0014 00BD     		pop	{pc}
 2587              		.cfi_endproc
 2588              	.LFE88:
 2590              		.section	.text.TIM_ICStructInit,"ax",%progbits
 2591              		.align	1
 2592              		.global	TIM_ICStructInit
 2593              		.code	16
 2594              		.thumb_func
 2596              	TIM_ICStructInit:
 2597              	.LFB90:
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2598              		.loc 1 2092 0
 2599              		.cfi_startproc
 2600              	.LVL294:
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 2601              		.loc 1 2094 0
 2602 0000 0023     		mov	r3, #0
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2603              		.loc 1 2096 0
 2604 0002 0122     		mov	r2, #1
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 2605              		.loc 1 2094 0
 2606 0004 0380     		strh	r3, [r0]
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 2607              		.loc 1 2095 0
 2608 0006 4380     		strh	r3, [r0, #2]
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2609              		.loc 1 2096 0
 2610 0008 8280     		strh	r2, [r0, #4]
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 2611              		.loc 1 2097 0
 2612 000a C380     		strh	r3, [r0, #6]
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 2613              		.loc 1 2098 0
 2614 000c 0381     		strh	r3, [r0, #8]
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2615              		.loc 1 2099 0
 2616              		@ sp needed for prologue
 2617 000e 7047     		bx	lr
 2618              		.cfi_endproc
 2619              	.LFE90:
 2621              		.section	.text.TIM_GetCapture1,"ax",%progbits
 2622              		.align	1
 2623              		.global	TIM_GetCapture1
 2624              		.code	16
 2625              		.thumb_func
 2627              	TIM_GetCapture1:
 2628              	.LFB92:
2168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2629              		.loc 1 2168 0
 2630              		.cfi_startproc
 2631              	.LVL295:
2173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR1;
 2632              		.loc 1 2173 0
 2633 0000 406B     		ldr	r0, [r0, #52]
 2634              	.LVL296:
2174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2635              		.loc 1 2174 0
 2636              		@ sp needed for prologue
 2637 0002 7047     		bx	lr
 2638              		.cfi_endproc
 2639              	.LFE92:
 2641              		.section	.text.TIM_GetCapture2,"ax",%progbits
 2642              		.align	1
 2643              		.global	TIM_GetCapture2
 2644              		.code	16
 2645              		.thumb_func
 2647              	TIM_GetCapture2:
 2648              	.LFB93:
2182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2649              		.loc 1 2182 0
 2650              		.cfi_startproc
 2651              	.LVL297:
2187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR2;
 2652              		.loc 1 2187 0
 2653 0000 806B     		ldr	r0, [r0, #56]
 2654              	.LVL298:
2188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2655              		.loc 1 2188 0
 2656              		@ sp needed for prologue
 2657 0002 7047     		bx	lr
 2658              		.cfi_endproc
 2659              	.LFE93:
 2661              		.section	.text.TIM_GetCapture3,"ax",%progbits
 2662              		.align	1
 2663              		.global	TIM_GetCapture3
 2664              		.code	16
 2665              		.thumb_func
 2667              	TIM_GetCapture3:
 2668              	.LFB94:
2197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2669              		.loc 1 2197 0
 2670              		.cfi_startproc
 2671              	.LVL299:
2202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR3;
 2672              		.loc 1 2202 0
 2673 0000 C06B     		ldr	r0, [r0, #60]
 2674              	.LVL300:
2203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2675              		.loc 1 2203 0
 2676              		@ sp needed for prologue
 2677 0002 7047     		bx	lr
 2678              		.cfi_endproc
 2679              	.LFE94:
 2681              		.section	.text.TIM_GetCapture4,"ax",%progbits
 2682              		.align	1
 2683              		.global	TIM_GetCapture4
 2684              		.code	16
 2685              		.thumb_func
 2687              	TIM_GetCapture4:
 2688              	.LFB95:
2212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2689              		.loc 1 2212 0
 2690              		.cfi_startproc
 2691              	.LVL301:
2217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR4;
 2692              		.loc 1 2217 0
 2693 0000 006C     		ldr	r0, [r0, #64]
 2694              	.LVL302:
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2695              		.loc 1 2218 0
 2696              		@ sp needed for prologue
 2697 0002 7047     		bx	lr
 2698              		.cfi_endproc
 2699              	.LFE95:
 2701              		.section	.text.TIM_SetIC1Prescaler,"ax",%progbits
 2702              		.align	1
 2703              		.global	TIM_SetIC1Prescaler
 2704              		.code	16
 2705              		.thumb_func
 2707              	TIM_SetIC1Prescaler:
 2708              	.LFB96:
2233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2709              		.loc 1 2233 0
 2710              		.cfi_startproc
 2711              	.LVL303:
2239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 2712              		.loc 1 2239 0
 2713 0000 038B     		ldrh	r3, [r0, #24]
 2714 0002 0C22     		mov	r2, #12
 2715 0004 9343     		bic	r3, r2
 2716 0006 0383     		strh	r3, [r0, #24]
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
 2717              		.loc 1 2241 0
 2718 0008 038B     		ldrh	r3, [r0, #24]
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2719              		.loc 1 2242 0
 2720              		@ sp needed for prologue
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
 2721              		.loc 1 2241 0
 2722 000a 1943     		orr	r1, r3
 2723              	.LVL304:
 2724 000c 0183     		strh	r1, [r0, #24]
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2725              		.loc 1 2242 0
 2726 000e 7047     		bx	lr
 2727              		.cfi_endproc
 2728              	.LFE96:
 2730              		.section	.text.TIM_SetIC2Prescaler,"ax",%progbits
 2731              		.align	1
 2732              		.global	TIM_SetIC2Prescaler
 2733              		.code	16
 2734              		.thumb_func
 2736              	TIM_SetIC2Prescaler:
 2737              	.LFB97:
2257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2738              		.loc 1 2257 0
 2739              		.cfi_startproc
 2740              	.LVL305:
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 2741              		.loc 1 2263 0
 2742 0000 028B     		ldrh	r2, [r0, #24]
 2743 0002 044B     		ldr	r3, .L163
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 2744              		.loc 1 2265 0
 2745 0004 0902     		lsl	r1, r1, #8
 2746              	.LVL306:
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 2747              		.loc 1 2263 0
 2748 0006 1340     		and	r3, r2
 2749 0008 0383     		strh	r3, [r0, #24]
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 2750              		.loc 1 2265 0
 2751 000a 038B     		ldrh	r3, [r0, #24]
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2752              		.loc 1 2266 0
 2753              		@ sp needed for prologue
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 2754              		.loc 1 2265 0
 2755 000c 1943     		orr	r1, r3
 2756 000e 0183     		strh	r1, [r0, #24]
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2757              		.loc 1 2266 0
 2758 0010 7047     		bx	lr
 2759              	.L164:
 2760 0012 C046     		.align	2
 2761              	.L163:
 2762 0014 FFF3FFFF 		.word	-3073
 2763              		.cfi_endproc
 2764              	.LFE97:
 2766              		.section	.text.TIM_PWMIConfig,"ax",%progbits
 2767              		.align	1
 2768              		.global	TIM_PWMIConfig
 2769              		.code	16
 2770              		.thumb_func
 2772              	TIM_PWMIConfig:
 2773              	.LFB91:
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2774              		.loc 1 2112 0
 2775              		.cfi_startproc
 2776              	.LVL307:
 2777 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2778              	.LCFI18:
 2779              		.cfi_def_cfa_offset 24
 2780              		.cfi_offset 3, -24
 2781              		.cfi_offset 4, -20
 2782              		.cfi_offset 5, -16
 2783              		.cfi_offset 6, -12
 2784              		.cfi_offset 7, -8
 2785              		.cfi_offset 14, -4
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2786              		.loc 1 2112 0
 2787 0002 0C1C     		mov	r4, r1
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 2788              		.loc 1 2127 0
 2789 0004 A288     		ldrh	r2, [r4, #4]
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 2790              		.loc 1 2118 0
 2791 0006 4988     		ldrh	r1, [r1, #2]
 2792              	.LVL308:
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2793              		.loc 1 2112 0
 2794 0008 051C     		mov	r5, r0
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 2795              		.loc 1 2129 0
 2796 000a 561E     		sub	r6, r2, #1
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2797              		.loc 1 2135 0
 2798 000c 2088     		ldrh	r0, [r4]
 2799              	.LVL309:
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 2800              		.loc 1 2120 0
 2801 000e 4F42     		neg	r7, r1
 2802 0010 4F41     		adc	r7, r7, r1
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 2803              		.loc 1 2129 0
 2804 0012 731E     		sub	r3, r6, #1
 2805 0014 9E41     		sbc	r6, r6, r3
 2806 0016 0223     		mov	r3, #2
 2807 0018 9E1B     		sub	r6, r3, r6
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 2808              		.loc 1 2120 0
 2809 001a 7F00     		lsl	r7, r7, #1
 2810              	.LVL310:
 2811 001c 2389     		ldrh	r3, [r4, #8]
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2812              		.loc 1 2135 0
 2813 001e 0028     		cmp	r0, #0
 2814 0020 11D1     		bne	.L168
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 2815              		.loc 1 2138 0
 2816 0022 281C     		mov	r0, r5
 2817 0024 FFF7FEFF 		bl	TI1_Config
 2818              	.LVL311:
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2819              		.loc 1 2141 0
 2820 0028 E188     		ldrh	r1, [r4, #6]
 2821 002a 281C     		mov	r0, r5
 2822 002c FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2823              	.LVL312:
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 2824              		.loc 1 2143 0
 2825 0030 281C     		mov	r0, r5
 2826 0032 391C     		mov	r1, r7
 2827 0034 2389     		ldrh	r3, [r4, #8]
 2828 0036 321C     		mov	r2, r6
 2829 0038 FFF7FEFF 		bl	TI2_Config
 2830              	.LVL313:
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2831              		.loc 1 2145 0
 2832 003c E188     		ldrh	r1, [r4, #6]
 2833 003e 281C     		mov	r0, r5
 2834 0040 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2835              	.LVL314:
 2836 0044 10E0     		b	.L165
 2837              	.L168:
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 2838              		.loc 1 2150 0
 2839 0046 281C     		mov	r0, r5
 2840 0048 FFF7FEFF 		bl	TI2_Config
 2841              	.LVL315:
2153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2842              		.loc 1 2153 0
 2843 004c E188     		ldrh	r1, [r4, #6]
 2844 004e 281C     		mov	r0, r5
 2845 0050 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2846              	.LVL316:
2155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 2847              		.loc 1 2155 0
 2848 0054 281C     		mov	r0, r5
 2849 0056 391C     		mov	r1, r7
 2850 0058 2389     		ldrh	r3, [r4, #8]
 2851 005a 321C     		mov	r2, r6
 2852 005c FFF7FEFF 		bl	TI1_Config
 2853              	.LVL317:
2157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2854              		.loc 1 2157 0
 2855 0060 E188     		ldrh	r1, [r4, #6]
 2856 0062 281C     		mov	r0, r5
 2857 0064 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2858              	.LVL318:
 2859              	.L165:
2159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2860              		.loc 1 2159 0
 2861              		@ sp needed for prologue
 2862              	.LVL319:
 2863              	.LVL320:
 2864              	.LVL321:
 2865              	.LVL322:
 2866 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2867              		.cfi_endproc
 2868              	.LFE91:
 2870              		.section	.text.TIM_SetIC3Prescaler,"ax",%progbits
 2871              		.align	1
 2872              		.global	TIM_SetIC3Prescaler
 2873              		.code	16
 2874              		.thumb_func
 2876              	TIM_SetIC3Prescaler:
 2877              	.LFB98:
2281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2878              		.loc 1 2281 0
 2879              		.cfi_startproc
 2880              	.LVL323:
2287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 2881              		.loc 1 2287 0
 2882 0000 838B     		ldrh	r3, [r0, #28]
 2883 0002 0C22     		mov	r2, #12
 2884 0004 9343     		bic	r3, r2
 2885 0006 8383     		strh	r3, [r0, #28]
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
 2886              		.loc 1 2289 0
 2887 0008 838B     		ldrh	r3, [r0, #28]
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2888              		.loc 1 2290 0
 2889              		@ sp needed for prologue
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
 2890              		.loc 1 2289 0
 2891 000a 1943     		orr	r1, r3
 2892              	.LVL324:
 2893 000c 8183     		strh	r1, [r0, #28]
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2894              		.loc 1 2290 0
 2895 000e 7047     		bx	lr
 2896              		.cfi_endproc
 2897              	.LFE98:
 2899              		.section	.text.TIM_SetIC4Prescaler,"ax",%progbits
 2900              		.align	1
 2901              		.global	TIM_SetIC4Prescaler
 2902              		.code	16
 2903              		.thumb_func
 2905              	TIM_SetIC4Prescaler:
 2906              	.LFB99:
2305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
 2907              		.loc 1 2305 0
 2908              		.cfi_startproc
 2909              	.LVL325:
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 2910              		.loc 1 2311 0
 2911 0000 828B     		ldrh	r2, [r0, #28]
 2912 0002 044B     		ldr	r3, .L174
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 2913              		.loc 1 2313 0
 2914 0004 0902     		lsl	r1, r1, #8
 2915              	.LVL326:
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 2916              		.loc 1 2311 0
 2917 0006 1340     		and	r3, r2
 2918 0008 8383     		strh	r3, [r0, #28]
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 2919              		.loc 1 2313 0
 2920 000a 838B     		ldrh	r3, [r0, #28]
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2921              		.loc 1 2314 0
 2922              		@ sp needed for prologue
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 2923              		.loc 1 2313 0
 2924 000c 1943     		orr	r1, r3
 2925 000e 8183     		strh	r1, [r0, #28]
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2926              		.loc 1 2314 0
 2927 0010 7047     		bx	lr
 2928              	.L175:
 2929 0012 C046     		.align	2
 2930              	.L174:
 2931 0014 FFF3FFFF 		.word	-3073
 2932              		.cfi_endproc
 2933              	.LFE99:
 2935              		.section	.text.TIM_ICInit,"ax",%progbits
 2936              		.align	1
 2937              		.global	TIM_ICInit
 2938              		.code	16
 2939              		.thumb_func
 2941              	TIM_ICInit:
 2942              	.LFB89:
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2943              		.loc 1 2034 0
 2944              		.cfi_startproc
 2945              	.LVL327:
 2946 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2947              	.LCFI19:
 2948              		.cfi_def_cfa_offset 24
 2949              		.cfi_offset 3, -24
 2950              		.cfi_offset 4, -20
 2951              		.cfi_offset 5, -16
 2952              		.cfi_offset 6, -12
 2953              		.cfi_offset 7, -8
 2954              		.cfi_offset 14, -4
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2955              		.loc 1 2034 0
 2956 0002 041C     		mov	r4, r0
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2957              		.loc 1 2043 0
 2958 0004 0888     		ldrh	r0, [r1]
 2959              	.LVL328:
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2960              		.loc 1 2034 0
 2961 0006 0D1C     		mov	r5, r1
 2962 0008 AA88     		ldrh	r2, [r5, #4]
 2963 000a 4988     		ldrh	r1, [r1, #2]
 2964              	.LVL329:
 2965 000c 2B89     		ldrh	r3, [r5, #8]
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2966              		.loc 1 2043 0
 2967 000e 0028     		cmp	r0, #0
 2968 0010 07D1     		bne	.L177
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 2969              		.loc 1 2047 0
 2970 0012 201C     		mov	r0, r4
 2971 0014 FFF7FEFF 		bl	TI1_Config
 2972              	.LVL330:
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2973              		.loc 1 2051 0
 2974 0018 E988     		ldrh	r1, [r5, #6]
 2975 001a 201C     		mov	r0, r4
 2976 001c FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2977              	.LVL331:
 2978 0020 42E0     		b	.L176
 2979              	.L177:
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 2980              		.loc 1 2053 0
 2981 0022 0428     		cmp	r0, #4
 2982 0024 07D1     		bne	.L179
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 2983              		.loc 1 2057 0
 2984 0026 201C     		mov	r0, r4
 2985 0028 FFF7FEFF 		bl	TI2_Config
 2986              	.LVL332:
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2987              		.loc 1 2061 0
 2988 002c E988     		ldrh	r1, [r5, #6]
 2989 002e 201C     		mov	r0, r4
 2990 0030 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2991              	.LVL333:
 2992 0034 38E0     		b	.L176
 2993              	.L179:
 2994              	.LBB10:
 2995              	.LBB11:
3260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI3 as Input.
3263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
3272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
3273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
3274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
3283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 2996              		.loc 1 3283 0
 2997 0036 268C     		ldrh	r6, [r4, #32]
 2998              	.LBE11:
 2999              	.LBE10:
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 3000              		.loc 1 2063 0
 3001 0038 0828     		cmp	r0, #8
 3002 003a 1AD1     		bne	.L180
 3003              	.LVL334:
 3004              	.LBB13:
 3005              	.LBB12:
 3006              		.loc 1 3283 0
 3007 003c 1B48     		ldr	r0, .L181
 3008 003e 3040     		and	r0, r6
 3009 0040 2084     		strh	r0, [r4, #32]
3284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3010              		.loc 1 3284 0
 3011 0042 A78B     		ldrh	r7, [r4, #28]
 3012              	.LVL335:
3285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
3287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2
 3013              		.loc 1 3288 0
 3014 0044 F326     		mov	r6, #243
 3015 0046 B743     		bic	r7, r6
 3016              	.LVL336:
3289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 3017              		.loc 1 3289 0
 3018 0048 1E01     		lsl	r6, r3, #4
 3019 004a 3B1C     		mov	r3, r7
 3020              	.LVL337:
 3021 004c 3343     		orr	r3, r6
 3022 004e 9BB2     		uxth	r3, r3
3285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 3023              		.loc 1 3285 0
 3024 0050 208C     		ldrh	r0, [r4, #32]
 3025              	.LVL338:
 3026              		.loc 1 3289 0
 3027 0052 1A43     		orr	r2, r3
 3028              	.LVL339:
3286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 3029              		.loc 1 3286 0
 3030 0054 0B02     		lsl	r3, r1, #8
3290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC3E Bit */
3291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 3031              		.loc 1 3291 0
 3032 0056 1649     		ldr	r1, .L181+4
 3033              	.LVL340:
3292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
3293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3034              		.loc 1 3294 0
 3035 0058 A283     		strh	r2, [r4, #28]
3291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 3036              		.loc 1 3291 0
 3037 005a 0140     		and	r1, r0
3292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 3038              		.loc 1 3292 0
 3039 005c 1943     		orr	r1, r3
 3040 005e 8BB2     		uxth	r3, r1
 3041 0060 8021     		mov	r1, #128
 3042 0062 4900     		lsl	r1, r1, #1
 3043 0064 1943     		orr	r1, r3
 3044              	.LVL341:
3295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3045              		.loc 1 3295 0
 3046 0066 2184     		strh	r1, [r4, #32]
 3047              	.LBE12:
 3048              	.LBE13:
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 3049              		.loc 1 2071 0
 3050 0068 E988     		ldrh	r1, [r5, #6]
 3051              	.LVL342:
 3052 006a 201C     		mov	r0, r4
 3053 006c FFF7FEFF 		bl	TIM_SetIC3Prescaler
 3054              	.LVL343:
 3055 0070 1AE0     		b	.L176
 3056              	.LVL344:
 3057              	.L180:
 3058              	.LBB14:
 3059              	.LBB15:
3296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI4 as Input.
3300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
3302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
3309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
3310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
3311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    /* Disable the Channel 4: Reset the CC4E Bit */
3321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 3060              		.loc 1 3321 0
 3061 0072 1048     		ldr	r0, .L181+8
3322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
3323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
3325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
3327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
3328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 3062              		.loc 1 3328 0
 3063 0074 1B03     		lsl	r3, r3, #12
 3064              	.LVL345:
3321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 3065              		.loc 1 3321 0
 3066 0076 3040     		and	r0, r6
 3067 0078 2084     		strh	r0, [r4, #32]
3322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3068              		.loc 1 3322 0
 3069 007a A78B     		ldrh	r7, [r4, #28]
 3070              	.LVL346:
3326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
 3071              		.loc 1 3326 0
 3072 007c 0E4E     		ldr	r6, .L181+12
3323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 3073              		.loc 1 3323 0
 3074 007e 208C     		ldrh	r0, [r4, #32]
 3075              	.LVL347:
3326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
 3076              		.loc 1 3326 0
 3077 0080 3740     		and	r7, r6
 3078              	.LVL348:
3327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 3079              		.loc 1 3327 0
 3080 0082 1602     		lsl	r6, r2, #8
 3081 0084 3A1C     		mov	r2, r7
 3082              	.LVL349:
 3083 0086 3243     		orr	r2, r6
 3084 0088 92B2     		uxth	r2, r2
 3085              	.LVL350:
 3086              		.loc 1 3328 0
 3087 008a 1343     		orr	r3, r2
 3088              	.LVL351:
3324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 3089              		.loc 1 3324 0
 3090 008c 0A03     		lsl	r2, r1, #12
3329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC4E Bit */
3330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 3091              		.loc 1 3330 0
 3092 008e 0B49     		ldr	r1, .L181+16
 3093              	.LVL352:
3331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
3332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3094              		.loc 1 3333 0
 3095 0090 A383     		strh	r3, [r4, #28]
3330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 3096              		.loc 1 3330 0
 3097 0092 0140     		and	r1, r0
3331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 3098              		.loc 1 3331 0
 3099 0094 1143     		orr	r1, r2
 3100 0096 8AB2     		uxth	r2, r1
 3101 0098 8021     		mov	r1, #128
 3102 009a 4901     		lsl	r1, r1, #5
 3103 009c 1143     		orr	r1, r2
 3104              	.LVL353:
3334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3105              		.loc 1 3334 0
 3106 009e 2184     		strh	r1, [r4, #32]
 3107              	.LBE15:
 3108              	.LBE14:
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 3109              		.loc 1 2081 0
 3110 00a0 E988     		ldrh	r1, [r5, #6]
 3111              	.LVL354:
 3112 00a2 201C     		mov	r0, r4
 3113 00a4 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 3114              	.LVL355:
 3115              	.L176:
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3116              		.loc 1 2083 0
 3117              		@ sp needed for prologue
 3118              	.LVL356:
 3119              	.LVL357:
 3120 00a8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3121              	.L182:
 3122 00aa C046     		.align	2
 3123              	.L181:
 3124 00ac FFFEFFFF 		.word	-257
 3125 00b0 FFF5FFFF 		.word	-2561
 3126 00b4 FFEFFFFF 		.word	-4097
 3127 00b8 FF0C0000 		.word	3327
 3128 00bc FF5F0000 		.word	24575
 3129              		.cfi_endproc
 3130              	.LFE89:
 3132              		.section	.text.TIM_ITConfig,"ax",%progbits
 3133              		.align	1
 3134              		.global	TIM_ITConfig
 3135              		.code	16
 3136              		.thumb_func
 3138              	TIM_ITConfig:
 3139              	.LFB100:
2360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
 3140              		.loc 1 2360 0
 3141              		.cfi_startproc
 3142              	.LVL358:
 3143 0000 00B5     		push	{lr}
 3144              	.LCFI20:
 3145              		.cfi_def_cfa_offset 4
 3146              		.cfi_offset 14, -4
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
 3147              		.loc 1 2369 0
 3148 0002 8389     		ldrh	r3, [r0, #12]
2366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3149              		.loc 1 2366 0
 3150 0004 002A     		cmp	r2, #0
 3151 0006 02D0     		beq	.L184
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
 3152              		.loc 1 2369 0
 3153 0008 1943     		orr	r1, r3
 3154              	.LVL359:
 3155 000a 8181     		strh	r1, [r0, #12]
 3156 000c 01E0     		b	.L183
 3157              	.LVL360:
 3158              	.L184:
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
 3159              		.loc 1 2374 0
 3160 000e 8B43     		bic	r3, r1
 3161 0010 8381     		strh	r3, [r0, #12]
 3162              	.LVL361:
 3163              	.L183:
2376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3164              		.loc 1 2376 0
 3165              		@ sp needed for prologue
 3166 0012 00BD     		pop	{pc}
 3167              		.cfi_endproc
 3168              	.LFE100:
 3170              		.section	.text.TIM_GenerateEvent,"ax",%progbits
 3171              		.align	1
 3172              		.global	TIM_GenerateEvent
 3173              		.code	16
 3174              		.thumb_func
 3176              	TIM_GenerateEvent:
 3177              	.LFB101:
2402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 3178              		.loc 1 2402 0
 3179              		.cfi_startproc
 3180              	.LVL362:
2407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_EventSource;
 3181              		.loc 1 2407 0
 3182 0000 8182     		strh	r1, [r0, #20]
2408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3183              		.loc 1 2408 0
 3184              		@ sp needed for prologue
 3185 0002 7047     		bx	lr
 3186              		.cfi_endproc
 3187              	.LFE101:
 3189              		.section	.text.TIM_GetFlagStatus,"ax",%progbits
 3190              		.align	1
 3191              		.global	TIM_GetFlagStatus
 3192              		.code	16
 3193              		.thumb_func
 3195              	TIM_GetFlagStatus:
 3196              	.LFB102:
2440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 3197              		.loc 1 2440 0
 3198              		.cfi_startproc
 3199              	.LVL363:
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 3200              		.loc 1 2447 0
 3201 0000 008A     		ldrh	r0, [r0, #16]
 3202              	.LVL364:
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3203              		.loc 1 2456 0
 3204              		@ sp needed for prologue
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 3205              		.loc 1 2447 0
 3206 0002 0840     		and	r0, r1
 3207              	.LVL365:
2455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
 3208              		.loc 1 2455 0
 3209 0004 431E     		sub	r3, r0, #1
 3210 0006 9841     		sbc	r0, r0, r3
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3211              		.loc 1 2456 0
 3212 0008 7047     		bx	lr
 3213              		.cfi_endproc
 3214              	.LFE102:
 3216              		.section	.text.TIM_ClearFlag,"ax",%progbits
 3217              		.align	1
 3218              		.global	TIM_ClearFlag
 3219              		.code	16
 3220              		.thumb_func
 3222              	TIM_ClearFlag:
 3223              	.LFB103:
2489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
 3224              		.loc 1 2489 0
 3225              		.cfi_startproc
 3226              	.LVL366:
2495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
 3227              		.loc 1 2495 0
 3228 0000 C943     		mvn	r1, r1
 3229              	.LVL367:
 3230 0002 0182     		strh	r1, [r0, #16]
2496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3231              		.loc 1 2496 0
 3232              		@ sp needed for prologue
 3233 0004 7047     		bx	lr
 3234              		.cfi_endproc
 3235              	.LFE103:
 3237              		.section	.text.TIM_GetITStatus,"ax",%progbits
 3238              		.align	1
 3239              		.global	TIM_GetITStatus
 3240              		.code	16
 3241              		.thumb_func
 3243              	TIM_GetITStatus:
 3244              	.LFB104:
2524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3245              		.loc 1 2524 0
 3246              		.cfi_startproc
 3247              	.LVL368:
2532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
 3248              		.loc 1 2532 0
 3249 0000 028A     		ldrh	r2, [r0, #16]
 3250              	.LVL369:
2534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
 3251              		.loc 1 2534 0
 3252 0002 8389     		ldrh	r3, [r0, #12]
 3253              	.LVL370:
2544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3254              		.loc 1 2544 0
 3255              		@ sp needed for prologue
2535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 3256              		.loc 1 2535 0
 3257 0004 0B40     		and	r3, r1
 3258              	.LVL371:
 3259 0006 581E     		sub	r0, r3, #1
 3260 0008 8341     		sbc	r3, r3, r0
 3261              	.LVL372:
 3262 000a 101C     		mov	r0, r2
 3263 000c 0840     		and	r0, r1
 3264 000e 411E     		sub	r1, r0, #1
 3265 0010 8841     		sbc	r0, r0, r1
 3266              	.LVL373:
2543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
 3267              		.loc 1 2543 0
 3268 0012 1840     		and	r0, r3
2544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3269              		.loc 1 2544 0
 3270 0014 7047     		bx	lr
 3271              		.cfi_endproc
 3272              	.LFE104:
 3274              		.section	.text.TIM_ClearITPendingBit,"ax",%progbits
 3275              		.align	1
 3276              		.global	TIM_ClearITPendingBit
 3277              		.code	16
 3278              		.thumb_func
 3280              	TIM_ClearITPendingBit:
 3281              	.LFB105:
2572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3282              		.loc 1 2572 0
 3283              		.cfi_startproc
 3284              	.LVL374:
2578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
 3285              		.loc 1 2578 0
 3286 0000 C943     		mvn	r1, r1
 3287              	.LVL375:
 3288 0002 0182     		strh	r1, [r0, #16]
2579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3289              		.loc 1 2579 0
 3290              		@ sp needed for prologue
 3291 0004 7047     		bx	lr
 3292              		.cfi_endproc
 3293              	.LFE105:
 3295              		.section	.text.TIM_DMAConfig,"ax",%progbits
 3296              		.align	1
 3297              		.global	TIM_DMAConfig
 3298              		.code	16
 3299              		.thumb_func
 3301              	TIM_DMAConfig:
 3302              	.LFB106:
2610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3303              		.loc 1 2610 0
 3304              		.cfi_startproc
 3305              	.LVL376:
2616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 3306              		.loc 1 2616 0
 3307 0000 1143     		orr	r1, r2
 3308              	.LVL377:
 3309 0002 4830     		add	r0, r0, #72
 3310              	.LVL378:
 3311 0004 0180     		strh	r1, [r0]
2617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3312              		.loc 1 2617 0
 3313              		@ sp needed for prologue
 3314 0006 7047     		bx	lr
 3315              		.cfi_endproc
 3316              	.LFE106:
 3318              		.section	.text.TIM_DMACmd,"ax",%progbits
 3319              		.align	1
 3320              		.global	TIM_DMACmd
 3321              		.code	16
 3322              		.thumb_func
 3324              	TIM_DMACmd:
 3325              	.LFB107:
2639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 3326              		.loc 1 2639 0
 3327              		.cfi_startproc
 3328              	.LVL379:
 3329 0000 00B5     		push	{lr}
 3330              	.LCFI21:
 3331              		.cfi_def_cfa_offset 4
 3332              		.cfi_offset 14, -4
2648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 3333              		.loc 1 2648 0
 3334 0002 8389     		ldrh	r3, [r0, #12]
2645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3335              		.loc 1 2645 0
 3336 0004 002A     		cmp	r2, #0
 3337 0006 02D0     		beq	.L193
2648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 3338              		.loc 1 2648 0
 3339 0008 1943     		orr	r1, r3
 3340              	.LVL380:
 3341 000a 8181     		strh	r1, [r0, #12]
 3342 000c 01E0     		b	.L192
 3343              	.LVL381:
 3344              	.L193:
2653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
 3345              		.loc 1 2653 0
 3346 000e 8B43     		bic	r3, r1
 3347 0010 8381     		strh	r3, [r0, #12]
 3348              	.LVL382:
 3349              	.L192:
2655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3350              		.loc 1 2655 0
 3351              		@ sp needed for prologue
 3352 0012 00BD     		pop	{pc}
 3353              		.cfi_endproc
 3354              	.LFE107:
 3356              		.section	.text.TIM_SelectCCDMA,"ax",%progbits
 3357              		.align	1
 3358              		.global	TIM_SelectCCDMA
 3359              		.code	16
 3360              		.thumb_func
 3362              	TIM_SelectCCDMA:
 3363              	.LFB108:
2666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3364              		.loc 1 2666 0
 3365              		.cfi_startproc
 3366              	.LVL383:
 3367 0000 00B5     		push	{lr}
 3368              	.LCFI22:
 3369              		.cfi_def_cfa_offset 4
 3370              		.cfi_offset 14, -4
 3371 0002 0823     		mov	r3, #8
2674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 3372              		.loc 1 2674 0
 3373 0004 8288     		ldrh	r2, [r0, #4]
2671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3374              		.loc 1 2671 0
 3375 0006 0029     		cmp	r1, #0
 3376 0008 01D0     		beq	.L196
2674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 3377              		.loc 1 2674 0
 3378 000a 1343     		orr	r3, r2
 3379 000c 01E0     		b	.L198
 3380              	.L196:
2679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 3381              		.loc 1 2679 0
 3382 000e 9A43     		bic	r2, r3
 3383 0010 131C     		mov	r3, r2
 3384              	.L198:
 3385 0012 8380     		strh	r3, [r0, #4]
2681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3386              		.loc 1 2681 0
 3387              		@ sp needed for prologue
 3388 0014 00BD     		pop	{pc}
 3389              		.cfi_endproc
 3390              	.LFE108:
 3392              		.section	.text.TIM_InternalClockConfig,"ax",%progbits
 3393              		.align	1
 3394              		.global	TIM_InternalClockConfig
 3395              		.code	16
 3396              		.thumb_func
 3398              	TIM_InternalClockConfig:
 3399              	.LFB109:
2706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3400              		.loc 1 2706 0
 3401              		.cfi_startproc
 3402              	.LVL384:
2710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 3403              		.loc 1 2710 0
 3404 0000 0389     		ldrh	r3, [r0, #8]
 3405 0002 0722     		mov	r2, #7
 3406 0004 9343     		bic	r3, r2
 3407 0006 0381     		strh	r3, [r0, #8]
2711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3408              		.loc 1 2711 0
 3409              		@ sp needed for prologue
 3410 0008 7047     		bx	lr
 3411              		.cfi_endproc
 3412              	.LFE109:
 3414              		.section	.text.TIM_ITRxExternalClockConfig,"ax",%progbits
 3415              		.align	1
 3416              		.global	TIM_ITRxExternalClockConfig
 3417              		.code	16
 3418              		.thumb_func
 3420              	TIM_ITRxExternalClockConfig:
 3421              	.LFB110:
2726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3422              		.loc 1 2726 0
 3423              		.cfi_startproc
 3424              	.LVL385:
 3425              	.LBB16:
 3426              	.LBB17:
2914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3427              		.loc 1 2914 0
 3428 0000 0389     		ldrh	r3, [r0, #8]
 3429              	.LVL386:
2916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 3430              		.loc 1 2916 0
 3431 0002 7022     		mov	r2, #112
 3432 0004 9343     		bic	r3, r2
 3433              	.LVL387:
2918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 3434              		.loc 1 2918 0
 3435 0006 1943     		orr	r1, r3
 3436              	.LVL388:
2920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3437              		.loc 1 2920 0
 3438 0008 0181     		strh	r1, [r0, #8]
 3439              	.LBE17:
 3440              	.LBE16:
2733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 3441              		.loc 1 2733 0
 3442 000a 0389     		ldrh	r3, [r0, #8]
 3443 000c 0722     		mov	r2, #7
 3444 000e 1343     		orr	r3, r2
 3445 0010 0381     		strh	r3, [r0, #8]
2734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3446              		.loc 1 2734 0
 3447              		@ sp needed for prologue
 3448 0012 7047     		bx	lr
 3449              		.cfi_endproc
 3450              	.LFE110:
 3452              		.section	.text.TIM_TIxExternalClockConfig,"ax",%progbits
 3453              		.align	1
 3454              		.global	TIM_TIxExternalClockConfig
 3455              		.code	16
 3456              		.thumb_func
 3458              	TIM_TIxExternalClockConfig:
 3459              	.LFB111:
2755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3460              		.loc 1 2755 0
 3461              		.cfi_startproc
 3462              	.LVL389:
 3463 0000 38B5     		push	{r3, r4, r5, lr}
 3464              	.LCFI23:
 3465              		.cfi_def_cfa_offset 16
 3466              		.cfi_offset 3, -16
 3467              		.cfi_offset 4, -12
 3468              		.cfi_offset 5, -8
 3469              		.cfi_offset 14, -4
2755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3470              		.loc 1 2755 0
 3471 0002 0D1C     		mov	r5, r1
 3472 0004 041C     		mov	r4, r0
 3473 0006 111C     		mov	r1, r2
 3474              	.LVL390:
2764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 3475              		.loc 1 2764 0
 3476 0008 0122     		mov	r2, #1
 3477              	.LVL391:
2762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 3478              		.loc 1 2762 0
 3479 000a 602D     		cmp	r5, #96
 3480 000c 02D1     		bne	.L202
2764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 3481              		.loc 1 2764 0
 3482 000e FFF7FEFF 		bl	TI2_Config
 3483              	.LVL392:
 3484 0012 01E0     		b	.L203
 3485              	.LVL393:
 3486              	.L202:
2768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 3487              		.loc 1 2768 0
 3488 0014 FFF7FEFF 		bl	TI1_Config
 3489              	.LVL394:
 3490              	.L203:
 3491              	.LBB18:
 3492              	.LBB19:
2914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3493              		.loc 1 2914 0
 3494 0018 2389     		ldrh	r3, [r4, #8]
 3495              	.LVL395:
2916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 3496              		.loc 1 2916 0
 3497 001a 7022     		mov	r2, #112
 3498 001c 9343     		bic	r3, r2
 3499              	.LVL396:
2918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 3500              		.loc 1 2918 0
 3501 001e 1D43     		orr	r5, r3
 3502              	.LVL397:
2920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3503              		.loc 1 2920 0
 3504 0020 2581     		strh	r5, [r4, #8]
 3505              	.LBE19:
 3506              	.LBE18:
2773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 3507              		.loc 1 2773 0
 3508 0022 2389     		ldrh	r3, [r4, #8]
 3509 0024 0722     		mov	r2, #7
 3510 0026 1343     		orr	r3, r2
 3511 0028 2381     		strh	r3, [r4, #8]
2774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3512              		.loc 1 2774 0
 3513              		@ sp needed for prologue
 3514              	.LVL398:
 3515              	.LVL399:
 3516 002a 38BD     		pop	{r3, r4, r5, pc}
 3517              		.cfi_endproc
 3518              	.LFE111:
 3520              		.section	.text.TIM_SelectInputTrigger,"ax",%progbits
 3521              		.align	1
 3522              		.global	TIM_SelectInputTrigger
 3523              		.code	16
 3524              		.thumb_func
 3526              	TIM_SelectInputTrigger:
 3527              	.LFB114:
2906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3528              		.loc 1 2906 0
 3529              		.cfi_startproc
 3530              	.LVL400:
2914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3531              		.loc 1 2914 0
 3532 0000 0389     		ldrh	r3, [r0, #8]
 3533              	.LVL401:
2916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 3534              		.loc 1 2916 0
 3535 0002 7022     		mov	r2, #112
 3536 0004 9343     		bic	r3, r2
 3537              	.LVL402:
2918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 3538              		.loc 1 2918 0
 3539 0006 1943     		orr	r1, r3
 3540              	.LVL403:
2920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3541              		.loc 1 2920 0
 3542 0008 0181     		strh	r1, [r0, #8]
2921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3543              		.loc 1 2921 0
 3544              		@ sp needed for prologue
 3545 000a 7047     		bx	lr
 3546              		.cfi_endproc
 3547              	.LFE114:
 3549              		.section	.text.TIM_SelectOutputTrigger,"ax",%progbits
 3550              		.align	1
 3551              		.global	TIM_SelectOutputTrigger
 3552              		.code	16
 3553              		.thumb_func
 3555              	TIM_SelectOutputTrigger:
 3556              	.LFB115:
2948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3557              		.loc 1 2948 0
 3558              		.cfi_startproc
 3559              	.LVL404:
2954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 3560              		.loc 1 2954 0
 3561 0000 8388     		ldrh	r3, [r0, #4]
 3562 0002 7022     		mov	r2, #112
 3563 0004 9343     		bic	r3, r2
 3564 0006 8380     		strh	r3, [r0, #4]
2956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
 3565              		.loc 1 2956 0
 3566 0008 8388     		ldrh	r3, [r0, #4]
2957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3567              		.loc 1 2957 0
 3568              		@ sp needed for prologue
2956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
 3569              		.loc 1 2956 0
 3570 000a 1943     		orr	r1, r3
 3571              	.LVL405:
 3572 000c 8180     		strh	r1, [r0, #4]
2957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3573              		.loc 1 2957 0
 3574 000e 7047     		bx	lr
 3575              		.cfi_endproc
 3576              	.LFE115:
 3578              		.section	.text.TIM_SelectSlaveMode,"ax",%progbits
 3579              		.align	1
 3580              		.global	TIM_SelectSlaveMode
 3581              		.code	16
 3582              		.thumb_func
 3584              	TIM_SelectSlaveMode:
 3585              	.LFB116:
2973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3586              		.loc 1 2973 0
 3587              		.cfi_startproc
 3588              	.LVL406:
2979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 3589              		.loc 1 2979 0
 3590 0000 0389     		ldrh	r3, [r0, #8]
 3591 0002 0722     		mov	r2, #7
 3592 0004 9343     		bic	r3, r2
 3593 0006 0381     		strh	r3, [r0, #8]
2981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
 3594              		.loc 1 2981 0
 3595 0008 0389     		ldrh	r3, [r0, #8]
2982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3596              		.loc 1 2982 0
 3597              		@ sp needed for prologue
2981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
 3598              		.loc 1 2981 0
 3599 000a 1943     		orr	r1, r3
 3600              	.LVL407:
 3601 000c 0181     		strh	r1, [r0, #8]
2982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3602              		.loc 1 2982 0
 3603 000e 7047     		bx	lr
 3604              		.cfi_endproc
 3605              	.LFE116:
 3607              		.section	.text.TIM_SelectMasterSlaveMode,"ax",%progbits
 3608              		.align	1
 3609              		.global	TIM_SelectMasterSlaveMode
 3610              		.code	16
 3611              		.thumb_func
 3613              	TIM_SelectMasterSlaveMode:
 3614              	.LFB117:
2996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3615              		.loc 1 2996 0
 3616              		.cfi_startproc
 3617              	.LVL408:
3002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 3618              		.loc 1 3002 0
 3619 0000 0389     		ldrh	r3, [r0, #8]
 3620 0002 8022     		mov	r2, #128
 3621 0004 9343     		bic	r3, r2
 3622 0006 0381     		strh	r3, [r0, #8]
3005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
 3623              		.loc 1 3005 0
 3624 0008 0389     		ldrh	r3, [r0, #8]
3006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3625              		.loc 1 3006 0
 3626              		@ sp needed for prologue
3005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
 3627              		.loc 1 3005 0
 3628 000a 1943     		orr	r1, r3
 3629              	.LVL409:
 3630 000c 0181     		strh	r1, [r0, #8]
3006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3631              		.loc 1 3006 0
 3632 000e 7047     		bx	lr
 3633              		.cfi_endproc
 3634              	.LFE117:
 3636              		.section	.text.TIM_ETRConfig,"ax",%progbits
 3637              		.align	1
 3638              		.global	TIM_ETRConfig
 3639              		.code	16
 3640              		.thumb_func
 3642              	TIM_ETRConfig:
 3643              	.LFB118:
3028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3644              		.loc 1 3028 0
 3645              		.cfi_startproc
 3646              	.LVL410:
 3647 0000 10B5     		push	{r4, lr}
 3648              	.LCFI24:
 3649              		.cfi_def_cfa_offset 8
 3650              		.cfi_offset 4, -8
 3651              		.cfi_offset 14, -4
3037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3652              		.loc 1 3037 0
 3653 0002 0489     		ldrh	r4, [r0, #8]
 3654              	.LVL411:
3041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 3655              		.loc 1 3041 0
 3656 0004 1B02     		lsl	r3, r3, #8
 3657              	.LVL412:
3039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
 3658              		.loc 1 3039 0
 3659 0006 E4B2     		uxtb	r4, r4
 3660              	.LVL413:
3041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 3661              		.loc 1 3041 0
 3662 0008 2143     		orr	r1, r4
 3663              	.LVL414:
 3664 000a 0A43     		orr	r2, r1
 3665              	.LVL415:
 3666 000c 1A43     		orr	r2, r3
 3667              	.LVL416:
3043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3668              		.loc 1 3043 0
 3669 000e 0281     		strh	r2, [r0, #8]
3044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3670              		.loc 1 3044 0
 3671              		@ sp needed for prologue
 3672 0010 10BD     		pop	{r4, pc}
 3673              		.cfi_endproc
 3674              	.LFE118:
 3676              		.section	.text.TIM_ETRClockMode2Config,"ax",%progbits
 3677              		.align	1
 3678              		.global	TIM_ETRClockMode2Config
 3679              		.code	16
 3680              		.thumb_func
 3682              	TIM_ETRClockMode2Config:
 3683              	.LFB113:
2841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3684              		.loc 1 2841 0
 3685              		.cfi_startproc
 3686              	.LVL417:
 3687 0000 10B5     		push	{r4, lr}
 3688              	.LCFI25:
 3689              		.cfi_def_cfa_offset 8
 3690              		.cfi_offset 4, -8
 3691              		.cfi_offset 14, -4
2841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3692              		.loc 1 2841 0
 3693 0002 041C     		mov	r4, r0
2849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 3694              		.loc 1 2849 0
 3695 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3696              	.LVL418:
2851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
 3697              		.loc 1 2851 0
 3698 0008 2289     		ldrh	r2, [r4, #8]
 3699 000a 8023     		mov	r3, #128
 3700 000c DB01     		lsl	r3, r3, #7
 3701 000e 1343     		orr	r3, r2
 3702 0010 2381     		strh	r3, [r4, #8]
2852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3703              		.loc 1 2852 0
 3704              		@ sp needed for prologue
 3705              	.LVL419:
 3706 0012 10BD     		pop	{r4, pc}
 3707              		.cfi_endproc
 3708              	.LFE113:
 3710              		.section	.text.TIM_ETRClockMode1Config,"ax",%progbits
 3711              		.align	1
 3712              		.global	TIM_ETRClockMode1Config
 3713              		.code	16
 3714              		.thumb_func
 3716              	TIM_ETRClockMode1Config:
 3717              	.LFB112:
2796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3718              		.loc 1 2796 0
 3719              		.cfi_startproc
 3720              	.LVL420:
 3721 0000 10B5     		push	{r4, lr}
 3722              	.LCFI26:
 3723              		.cfi_def_cfa_offset 8
 3724              		.cfi_offset 4, -8
 3725              		.cfi_offset 14, -4
2796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3726              		.loc 1 2796 0
 3727 0002 041C     		mov	r4, r0
2806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 3728              		.loc 1 2806 0
 3729 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3730              	.LVL421:
2809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3731              		.loc 1 2809 0
 3732 0008 2289     		ldrh	r2, [r4, #8]
 3733              	.LVL422:
2815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 3734              		.loc 1 2815 0
 3735 000a 7723     		mov	r3, #119
 3736 000c 9A43     		bic	r2, r3
 3737              	.LVL423:
2816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
 3738              		.loc 1 2816 0
 3739 000e 1343     		orr	r3, r2
 3740              	.LVL424:
2818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3741              		.loc 1 2818 0
 3742 0010 2381     		strh	r3, [r4, #8]
2819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3743              		.loc 1 2819 0
 3744              		@ sp needed for prologue
 3745              	.LVL425:
 3746 0012 10BD     		pop	{r4, pc}
 3747              		.cfi_endproc
 3748              	.LFE112:
 3750              		.section	.text.TIM_EncoderInterfaceConfig,"ax",%progbits
 3751              		.align	1
 3752              		.global	TIM_EncoderInterfaceConfig
 3753              		.code	16
 3754              		.thumb_func
 3756              	TIM_EncoderInterfaceConfig:
 3757              	.LFB119:
3084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3758              		.loc 1 3084 0
 3759              		.cfi_startproc
 3760              	.LVL426:
 3761 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3762              	.LCFI27:
 3763              		.cfi_def_cfa_offset 20
 3764              		.cfi_offset 4, -20
 3765              		.cfi_offset 5, -16
 3766              		.cfi_offset 6, -12
 3767              		.cfi_offset 7, -8
 3768              		.cfi_offset 14, -4
3096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3769              		.loc 1 3096 0
 3770 0002 0489     		ldrh	r4, [r0, #8]
 3771              	.LVL427:
3102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 3772              		.loc 1 3102 0
 3773 0004 0727     		mov	r7, #7
 3774 0006 BC43     		bic	r4, r7
 3775              	.LVL428:
3098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3776              		.loc 1 3098 0
 3777 0008 068B     		ldrh	r6, [r0, #24]
 3778              	.LVL429:
3103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 3779              		.loc 1 3103 0
 3780 000a 2143     		orr	r1, r4
 3781              	.LVL430:
3105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
 3782              		.loc 1 3105 0
 3783 000c 064C     		ldr	r4, .L212
3100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 3784              		.loc 1 3100 0
 3785 000e 058C     		ldrh	r5, [r0, #32]
 3786              	.LVL431:
3105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
 3787              		.loc 1 3105 0
 3788 0010 3440     		and	r4, r6
 3789              	.LVL432:
3106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 3790              		.loc 1 3106 0
 3791 0012 064E     		ldr	r6, .L212+4
3109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 3792              		.loc 1 3109 0
 3793 0014 1B01     		lsl	r3, r3, #4
 3794              	.LVL433:
3106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 3795              		.loc 1 3106 0
 3796 0016 3443     		orr	r4, r6
 3797              	.LVL434:
3108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_C
 3798              		.loc 1 3108 0
 3799 0018 AA26     		mov	r6, #170
 3800 001a B543     		bic	r5, r6
 3801              	.LVL435:
3109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 3802              		.loc 1 3109 0
 3803 001c 2A43     		orr	r2, r5
 3804              	.LVL436:
 3805 001e 1A43     		orr	r2, r3
 3806              	.LVL437:
3111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3807              		.loc 1 3111 0
 3808 0020 0181     		strh	r1, [r0, #8]
3116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3809              		.loc 1 3116 0
 3810              		@ sp needed for prologue
3113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3811              		.loc 1 3113 0
 3812 0022 0483     		strh	r4, [r0, #24]
3115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3813              		.loc 1 3115 0
 3814 0024 0284     		strh	r2, [r0, #32]
 3815              	.LVL438:
3116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3816              		.loc 1 3116 0
 3817 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 3818              	.L213:
 3819              		.align	2
 3820              	.L212:
 3821 0028 FCFCFFFF 		.word	-772
 3822 002c 01010000 		.word	257
 3823              		.cfi_endproc
 3824              	.LFE119:
 3826              		.section	.text.TIM_SelectHallSensor,"ax",%progbits
 3827              		.align	1
 3828              		.global	TIM_SelectHallSensor
 3829              		.code	16
 3830              		.thumb_func
 3832              	TIM_SelectHallSensor:
 3833              	.LFB120:
3127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3834              		.loc 1 3127 0
 3835              		.cfi_startproc
 3836              	.LVL439:
 3837 0000 00B5     		push	{lr}
 3838              	.LCFI28:
 3839              		.cfi_def_cfa_offset 4
 3840              		.cfi_offset 14, -4
 3841 0002 8023     		mov	r3, #128
3135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 3842              		.loc 1 3135 0
 3843 0004 8288     		ldrh	r2, [r0, #4]
3132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3844              		.loc 1 3132 0
 3845 0006 0029     		cmp	r1, #0
 3846 0008 01D0     		beq	.L215
3135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 3847              		.loc 1 3135 0
 3848 000a 1343     		orr	r3, r2
 3849 000c 01E0     		b	.L217
 3850              	.L215:
3140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 3851              		.loc 1 3140 0
 3852 000e 9A43     		bic	r2, r3
 3853 0010 131C     		mov	r3, r2
 3854              	.L217:
 3855 0012 8380     		strh	r3, [r0, #4]
3142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3856              		.loc 1 3142 0
 3857              		@ sp needed for prologue
 3858 0014 00BD     		pop	{pc}
 3859              		.cfi_endproc
 3860              	.LFE120:
 3862              		.section	.text.TIM_RemapConfig,"ax",%progbits
 3863              		.align	1
 3864              		.global	TIM_RemapConfig
 3865              		.code	16
 3866              		.thumb_func
 3868              	TIM_RemapConfig:
 3869              	.LFB121:
3173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3870              		.loc 1 3173 0
 3871              		.cfi_startproc
 3872              	.LVL440:
3179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->OR =  TIM_Remap;
 3873              		.loc 1 3179 0
 3874 0000 5030     		add	r0, r0, #80
 3875              	.LVL441:
 3876 0002 0180     		strh	r1, [r0]
3180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3877              		.loc 1 3180 0
 3878              		@ sp needed for prologue
 3879 0004 7047     		bx	lr
 3880              		.cfi_endproc
 3881              	.LFE121:
 3883              		.text
 3884              	.Letext0:
 3885              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 3886              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 3887              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
 3888              		.file 5 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_tim.c
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:18     .text.TI1_Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:22     .text.TI1_Config:00000000 TI1_Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:78     .text.TI2_Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:82     .text.TI2_Config:00000000 TI2_Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:148    .text.TI2_Config:00000030 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:153    .text.TIM_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:158    .text.TIM_DeInit:00000000 TIM_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:326    .text.TIM_DeInit:000000c8 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:338    .text.TIM_TimeBaseInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:343    .text.TIM_TimeBaseInit:00000000 TIM_TimeBaseInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:438    .text.TIM_TimeBaseInit:00000068 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:449    .text.TIM_TimeBaseStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:454    .text.TIM_TimeBaseStructInit:00000000 TIM_TimeBaseStructInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:479    .text.TIM_PrescalerConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:484    .text.TIM_PrescalerConfig:00000000 TIM_PrescalerConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:501    .text.TIM_CounterModeConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:506    .text.TIM_CounterModeConfig:00000000 TIM_CounterModeConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:530    .text.TIM_SetCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:535    .text.TIM_SetCounter:00000000 TIM_SetCounter
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:549    .text.TIM_SetAutoreload:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:554    .text.TIM_SetAutoreload:00000000 TIM_SetAutoreload
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:568    .text.TIM_GetCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:573    .text.TIM_GetCounter:00000000 TIM_GetCounter
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:588    .text.TIM_GetPrescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:593    .text.TIM_GetPrescaler:00000000 TIM_GetPrescaler
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:608    .text.TIM_UpdateDisableConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:613    .text.TIM_UpdateDisableConfig:00000000 TIM_UpdateDisableConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:644    .text.TIM_UpdateRequestConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:649    .text.TIM_UpdateRequestConfig:00000000 TIM_UpdateRequestConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:680    .text.TIM_ARRPreloadConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:685    .text.TIM_ARRPreloadConfig:00000000 TIM_ARRPreloadConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:716    .text.TIM_SelectOnePulseMode:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:721    .text.TIM_SelectOnePulseMode:00000000 TIM_SelectOnePulseMode
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:745    .text.TIM_SetClockDivision:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:750    .text.TIM_SetClockDivision:00000000 TIM_SetClockDivision
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:773    .text.TIM_SetClockDivision:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:778    .text.TIM_Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:783    .text.TIM_Cmd:00000000 TIM_Cmd
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:814    .text.TIM_BDTRConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:819    .text.TIM_BDTRConfig:00000000 TIM_BDTRConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:850    .text.TIM_BDTRStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:855    .text.TIM_BDTRStructInit:00000000 TIM_BDTRStructInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:882    .text.TIM_CtrlPWMOutputs:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:887    .text.TIM_CtrlPWMOutputs:00000000 TIM_CtrlPWMOutputs
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:921    .text.TIM_OC1Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:926    .text.TIM_OC1Init:00000000 TIM_OC1Init
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1043   .text.TIM_OC1Init:0000006c $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1052   .text.TIM_OC2Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1057   .text.TIM_OC2Init:00000000 TIM_OC2Init
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1201   .text.TIM_OC2Init:00000084 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1210   .text.TIM_OC3Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1215   .text.TIM_OC3Init:00000000 TIM_OC3Init
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1338   .text.TIM_OC3Init:00000068 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1348   .text.TIM_OC4Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1353   .text.TIM_OC4Init:00000000 TIM_OC4Init
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1443   .text.TIM_OC4Init:0000004c $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1452   .text.TIM_OCStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1457   .text.TIM_OCStructInit:00000000 TIM_OCStructInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1486   .text.TIM_SelectOCxM:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1491   .text.TIM_SelectOCxM:00000000 TIM_SelectOCxM
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1569   .text.TIM_SelectOCxM:00000048 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1574   .text.TIM_SetCompare1:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1579   .text.TIM_SetCompare1:00000000 TIM_SetCompare1
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1593   .text.TIM_SetCompare2:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1598   .text.TIM_SetCompare2:00000000 TIM_SetCompare2
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1612   .text.TIM_SetCompare3:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1617   .text.TIM_SetCompare3:00000000 TIM_SetCompare3
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1631   .text.TIM_SetCompare4:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1636   .text.TIM_SetCompare4:00000000 TIM_SetCompare4
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1650   .text.TIM_ForcedOC1Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1655   .text.TIM_ForcedOC1Config:00000000 TIM_ForcedOC1Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1679   .text.TIM_ForcedOC2Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1684   .text.TIM_ForcedOC2Config:00000000 TIM_ForcedOC2Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1712   .text.TIM_ForcedOC2Config:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1717   .text.TIM_ForcedOC3Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1722   .text.TIM_ForcedOC3Config:00000000 TIM_ForcedOC3Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1746   .text.TIM_ForcedOC4Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1751   .text.TIM_ForcedOC4Config:00000000 TIM_ForcedOC4Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1779   .text.TIM_ForcedOC4Config:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1784   .text.TIM_CCPreloadControl:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1789   .text.TIM_CCPreloadControl:00000000 TIM_CCPreloadControl
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1820   .text.TIM_OC1PreloadConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1825   .text.TIM_OC1PreloadConfig:00000000 TIM_OC1PreloadConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1849   .text.TIM_OC2PreloadConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1854   .text.TIM_OC2PreloadConfig:00000000 TIM_OC2PreloadConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1882   .text.TIM_OC2PreloadConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1887   .text.TIM_OC3PreloadConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1892   .text.TIM_OC3PreloadConfig:00000000 TIM_OC3PreloadConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1916   .text.TIM_OC4PreloadConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1921   .text.TIM_OC4PreloadConfig:00000000 TIM_OC4PreloadConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1949   .text.TIM_OC4PreloadConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1954   .text.TIM_OC1FastConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1959   .text.TIM_OC1FastConfig:00000000 TIM_OC1FastConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1983   .text.TIM_OC2FastConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:1988   .text.TIM_OC2FastConfig:00000000 TIM_OC2FastConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2016   .text.TIM_OC2FastConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2021   .text.TIM_OC3FastConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2026   .text.TIM_OC3FastConfig:00000000 TIM_OC3FastConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2050   .text.TIM_OC4FastConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2055   .text.TIM_OC4FastConfig:00000000 TIM_OC4FastConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2083   .text.TIM_OC4FastConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2088   .text.TIM_ClearOC1Ref:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2093   .text.TIM_ClearOC1Ref:00000000 TIM_ClearOC1Ref
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2117   .text.TIM_ClearOC2Ref:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2122   .text.TIM_ClearOC2Ref:00000000 TIM_ClearOC2Ref
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2150   .text.TIM_ClearOC3Ref:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2155   .text.TIM_ClearOC3Ref:00000000 TIM_ClearOC3Ref
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2179   .text.TIM_ClearOC4Ref:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2184   .text.TIM_ClearOC4Ref:00000000 TIM_ClearOC4Ref
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2212   .text.TIM_OC1PolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2217   .text.TIM_OC1PolarityConfig:00000000 TIM_OC1PolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2241   .text.TIM_OC1NPolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2246   .text.TIM_OC1NPolarityConfig:00000000 TIM_OC1NPolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2270   .text.TIM_OC2PolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2275   .text.TIM_OC2PolarityConfig:00000000 TIM_OC2PolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2302   .text.TIM_OC2NPolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2307   .text.TIM_OC2NPolarityConfig:00000000 TIM_OC2NPolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2334   .text.TIM_OC3PolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2339   .text.TIM_OC3PolarityConfig:00000000 TIM_OC3PolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2367   .text.TIM_OC3PolarityConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2372   .text.TIM_OC3NPolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2377   .text.TIM_OC3NPolarityConfig:00000000 TIM_OC3NPolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2405   .text.TIM_OC3NPolarityConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2410   .text.TIM_OC4PolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2415   .text.TIM_OC4PolarityConfig:00000000 TIM_OC4PolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2443   .text.TIM_OC4PolarityConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2448   .text.TIM_SelectOCREFClear:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2453   .text.TIM_SelectOCREFClear:00000000 TIM_SelectOCREFClear
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2477   .text.TIM_CCxCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2482   .text.TIM_CCxCmd:00000000 TIM_CCxCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2516   .text.TIM_CCxNCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2521   .text.TIM_CCxNCmd:00000000 TIM_CCxNCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2555   .text.TIM_SelectCOM:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2560   .text.TIM_SelectCOM:00000000 TIM_SelectCOM
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2591   .text.TIM_ICStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2596   .text.TIM_ICStructInit:00000000 TIM_ICStructInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2622   .text.TIM_GetCapture1:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2627   .text.TIM_GetCapture1:00000000 TIM_GetCapture1
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2642   .text.TIM_GetCapture2:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2647   .text.TIM_GetCapture2:00000000 TIM_GetCapture2
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2662   .text.TIM_GetCapture3:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2667   .text.TIM_GetCapture3:00000000 TIM_GetCapture3
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2682   .text.TIM_GetCapture4:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2687   .text.TIM_GetCapture4:00000000 TIM_GetCapture4
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2702   .text.TIM_SetIC1Prescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2707   .text.TIM_SetIC1Prescaler:00000000 TIM_SetIC1Prescaler
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2731   .text.TIM_SetIC2Prescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2736   .text.TIM_SetIC2Prescaler:00000000 TIM_SetIC2Prescaler
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2762   .text.TIM_SetIC2Prescaler:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2767   .text.TIM_PWMIConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2772   .text.TIM_PWMIConfig:00000000 TIM_PWMIConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2871   .text.TIM_SetIC3Prescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2876   .text.TIM_SetIC3Prescaler:00000000 TIM_SetIC3Prescaler
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2900   .text.TIM_SetIC4Prescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2905   .text.TIM_SetIC4Prescaler:00000000 TIM_SetIC4Prescaler
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2931   .text.TIM_SetIC4Prescaler:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2936   .text.TIM_ICInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:2941   .text.TIM_ICInit:00000000 TIM_ICInit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3124   .text.TIM_ICInit:000000ac $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3133   .text.TIM_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3138   .text.TIM_ITConfig:00000000 TIM_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3171   .text.TIM_GenerateEvent:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3176   .text.TIM_GenerateEvent:00000000 TIM_GenerateEvent
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3190   .text.TIM_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3195   .text.TIM_GetFlagStatus:00000000 TIM_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3217   .text.TIM_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3222   .text.TIM_ClearFlag:00000000 TIM_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3238   .text.TIM_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3243   .text.TIM_GetITStatus:00000000 TIM_GetITStatus
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3275   .text.TIM_ClearITPendingBit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3280   .text.TIM_ClearITPendingBit:00000000 TIM_ClearITPendingBit
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3296   .text.TIM_DMAConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3301   .text.TIM_DMAConfig:00000000 TIM_DMAConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3319   .text.TIM_DMACmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3324   .text.TIM_DMACmd:00000000 TIM_DMACmd
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3357   .text.TIM_SelectCCDMA:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3362   .text.TIM_SelectCCDMA:00000000 TIM_SelectCCDMA
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3393   .text.TIM_InternalClockConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3398   .text.TIM_InternalClockConfig:00000000 TIM_InternalClockConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3415   .text.TIM_ITRxExternalClockConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3420   .text.TIM_ITRxExternalClockConfig:00000000 TIM_ITRxExternalClockConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3453   .text.TIM_TIxExternalClockConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3458   .text.TIM_TIxExternalClockConfig:00000000 TIM_TIxExternalClockConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3521   .text.TIM_SelectInputTrigger:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3526   .text.TIM_SelectInputTrigger:00000000 TIM_SelectInputTrigger
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3550   .text.TIM_SelectOutputTrigger:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3555   .text.TIM_SelectOutputTrigger:00000000 TIM_SelectOutputTrigger
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3579   .text.TIM_SelectSlaveMode:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3584   .text.TIM_SelectSlaveMode:00000000 TIM_SelectSlaveMode
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3608   .text.TIM_SelectMasterSlaveMode:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3613   .text.TIM_SelectMasterSlaveMode:00000000 TIM_SelectMasterSlaveMode
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3637   .text.TIM_ETRConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3642   .text.TIM_ETRConfig:00000000 TIM_ETRConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3677   .text.TIM_ETRClockMode2Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3682   .text.TIM_ETRClockMode2Config:00000000 TIM_ETRClockMode2Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3711   .text.TIM_ETRClockMode1Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3716   .text.TIM_ETRClockMode1Config:00000000 TIM_ETRClockMode1Config
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3751   .text.TIM_EncoderInterfaceConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3756   .text.TIM_EncoderInterfaceConfig:00000000 TIM_EncoderInterfaceConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3821   .text.TIM_EncoderInterfaceConfig:00000028 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3827   .text.TIM_SelectHallSensor:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3832   .text.TIM_SelectHallSensor:00000000 TIM_SelectHallSensor
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3863   .text.TIM_RemapConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc0vOlu1.s:3868   .text.TIM_RemapConfig:00000000 TIM_RemapConfig
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_tim.h.181.6e67863cfbc4685fd9aa507f4a4a7010

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
