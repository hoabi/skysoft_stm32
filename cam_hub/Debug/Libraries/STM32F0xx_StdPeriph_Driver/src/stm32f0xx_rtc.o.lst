   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  18              		.align	1
  19              		.code	16
  20              		.thumb_func
  22              	RTC_ByteToBcd2:
  23              	.LFB84:
  24              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @file    stm32f0xx_rtc.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Initialization
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Alarms (Alarm A) configuration
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Daylight Saving configuration
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Output pin Configuration
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Digital Calibration configuration  
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + TimeStamp configuration
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Tampers configuration
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Backup Data Registers configuration
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Output Type Config configuration
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Shift control synchronisation  
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Interrupts and flags management
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  @verbatim
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                     ##### Backup Domain Operating Condition #####
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The real-time clock (RTC) and the RTC backup registers can be powered
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          from the VBAT voltage when the main VDD supply is powered off.
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          To retain the content of the RTC backup registers and supply the RTC 
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          when VDD is turned off, VBAT pin can be connected to an optional
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          standby voltage supplied by a battery or by another source.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] To allow the RTC to operate even when the main digital supply (VDD) 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          is turned off, the VBAT pin powers the following blocks:
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) The RTC
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) The LSE oscillator
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC13 to PC15 I/Os I/Os (when available)
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] When the backup domain is supplied by VDD (analog switch connected 
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          to VDD), the following functions are available:
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC14 and PC15 can be used as either GPIO or LSE pins
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] When the backup domain is supplied by VBAT (analog switch connected 
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          to VBAT because VDD is not present), the following functions are available:
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC14 and PC15 can be used as LSE pins only
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC13 can be used as the RTC_AF1 pin 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                      ##### Backup Domain Reset #####
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The backup domain reset sets all RTC registers and the RCC_BDCR 
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          register to their reset values. 
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          A backup domain reset is generated when one of the following events
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          occurs:
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) Software reset, triggered by setting the BDRST bit in the 
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                RCC Backup domain control register (RCC_BDCR). You can use the
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                RCC_BackupResetCmd().
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) VDD or VBAT power on, if both supplies have previously been
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                powered off.
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                      ##### Backup Domain Access #####
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] After reset, the backup domain (RTC registers and RTC backup data 
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          registers) is protected against possible unwanted write accesses. 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] To enable access to the Backup Domain and RTC registers, proceed as follows:
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Enable the Power Controller (PWR) APB1 interface clock using the
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              RCC_APB1PeriphClockCmd() function.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Enable access to Backup domain using the PWR_BackupAccessCmd() function.
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                                                            
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                      ##### How to use this driver #####
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the backup domain access (see description in the section above)
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC hour format using the RTC_Init() function.
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Time and Date configuration ***
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ==================================
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****      [..]
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             and RTC_SetDate() functions.
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             functions.
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC subsecond, use the RTC_GetSubSecond() function.
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             hour to the RTC Calendar.
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Alarm configuration ***
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ========================== 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****      [..]  
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function  
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***RTC Wakeup configuration***
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ========================== 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function  
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Outputs configuration ***
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ============================
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC has 2 different outputs:
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) AFO_ALARM: this output is used to manage the RTC Alarm A.
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             To output the selected RTC signal on RTC_AF1 pin, use the 
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_OutputConfig() function.                
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) AFO_CALIB: this output is 512Hz signal or 1Hz .
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.                
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Original Digital Calibration configuration ***
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  =================================    
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] Configure the RTC Original Digital Calibration Value and the corresponding
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig()
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          function.
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***TimeStamp configuration ***
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ==============================
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             using the RTC_TimeStampCmd() function.
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC TimeStamp Time and Date register, use the 
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_GetTimeStamp() function.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC TimeStamp SubSecond register, use the 
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_GetTimeStampSubSecond() function.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Tamper configuration ***
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===========================
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]   
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function. 
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the Tamper precharge or discharge duration using 
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_TamperPinsPrechargeDuration() function.
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the Time stamp on Tamper detection event using  
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_TSOnTamperDetecCmd() function.     
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Backup Data Registers configuration ***
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ==========================================
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.  
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.  
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                        ##### RTC and low power modes #####
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The MCU can be woken up from a low power mode by an RTC alternate 
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          function.
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC alternate functions are the RTC alarm (Alarm A), RTC tamper 
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          event detection and RTC time stamp event detection.
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          These RTC alternate functions can wake up the system from the Stop 
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          and Standby lowpower modes.
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          The system can also wake up from low power modes without depending 
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          on an external interrupt (Auto-wakeup mode), by using the RTC alarm events.
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC provides a programmable time base for waking up from the 
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Stop or Standby mode at regular intervals.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Wakeup from STOP and Standby modes is possible only when the RTC 
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          clock source is LSE or LSI.
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                ##### Selection of RTC_AF1 alternate functions #####
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFO_ALARM output
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFO_CALIB output
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFI_TAMPER
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFI_TIMESTAMP
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    +------------------------------------------------------------------------------------------+
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | WKUP2  |ALARMOUTTYPE  |
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |ENABLED |  AFO_ALARM   |
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  and function   |          |          |           |              |        |Configuration |
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   Alarm out     |          |          |           |              | Don't  |              |
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   output OD     |     1    |    0     |Don't care | Don't care   | care   |      0       |
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   Alarm out     |          |          |           |              | Don't  |              |
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   output PP     |     1    |    0     |Don't care | Don't care   | care   |      1       |
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    | Calibration out |          |          |           |              | Don't  |              |
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   | care   |  Don't care  |
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  TAMPER input   |          |          |           |              | Don't  |              |
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       | care   |  Don't care  |
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              | Don't  |              |
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       | care   |  Don't care  |
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   floating      |          |          |           |              |        |              |
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    | TIMESTAMP input |          |          |           |              | Don't  |              |
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       | care   |  Don't care  |
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  Wakeup Pin 2   |     0    |    0     |     0     |      0       |   1    |  Don't care  |
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       |   0    |  Don't care  |
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    +------------------------------------------------------------------------------------------+
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  @endverbatim
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ******************************************************************************
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @attention
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * You may not use this file except in compliance with the License.
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * You may obtain a copy of the License at:
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * See the License for the specific language governing permissions and
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * limitations under the License.
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ******************************************************************************
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #include "stm32f0xx_rtc.h"
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC 
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief RTC driver modules
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Masks Definition */
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_ALRAF | \
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS |RTC_FLAG_INITF | \
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                             RTC_FLAG_TAMP1F | RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | 
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                             RTC_FLAG_SHPF))
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00004000)
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00008000)
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00001000)
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Private_Functions
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */ 
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### Initialization and Configuration functions #####
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to initialize and configure the RTC
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Write protection, enter and exit the RTC initialization mode, RTC registers
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          synchronization check and reference clock detection enable.
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   asynchronous prescaler to a high value to minimize consumption.
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) To Configure the RTC Calendar, user application should enter
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              and its value can be updated. When the initialization sequence is
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              the software must first clear the RSF flag. The software must then
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              wait until it is set again before reading the calendar, which means
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              that the calendar registers have been correctly copied into the
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              RTC_TR and RTC_DR shadow registers.The RTC_WaitForSynchro() function
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         registers.       
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset TR, DR and CR registers */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR        = (uint32_t)0x00000000;
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WUTR      = (uint32_t)0x0000FFFF;
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR        = (uint32_t)0x00002101;
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR        &= (uint32_t)0x00000000;
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER      = (uint32_t)0x007F00FF;
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMAR    = (uint32_t)0x00000000;
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->SHIFTR    = (uint32_t)0x00000000;
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR       = (uint32_t)0x00000000;
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMASSR  = (uint32_t)0x00000000;
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset ISR register and exit initialization mode */
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)0x00000000;
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR = 0x00000000;
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till the RTC RSF flag is set */
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (RTC_WaitForSynchro() == ERROR)
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;  
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         in RTC_InitStruct.
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialization mode only.  
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set RTC_CR register */
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the RTC PRER */
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialized.
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the write protection.
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the write protection for RTC registers */
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the write protection for RTC registers */
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC is not in Init mode
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t initstatus = 0x00;
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check if the Initialization mode is set */
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the Initialization mode */
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initcounter++;  
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (status);
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ExitInitMode(void)
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Exit Initialization mode */
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         synchronized with RTC APB clock.
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         the software must first clear the RSF flag. 
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Bypass shadow mode */
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the write protection for RTC registers */
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Clear RSF flag */
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait the registers to be synchronised */
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrostatus = RTC->ISR & RTC_ISR_RSF;
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrocounter++;  
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the write protection for RTC registers */
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (status);
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (NewState != DISABLE)
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       /* Enable the RTC reference clock detection */
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       /* Disable the RTC reference clock detection */
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         directly from the Calendar counter.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the BYPSHAD bit */
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset the BYPSHAD bit */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Time and Date configuration functions
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                ##### Time and Date configuration functions #####
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  This section provide functions allowing to program and read the RTC
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           Calendar (Time and Date).
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Set the RTC current time.
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be  one of the following values:
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                        the time configuration information for the RTC.
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the RTC_TR register */
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       else
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialized.
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Time = 00h:00min:00sec */
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC current Time.
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be  one of the following values:
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                        contain the returned current time configuration.
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_TR register */
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         SSR register.
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   (void) (RTC->DR);
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (tmpreg);
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Set the RTC current date.
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be  one of the following values:
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                         the date configuration information for the RTC.
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the RTC_DR register */
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       else
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         (Monday, January 01 xx00).
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialized.
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Monday, January 01 xx00 */
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC current date.
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                        contain the returned current date configuration.
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_TR register */
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Alarms (Alarm A) configuration functions 
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          ##### Alarms (Alarm A and Alarm B) configuration functions #####
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to program and read the RTC 
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Alarms.
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                          contains the alarm configuration parameters.
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }    
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Alarm register */
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMAR = (uint32_t)tmpreg;
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         all fields are masked).
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         will be initialized.
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                          contains the output alarm configuration values.
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_ALRMAR register */
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ALRMAR);
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the structure with the read parameters */
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Alarm state */
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   { 
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmcounter++;  
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }        
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be a value from 0 to 0x00007FFF.
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_All: All Alarm SS fields are masked.
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                             There is no comparison on sub seconds for Alarm.
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_1: SS[14:1] are don't care in Alarm comparison.
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[0] is compared
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_2: SS[14:2] are don't care in Alarm comparison.
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[1:0] are compared
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_3: SS[14:3] are don't care in Alarm comparison.
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[2:0] are compared
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_4: SS[14:4] are don't care in Alarm comparison.
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[3:0] are compared
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_5: SS[14:5] are don't care in Alarm comparison.
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[4:0] are compared
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_6: SS[14:6] are don't care in Alarm comparison.
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[5:0] are compared
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_7: SS[14:7] are don't care in Alarm comparison.
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[6:0] are compared
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_8: SS[14:8] are don't care in Alarm comparison.
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[7:0] are compared
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_9: SS[14:9] are don't care in Alarm comparison.
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[8:0] are compared
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[9:0] are compared
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[10:0] are compared
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[11:0] are compared
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[12:0] are compared
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14: SS[14] is don't care in Alarm comparison.
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                              Only SS[13:0] are compared
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_None: SS[14:0] are compared and must match to activate a
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint8_t RTC_Ala
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) 
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the AlarmA SubSecond register */
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMASSR = tmpreg;
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_ALRMAR register */
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (tmpreg);
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### WakeUp Timer configuration functions #####
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to program and read the RTC WakeUp.
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the clock source */
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the counter value */
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the Wakeup Timer */
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the Wakeup Timer */
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutcounter++;  
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }    
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                ##### WakeUp Timer configuration functions #####
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to program and read the RTC WakeUp. 
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                             in CR register to store the operation.
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the bits to be configured */
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_CR register */
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - RTC_StoreOperation_Set
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Output pin Configuration function 
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   ##### Output pin Configuration function #####
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to configure the RTC Output source.
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output, available only for STM32F
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following:
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                          ALRAF is high (depending on OSEL)
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                         ALRAF is high (depending on OSEL)
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the bits to be configured */
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the output selection and polarity */
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Digital Calibration configuration functions 
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### Digital Calibration configuration functions #####
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the RTC clock output */
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   { 
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the RTC clock output */
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_CalibOutput: Select the Calibration output Selection .
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_CalibOutput_1Hz: A signal has a regular waveform at 1Hz.
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /*clear flags before config*/
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_CR register */
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod: Select the Smooth Calibration Period.
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be can be one of the following values:
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_32sec: The smooth calibration periode is 32s.
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_16sec: The smooth calibration periode is 16s.
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_8sec: The smooth calibartion periode is 8s.
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses: Select to Set or reset the CALP bit.
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPlusPulses_Set: Add one RTCCLK puls every 2**11 pulses.
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one any value from 0 to 0x000001FF.
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t recalpfcount = 0;
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* check if a calibration is pending*/
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* wait until the Calibration is completed*/
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       recalpfcount++;
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Smooth calibration settings */
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (ErrorStatus)(status);
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### TimeStamp configuration functions #####
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
1765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         activated.
1775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following:
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           edge of the related pin.
1778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                            falling edge of the related pin.
1780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the new configuration */
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                             contains the TimeStamp time values. 
1824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                             contains the TimeStamp date values.     
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
1829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
1832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
1845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
1851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
1869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
1871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
1883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Tampers configuration functions 
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### Tampers configuration functions #####
1888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
1889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
1896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_1: Select Tamper 1.
1899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_2: Select Tamper 2.
1900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
1901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                            stimulates tamper event. 
1902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event
1904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper eve
1905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
1906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
1907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
1914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {  
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
1919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   { 
1922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
1924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
1929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_1: Select Tamper 1.
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_2: Select Tamper 2.
1933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
1934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.                   
1935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
1941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the selected Tamper pin */
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the selected Tamper pin */
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
1952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Tampers Filter.
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
1958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
1960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           samples at the active level 
1962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
1963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           samples at the active level
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
1965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           samples at the active level 
1966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
1972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
1973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
1975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_TAFCR register */
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
1982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
1983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
1985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                         with a frequency =  RTCCLK / 32768
1986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
1987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                         with a frequency =  RTCCLK / 16384
1988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 8192
1990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
1991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 4096
1992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
1993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 2048
1994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
1995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 1024
1996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                       with a frequency =  RTCCLK / 512  
1998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
1999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                       with a frequency =  RTCCLK / 256  
2000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         Precharge Duration.
2018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before samplin
2020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before samplin
2021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before samplin
2022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before samplin
2023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
2030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is reset.   
2041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Save timestamp on tamper detection event */
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  if (NewState != DISABLE)
2074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### Backup Data Registers configuration functions ##### 
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 4 to 
2105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                 specify the register.
2106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Write the specified register */
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                          specify the register.                   
2128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
2133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Read the specified register */
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group11 Output Type Config configuration functions
2149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Output Type Config configuration functions  
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ##### Output Type Config configuration functions ##### 
2154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                    Open Drain mode.
2166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                    Push Pull mode.    
2168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### Shift control synchronisation functions #####
2189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_ShiftAdd1S: Select to add or not 1 second to the time Calendar.
2199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values :
2200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_ShiftAdd1S_Set: Add one second to the clock calendar. 
2201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_ShiftAdd1S_Reset: No effect.
2202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
2208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
2211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t shpfcount = 0;
2212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
2220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check if a Shift is pending*/
2222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait until the shift is completed*/
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
2227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       shpfcount++;
2228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
2229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* check if the reference clock detection is disabled */
2235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
2237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       /* Configure the Shift settings */
2238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
2243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
2244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       else
2245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
2246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
2247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
2248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
2249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
2250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
2251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
2252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
2253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
2257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
2261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (ErrorStatus)(status);
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### Interrupts and flags management functions #####
2275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] All RTC interrupts are connected to the EXTI controller.
2277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) To enable the RTC Alarm interrupt, the following sequence is required:
2279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   edge sensitivity using the EXTI_Init() function.
2281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   function.
2283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure the RTC to generate RTC alarms (Alarm A) using
2284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) To enable the RTC Tamper interrupt, the following sequence is required:
2287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the EXTI Line 19 in interrupt mode and select the rising 
2288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   edge sensitivity using the EXTI_Init() function.
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   function.
2291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure the RTC to detect the RTC tamper event using the 
2292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the EXTI Line 19 in interrupt mode and select the rising 
2296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   edge sensitivity using the EXTI_Init() function.
2297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   function.
2299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure the RTC to detect the RTC time-stamp event using the 
2300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   RTC_TimeStampCmd() functions.
2301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
2310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask, available only for STM32F072 devices 
2312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
2327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
2329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
2343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
2344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag
2351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag   
2352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag, available only for STM32F072 devices  
2356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   FlagStatus bitstatus = RESET;
2365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
2366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get all the flags */
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Return the status of the flag */
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = SET;
2377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = RESET;
2381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return bitstatus;
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
2389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag 
2391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag, available only for STM32F072 devices  
2394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR &
2405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt
2412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt, available only for STM32F072 devices
2413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper1 event interrupt 
2415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper2 event interrupt 
2416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ITStatus bitstatus = RESET;
2421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the Interrupt enable Status */
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
2431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the Interrupt pending bit */
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the status of the Interrupt */
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = SET;
2439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = RESET;
2443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return bitstatus;
2445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
2451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt, available only for STM32F072 devices
2453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper1 event interrupt
2455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper2 event interrupt
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
2461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  Value: Byte to be converted.
2479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval Converted byte
2480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
  25              		.loc 1 2482 0
  26              		.cfi_startproc
  27              	.LVL0:
  28 0000 00B5     		push	{lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 4
  31              		.cfi_offset 14, -4
2483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint8_t bcdhigh = 0;
  32              		.loc 1 2483 0
  33 0002 0023     		mov	r3, #0
2484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   while (Value >= 10)
  34              		.loc 1 2485 0
  35 0004 03E0     		b	.L2
  36              	.LVL1:
  37              	.L3:
2486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bcdhigh++;
  38              		.loc 1 2487 0
  39 0006 0133     		add	r3, r3, #1
  40              	.LVL2:
2488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     Value -= 10;
  41              		.loc 1 2488 0
  42 0008 0A38     		sub	r0, r0, #10
  43              	.LVL3:
2487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bcdhigh++;
  44              		.loc 1 2487 0
  45 000a DBB2     		uxtb	r3, r3
  46              	.LVL4:
  47              		.loc 1 2488 0
  48 000c C0B2     		uxtb	r0, r0
  49              	.LVL5:
  50              	.L2:
2485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   while (Value >= 10)
  51              		.loc 1 2485 0 discriminator 1
  52 000e 0928     		cmp	r0, #9
  53 0010 F9D8     		bhi	.L3
2489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  54              		.loc 1 2491 0
  55 0012 1B01     		lsl	r3, r3, #4
  56              	.LVL6:
  57 0014 1843     		orr	r0, r3
  58              	.LVL7:
  59 0016 C0B2     		uxtb	r0, r0
2492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
  60              		.loc 1 2492 0
  61              		@ sp needed for prologue
  62 0018 00BD     		pop	{pc}
  63              		.cfi_endproc
  64              	.LFE84:
  66              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  67              		.align	1
  68              		.code	16
  69              		.thumb_func
  71              	RTC_Bcd2ToByte:
  72              	.LFB85:
2493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  Value: BCD value to be converted.
2497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval Converted word
2498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
  73              		.loc 1 2500 0
  74              		.cfi_startproc
  75              	.LVL8:
2501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint8_t tmp = 0;
2502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  76              		.loc 1 2502 0
  77 0000 0309     		lsr	r3, r0, #4
  78 0002 0A22     		mov	r2, #10
  79 0004 5343     		mul	r3, r2
2503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  80              		.loc 1 2503 0
  81 0006 0F22     		mov	r2, #15
  82 0008 1040     		and	r0, r2
  83              	.LVL9:
  84 000a 1818     		add	r0, r3, r0
  85 000c C0B2     		uxtb	r0, r0
2504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
  86              		.loc 1 2504 0
  87              		@ sp needed for prologue
  88 000e 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE85:
  92              		.section	.text.RTC_StructInit,"ax",%progbits
  93              		.align	1
  94              		.global	RTC_StructInit
  95              		.code	16
  96              		.thumb_func
  98              	RTC_StructInit:
  99              	.LFB35:
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 100              		.loc 1 428 0
 101              		.cfi_startproc
 102              	.LVL10:
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 103              		.loc 1 436 0
 104 0000 0021     		mov	r1, #0
 105 0002 7F22     		mov	r2, #127
 106 0004 FF23     		mov	r3, #255
 107 0006 0EC0     		stmia	r0!, {r1, r2, r3}
 108              	.LVL11:
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 109              		.loc 1 437 0
 110              		@ sp needed for prologue
 111 0008 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE35:
 115              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 116              		.align	1
 117              		.global	RTC_WriteProtectionCmd
 118              		.code	16
 119              		.thumb_func
 121              	RTC_WriteProtectionCmd:
 122              	.LFB36:
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 123              		.loc 1 450 0
 124              		.cfi_startproc
 125              	.LVL12:
 126 0000 00B5     		push	{lr}
 127              	.LCFI1:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 14, -4
 130 0002 044B     		ldr	r3, .L10
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 131              		.loc 1 457 0
 132 0004 FF22     		mov	r2, #255
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 133              		.loc 1 454 0
 134 0006 0028     		cmp	r0, #0
 135 0008 02D1     		bne	.L9
 136              	.L7:
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 137              		.loc 1 462 0
 138 000a CA22     		mov	r2, #202
 139 000c 5A62     		str	r2, [r3, #36]
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 140              		.loc 1 463 0
 141 000e 5322     		mov	r2, #83
 142              	.L9:
 143 0010 5A62     		str	r2, [r3, #36]
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 144              		.loc 1 465 0
 145              		@ sp needed for prologue
 146 0012 00BD     		pop	{pc}
 147              	.L11:
 148              		.align	2
 149              	.L10:
 150 0014 00280040 		.word	1073752064
 151              		.cfi_endproc
 152              	.LFE36:
 154              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 155              		.align	1
 156              		.global	RTC_EnterInitMode
 157              		.code	16
 158              		.thumb_func
 160              	RTC_EnterInitMode:
 161              	.LFB37:
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 162              		.loc 1 477 0
 163              		.cfi_startproc
 164 0000 13B5     		push	{r0, r1, r4, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 16
 167              		.cfi_offset 0, -16
 168              		.cfi_offset 1, -12
 169              		.cfi_offset 4, -8
 170              		.cfi_offset 14, -4
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 171              		.loc 1 478 0
 172 0002 0023     		mov	r3, #0
 173 0004 0193     		str	r3, [sp, #4]
 174              	.LVL13:
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 175              		.loc 1 483 0
 176 0006 0C4B     		ldr	r3, .L21
 177 0008 4022     		mov	r2, #64
 178 000a D968     		ldr	r1, [r3, #12]
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 179              		.loc 1 506 0
 180 000c 0120     		mov	r0, #1
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 181              		.loc 1 483 0
 182 000e 1142     		tst	r1, r2
 183 0010 10D1     		bne	.L13
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 184              		.loc 1 486 0
 185 0012 4142     		neg	r1, r0
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 186              		.loc 1 493 0
 187 0014 8020     		mov	r0, #128
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 188              		.loc 1 486 0
 189 0016 D960     		str	r1, [r3, #12]
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 190              		.loc 1 493 0
 191 0018 C001     		lsl	r0, r0, #7
 192              	.LVL14:
 193              	.L15:
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 194              		.loc 1 491 0 discriminator 1
 195 001a D968     		ldr	r1, [r3, #12]
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initcounter++;  
 196              		.loc 1 492 0 discriminator 1
 197 001c 019C     		ldr	r4, [sp, #4]
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 198              		.loc 1 491 0 discriminator 1
 199 001e 1140     		and	r1, r2
 200              	.LVL15:
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initcounter++;  
 201              		.loc 1 492 0 discriminator 1
 202 0020 0134     		add	r4, r4, #1
 203              	.LVL16:
 204 0022 0194     		str	r4, [sp, #4]
 205              	.LVL17:
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 206              		.loc 1 493 0 discriminator 1
 207 0024 019C     		ldr	r4, [sp, #4]
 208              	.LVL18:
 209 0026 8442     		cmp	r4, r0
 210 0028 01D0     		beq	.L14
 211 002a 0029     		cmp	r1, #0
 212 002c F5D0     		beq	.L15
 213              	.L14:
 214              	.LBB4:
 215              	.LBB5:
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 216              		.loc 1 495 0
 217 002e D868     		ldr	r0, [r3, #12]
 218 0030 4006     		lsl	r0, r0, #25
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 219              		.loc 1 497 0
 220 0032 C00F     		lsr	r0, r0, #31
 221              	.LVL19:
 222              	.L13:
 223              	.LBE5:
 224              	.LBE4:
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 225              		.loc 1 510 0
 226              		@ sp needed for prologue
 227 0034 16BD     		pop	{r1, r2, r4, pc}
 228              	.L22:
 229 0036 C046     		.align	2
 230              	.L21:
 231 0038 00280040 		.word	1073752064
 232              		.cfi_endproc
 233              	.LFE37:
 235              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 236              		.align	1
 237              		.global	RTC_ExitInitMode
 238              		.code	16
 239              		.thumb_func
 241              	RTC_ExitInitMode:
 242              	.LFB38:
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 243              		.loc 1 522 0
 244              		.cfi_startproc
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 245              		.loc 1 524 0
 246 0000 024B     		ldr	r3, .L24
 247 0002 8021     		mov	r1, #128
 248 0004 DA68     		ldr	r2, [r3, #12]
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 249              		.loc 1 525 0
 250              		@ sp needed for prologue
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 251              		.loc 1 524 0
 252 0006 8A43     		bic	r2, r1
 253 0008 DA60     		str	r2, [r3, #12]
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 254              		.loc 1 525 0
 255 000a 7047     		bx	lr
 256              	.L25:
 257              		.align	2
 258              	.L24:
 259 000c 00280040 		.word	1073752064
 260              		.cfi_endproc
 261              	.LFE38:
 263              		.section	.text.RTC_Init,"ax",%progbits
 264              		.align	1
 265              		.global	RTC_Init
 266              		.code	16
 267              		.thumb_func
 269              	RTC_Init:
 270              	.LFB34:
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 271              		.loc 1 382 0
 272              		.cfi_startproc
 273              	.LVL20:
 274 0000 38B5     		push	{r3, r4, r5, lr}
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 16
 277              		.cfi_offset 3, -16
 278              		.cfi_offset 4, -12
 279              		.cfi_offset 5, -8
 280              		.cfi_offset 14, -4
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 281              		.loc 1 391 0
 282 0002 104C     		ldr	r4, .L30
 283 0004 CA23     		mov	r3, #202
 284 0006 6362     		str	r3, [r4, #36]
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 285              		.loc 1 392 0
 286 0008 5323     		mov	r3, #83
 287 000a 6362     		str	r3, [r4, #36]
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 288              		.loc 1 382 0
 289 000c 051C     		mov	r5, r0
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 290              		.loc 1 395 0
 291 000e FFF7FEFF 		bl	RTC_EnterInitMode
 292              	.LVL21:
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 293              		.loc 1 397 0
 294 0012 0023     		mov	r3, #0
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 295              		.loc 1 395 0
 296 0014 9842     		cmp	r0, r3
 297 0016 11D0     		beq	.L27
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 298              		.loc 1 402 0
 299 0018 A368     		ldr	r3, [r4, #8]
 300 001a 4022     		mov	r2, #64
 301 001c 9343     		bic	r3, r2
 302 001e A360     		str	r3, [r4, #8]
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 303              		.loc 1 404 0
 304 0020 A368     		ldr	r3, [r4, #8]
 305 0022 2A68     		ldr	r2, [r5]
 306 0024 1343     		orr	r3, r2
 307 0026 A360     		str	r3, [r4, #8]
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 308              		.loc 1 407 0
 309 0028 AB68     		ldr	r3, [r5, #8]
 310 002a 2361     		str	r3, [r4, #16]
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 311              		.loc 1 408 0
 312 002c 6B68     		ldr	r3, [r5, #4]
 313 002e 2269     		ldr	r2, [r4, #16]
 314 0030 1B04     		lsl	r3, r3, #16
 315 0032 1343     		orr	r3, r2
 316 0034 2361     		str	r3, [r4, #16]
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 317              		.loc 1 411 0
 318 0036 FFF7FEFF 		bl	RTC_ExitInitMode
 319              	.LVL22:
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 320              		.loc 1 413 0
 321 003a 0123     		mov	r3, #1
 322              	.LVL23:
 323              	.L27:
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 324              		.loc 1 416 0
 325 003c FF22     		mov	r2, #255
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 326              		.loc 1 419 0
 327 003e 181C     		mov	r0, r3
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 328              		.loc 1 416 0
 329 0040 6262     		str	r2, [r4, #36]
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 330              		.loc 1 419 0
 331              		@ sp needed for prologue
 332              	.LVL24:
 333 0042 38BD     		pop	{r3, r4, r5, pc}
 334              	.L31:
 335              		.align	2
 336              	.L30:
 337 0044 00280040 		.word	1073752064
 338              		.cfi_endproc
 339              	.LFE34:
 341              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 342              		.align	1
 343              		.global	RTC_WaitForSynchro
 344              		.code	16
 345              		.thumb_func
 347              	RTC_WaitForSynchro:
 348              	.LFB39:
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 349              		.loc 1 544 0
 350              		.cfi_startproc
 351 0000 13B5     		push	{r0, r1, r4, lr}
 352              	.LCFI4:
 353              		.cfi_def_cfa_offset 16
 354              		.cfi_offset 0, -16
 355              		.cfi_offset 1, -12
 356              		.cfi_offset 4, -8
 357              		.cfi_offset 14, -4
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 358              		.loc 1 545 0
 359 0002 0023     		mov	r3, #0
 360 0004 0193     		str	r3, [sp, #4]
 361              	.LVL25:
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 362              		.loc 1 549 0
 363 0006 104B     		ldr	r3, .L41
 364 0008 2022     		mov	r2, #32
 365 000a 9968     		ldr	r1, [r3, #8]
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 366              		.loc 1 552 0
 367 000c 0120     		mov	r0, #1
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 368              		.loc 1 549 0
 369 000e 1142     		tst	r1, r2
 370 0010 18D1     		bne	.L33
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 371              		.loc 1 557 0
 372 0012 CA21     		mov	r1, #202
 373 0014 5962     		str	r1, [r3, #36]
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 374              		.loc 1 558 0
 375 0016 5321     		mov	r1, #83
 376 0018 5962     		str	r1, [r3, #36]
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 377              		.loc 1 561 0
 378 001a D968     		ldr	r1, [r3, #12]
 379 001c A020     		mov	r0, #160
 380 001e 8143     		bic	r1, r0
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 381              		.loc 1 568 0
 382 0020 8020     		mov	r0, #128
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 383              		.loc 1 561 0
 384 0022 D960     		str	r1, [r3, #12]
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 385              		.loc 1 568 0
 386 0024 0002     		lsl	r0, r0, #8
 387              	.LVL26:
 388              	.L35:
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrostatus = RTC->ISR & RTC_ISR_RSF;
 389              		.loc 1 566 0 discriminator 1
 390 0026 D968     		ldr	r1, [r3, #12]
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrocounter++;  
 391              		.loc 1 567 0 discriminator 1
 392 0028 019C     		ldr	r4, [sp, #4]
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrostatus = RTC->ISR & RTC_ISR_RSF;
 393              		.loc 1 566 0 discriminator 1
 394 002a 1140     		and	r1, r2
 395              	.LVL27:
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrocounter++;  
 396              		.loc 1 567 0 discriminator 1
 397 002c 0134     		add	r4, r4, #1
 398              	.LVL28:
 399 002e 0194     		str	r4, [sp, #4]
 400              	.LVL29:
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 401              		.loc 1 568 0 discriminator 1
 402 0030 019C     		ldr	r4, [sp, #4]
 403              	.LVL30:
 404 0032 8442     		cmp	r4, r0
 405 0034 01D0     		beq	.L34
 406 0036 0029     		cmp	r1, #0
 407 0038 F5D0     		beq	.L35
 408              	.L34:
 409              	.LBB8:
 410              	.LBB9:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 411              		.loc 1 570 0
 412 003a D868     		ldr	r0, [r3, #12]
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 413              		.loc 1 580 0
 414 003c FF22     		mov	r2, #255
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 415              		.loc 1 570 0
 416 003e 8006     		lsl	r0, r0, #26
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 417              		.loc 1 572 0
 418 0040 C00F     		lsr	r0, r0, #31
 419              	.LVL31:
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 420              		.loc 1 580 0
 421 0042 5A62     		str	r2, [r3, #36]
 422              	.LVL32:
 423              	.L33:
 424              	.LBE9:
 425              	.LBE8:
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 426              		.loc 1 584 0
 427              		@ sp needed for prologue
 428 0044 16BD     		pop	{r1, r2, r4, pc}
 429              	.L42:
 430 0046 C046     		.align	2
 431              	.L41:
 432 0048 00280040 		.word	1073752064
 433              		.cfi_endproc
 434              	.LFE39:
 436              		.section	.text.RTC_DeInit,"ax",%progbits
 437              		.align	1
 438              		.global	RTC_DeInit
 439              		.code	16
 440              		.thumb_func
 442              	RTC_DeInit:
 443              	.LFB33:
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 444              		.loc 1 321 0
 445              		.cfi_startproc
 446              	.LVL33:
 447 0000 10B5     		push	{r4, lr}
 448              	.LCFI5:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 4, -8
 451              		.cfi_offset 14, -4
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 452              		.loc 1 325 0
 453 0002 104C     		ldr	r4, .L47
 454 0004 CA23     		mov	r3, #202
 455 0006 6362     		str	r3, [r4, #36]
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 456              		.loc 1 326 0
 457 0008 5323     		mov	r3, #83
 458 000a 6362     		str	r3, [r4, #36]
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 459              		.loc 1 329 0
 460 000c FFF7FEFF 		bl	RTC_EnterInitMode
 461              	.LVL34:
 462 0010 031C     		mov	r3, r0
 463 0012 0020     		mov	r0, #0
 464 0014 8342     		cmp	r3, r0
 465 0016 12D0     		beq	.L44
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WUTR      = (uint32_t)0x0000FFFF;
 466              		.loc 1 337 0
 467 0018 0B4B     		ldr	r3, .L47+4
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR        = (uint32_t)0x00000000;
 468              		.loc 1 336 0
 469 001a 2060     		str	r0, [r4]
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WUTR      = (uint32_t)0x0000FFFF;
 470              		.loc 1 337 0
 471 001c 6361     		str	r3, [r4, #20]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR        = (uint32_t)0x00002101;
 472              		.loc 1 338 0
 473 001e 0B4B     		ldr	r3, .L47+8
 474 0020 6360     		str	r3, [r4, #4]
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR        &= (uint32_t)0x00000000;
 475              		.loc 1 339 0
 476 0022 A368     		ldr	r3, [r4, #8]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER      = (uint32_t)0x007F00FF;
 477              		.loc 1 340 0
 478 0024 0A4B     		ldr	r3, .L47+12
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR        &= (uint32_t)0x00000000;
 479              		.loc 1 339 0
 480 0026 A060     		str	r0, [r4, #8]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER      = (uint32_t)0x007F00FF;
 481              		.loc 1 340 0
 482 0028 2361     		str	r3, [r4, #16]
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMAR    = (uint32_t)0x00000000;
 483              		.loc 1 341 0
 484 002a E061     		str	r0, [r4, #28]
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->SHIFTR    = (uint32_t)0x00000000;
 485              		.loc 1 342 0
 486 002c E062     		str	r0, [r4, #44]
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR       = (uint32_t)0x00000000;
 487              		.loc 1 343 0
 488 002e E063     		str	r0, [r4, #60]
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMASSR  = (uint32_t)0x00000000;
 489              		.loc 1 344 0
 490 0030 6064     		str	r0, [r4, #68]
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)0x00000000;
 491              		.loc 1 347 0
 492 0032 E060     		str	r0, [r4, #12]
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR = 0x00000000;
 493              		.loc 1 350 0
 494 0034 2064     		str	r0, [r4, #64]
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (RTC_WaitForSynchro() == ERROR)
 495              		.loc 1 353 0
 496 0036 FFF7FEFF 		bl	RTC_WaitForSynchro
 497              	.LVL35:
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 498              		.loc 1 331 0
 499 003a 431E     		sub	r3, r0, #1
 500 003c 9841     		sbc	r0, r0, r3
 501              	.L44:
 502              	.LVL36:
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;  
 503              		.loc 1 365 0
 504 003e FF23     		mov	r3, #255
 505 0040 6362     		str	r3, [r4, #36]
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 506              		.loc 1 368 0
 507              		@ sp needed for prologue
 508 0042 10BD     		pop	{r4, pc}
 509              	.L48:
 510              		.align	2
 511              	.L47:
 512 0044 00280040 		.word	1073752064
 513 0048 FFFF0000 		.word	65535
 514 004c 01210000 		.word	8449
 515 0050 FF007F00 		.word	8323327
 516              		.cfi_endproc
 517              	.LFE33:
 519              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 520              		.align	1
 521              		.global	RTC_RefClockCmd
 522              		.code	16
 523              		.thumb_func
 525              	RTC_RefClockCmd:
 526              	.LFB40:
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 527              		.loc 1 595 0
 528              		.cfi_startproc
 529              	.LVL37:
 530 0000 38B5     		push	{r3, r4, r5, lr}
 531              	.LCFI6:
 532              		.cfi_def_cfa_offset 16
 533              		.cfi_offset 3, -16
 534              		.cfi_offset 4, -12
 535              		.cfi_offset 5, -8
 536              		.cfi_offset 14, -4
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 537              		.loc 1 602 0
 538 0002 0D4C     		ldr	r4, .L56
 539 0004 CA23     		mov	r3, #202
 540 0006 6362     		str	r3, [r4, #36]
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 541              		.loc 1 603 0
 542 0008 5323     		mov	r3, #83
 543 000a 6362     		str	r3, [r4, #36]
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 544              		.loc 1 595 0
 545 000c 051C     		mov	r5, r0
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 546              		.loc 1 606 0
 547 000e FFF7FEFF 		bl	RTC_EnterInitMode
 548              	.LVL38:
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 549              		.loc 1 608 0
 550 0012 0023     		mov	r3, #0
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 551              		.loc 1 606 0
 552 0014 9842     		cmp	r0, r3
 553 0016 0BD0     		beq	.L50
 554 0018 1023     		mov	r3, #16
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;
 555              		.loc 1 615 0
 556 001a A268     		ldr	r2, [r4, #8]
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (NewState != DISABLE)
 557              		.loc 1 612 0
 558 001c 002D     		cmp	r5, #0
 559 001e 01D0     		beq	.L51
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;
 560              		.loc 1 615 0
 561 0020 1343     		orr	r3, r2
 562 0022 01E0     		b	.L55
 563              	.L51:
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;
 564              		.loc 1 620 0
 565 0024 9A43     		bic	r2, r3
 566 0026 131C     		mov	r3, r2
 567              	.L55:
 568 0028 A360     		str	r3, [r4, #8]
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 569              		.loc 1 623 0
 570 002a FFF7FEFF 		bl	RTC_ExitInitMode
 571              	.LVL39:
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 572              		.loc 1 625 0
 573 002e 0123     		mov	r3, #1
 574              	.LVL40:
 575              	.L50:
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 576              		.loc 1 629 0
 577 0030 FF22     		mov	r2, #255
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 578              		.loc 1 632 0
 579 0032 181C     		mov	r0, r3
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 580              		.loc 1 629 0
 581 0034 6262     		str	r2, [r4, #36]
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 582              		.loc 1 632 0
 583              		@ sp needed for prologue
 584 0036 38BD     		pop	{r3, r4, r5, pc}
 585              	.L57:
 586              		.align	2
 587              	.L56:
 588 0038 00280040 		.word	1073752064
 589              		.cfi_endproc
 590              	.LFE40:
 592              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 593              		.align	1
 594              		.global	RTC_BypassShadowCmd
 595              		.code	16
 596              		.thumb_func
 598              	RTC_BypassShadowCmd:
 599              	.LFB41:
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 600              		.loc 1 643 0
 601              		.cfi_startproc
 602              	.LVL41:
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 603              		.loc 1 648 0
 604 0000 094B     		ldr	r3, .L62
 605 0002 CA22     		mov	r2, #202
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 606              		.loc 1 643 0
 607 0004 00B5     		push	{lr}
 608              	.LCFI7:
 609              		.cfi_def_cfa_offset 4
 610              		.cfi_offset 14, -4
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 611              		.loc 1 648 0
 612 0006 5A62     		str	r2, [r3, #36]
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 613              		.loc 1 649 0
 614 0008 5322     		mov	r2, #83
 615 000a 5A62     		str	r2, [r3, #36]
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 616              		.loc 1 651 0
 617 000c 0028     		cmp	r0, #0
 618 000e 03D0     		beq	.L59
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 619              		.loc 1 654 0
 620 0010 9A68     		ldr	r2, [r3, #8]
 621 0012 2021     		mov	r1, #32
 622 0014 0A43     		orr	r2, r1
 623 0016 02E0     		b	.L61
 624              	.L59:
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 625              		.loc 1 659 0
 626 0018 9968     		ldr	r1, [r3, #8]
 627 001a DF22     		mov	r2, #223
 628 001c 0A40     		and	r2, r1
 629              	.L61:
 630 001e 9A60     		str	r2, [r3, #8]
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 631              		.loc 1 663 0
 632 0020 FF22     		mov	r2, #255
 633 0022 5A62     		str	r2, [r3, #36]
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 634              		.loc 1 664 0
 635              		@ sp needed for prologue
 636 0024 00BD     		pop	{pc}
 637              	.L63:
 638 0026 C046     		.align	2
 639              	.L62:
 640 0028 00280040 		.word	1073752064
 641              		.cfi_endproc
 642              	.LFE41:
 644              		.section	.text.RTC_SetTime,"ax",%progbits
 645              		.align	1
 646              		.global	RTC_SetTime
 647              		.code	16
 648              		.thumb_func
 650              	RTC_SetTime:
 651              	.LFB42:
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 652              		.loc 1 697 0
 653              		.cfi_startproc
 654              	.LVL42:
 655 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 656              	.LCFI8:
 657              		.cfi_def_cfa_offset 24
 658              		.cfi_offset 3, -24
 659              		.cfi_offset 4, -20
 660              		.cfi_offset 5, -16
 661              		.cfi_offset 6, -12
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 664              		.loc 1 697 0
 665 0002 021C     		mov	r2, r0
 666 0004 0C1C     		mov	r4, r1
 667 0006 244D     		ldr	r5, .L74
 668 0008 4023     		mov	r3, #64
 669 000a 0878     		ldrb	r0, [r1]
 670              	.LVL43:
 671 000c 4E78     		ldrb	r6, [r1, #1]
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 672              		.loc 1 704 0
 673 000e 002A     		cmp	r2, #0
 674 0010 04D1     		bne	.L65
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 675              		.loc 1 706 0
 676 0012 AA68     		ldr	r2, [r5, #8]
 677              	.LVL44:
 678 0014 1340     		and	r3, r2
 679 0016 2BD1     		bne	.L66
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 680              		.loc 1 713 0
 681 0018 CB70     		strb	r3, [r1, #3]
 682 001a 29E0     		b	.L66
 683              	.LVL45:
 684              	.L65:
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 685              		.loc 1 721 0
 686 001c AA68     		ldr	r2, [r5, #8]
 687              	.LVL46:
 688 001e 1340     		and	r3, r2
 689 0020 1CD1     		bne	.L67
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 690              		.loc 1 729 0
 691 0022 CB70     		strb	r3, [r1, #3]
 692 0024 1AE0     		b	.L67
 693              	.LVL47:
 694              	.L69:
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 695              		.loc 1 753 0
 696 0026 CA23     		mov	r3, #202
 697 0028 6B62     		str	r3, [r5, #36]
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 698              		.loc 1 754 0
 699 002a 5323     		mov	r3, #83
 700 002c 6B62     		str	r3, [r5, #36]
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 701              		.loc 1 757 0
 702 002e FFF7FEFF 		bl	RTC_EnterInitMode
 703              	.LVL48:
 704 0032 031C     		mov	r3, r0
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 705              		.loc 1 759 0
 706 0034 0020     		mov	r0, #0
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 707              		.loc 1 753 0
 708 0036 184E     		ldr	r6, .L74
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 709              		.loc 1 757 0
 710 0038 8342     		cmp	r3, r0
 711 003a 0CD0     		beq	.L68
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 712              		.loc 1 764 0
 713 003c 174B     		ldr	r3, .L74+4
 714 003e 1C40     		and	r4, r3
 715              	.LVL49:
 716 0040 3460     		str	r4, [r6]
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 717              		.loc 1 767 0
 718 0042 FFF7FEFF 		bl	RTC_ExitInitMode
 719              	.LVL50:
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 720              		.loc 1 770 0
 721 0046 B368     		ldr	r3, [r6, #8]
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 722              		.loc 1 783 0
 723 0048 0120     		mov	r0, #1
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 724              		.loc 1 770 0
 725 004a 9A06     		lsl	r2, r3, #26
 726 004c 03D4     		bmi	.L68
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 727              		.loc 1 772 0
 728 004e FFF7FEFF 		bl	RTC_WaitForSynchro
 729              	.LVL51:
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 730              		.loc 1 759 0
 731 0052 431E     		sub	r3, r0, #1
 732 0054 9841     		sbc	r0, r0, r3
 733              	.L68:
 734              	.LVL52:
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 735              		.loc 1 788 0
 736 0056 FF23     		mov	r3, #255
 737 0058 6B62     		str	r3, [r5, #36]
 738 005a 1BE0     		b	.L73
 739              	.LVL53:
 740              	.L67:
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 741              		.loc 1 741 0
 742 005c A378     		ldrb	r3, [r4, #2]
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 743              		.loc 1 739 0
 744 005e 0004     		lsl	r0, r0, #16
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 745              		.loc 1 740 0
 746 0060 3602     		lsl	r6, r6, #8
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 747              		.loc 1 739 0
 748 0062 3043     		orr	r0, r6
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 749              		.loc 1 740 0
 750 0064 1843     		orr	r0, r3
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 751              		.loc 1 742 0
 752 0066 E378     		ldrb	r3, [r4, #3]
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 753              		.loc 1 739 0
 754 0068 041C     		mov	r4, r0
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 755              		.loc 1 742 0
 756 006a 1B04     		lsl	r3, r3, #16
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 757              		.loc 1 739 0
 758 006c 1C43     		orr	r4, r3
 759              	.LVL54:
 760 006e DAE7     		b	.L69
 761              	.LVL55:
 762              	.L66:
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 763              		.loc 1 746 0
 764 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 765              	.LVL56:
 766 0074 071C     		mov	r7, r0
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 767              		.loc 1 747 0
 768 0076 301C     		mov	r0, r6
 769 0078 FFF7FEFF 		bl	RTC_ByteToBcd2
 770              	.LVL57:
 771 007c 061C     		mov	r6, r0
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 772              		.loc 1 748 0
 773 007e A078     		ldrb	r0, [r4, #2]
 774 0080 FFF7FEFF 		bl	RTC_ByteToBcd2
 775              	.LVL58:
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 776              		.loc 1 749 0
 777 0084 E478     		ldrb	r4, [r4, #3]
 778              	.LVL59:
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 779              		.loc 1 746 0
 780 0086 3F04     		lsl	r7, r7, #16
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 781              		.loc 1 749 0
 782 0088 2404     		lsl	r4, r4, #16
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 783              		.loc 1 746 0
 784 008a 0443     		orr	r4, r0
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 785              		.loc 1 747 0
 786 008c 3C43     		orr	r4, r7
 787 008e 3602     		lsl	r6, r6, #8
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 788              		.loc 1 746 0
 789 0090 3443     		orr	r4, r6
 790              	.LVL60:
 791 0092 C8E7     		b	.L69
 792              	.LVL61:
 793              	.L73:
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 794              		.loc 1 791 0
 795              		@ sp needed for prologue
 796 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 797              	.L75:
 798 0096 C046     		.align	2
 799              	.L74:
 800 0098 00280040 		.word	1073752064
 801 009c 7F7F7F00 		.word	8355711
 802              		.cfi_endproc
 803              	.LFE42:
 805              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 806              		.align	1
 807              		.global	RTC_TimeStructInit
 808              		.code	16
 809              		.thumb_func
 811              	RTC_TimeStructInit:
 812              	.LFB43:
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 813              		.loc 1 801 0
 814              		.cfi_startproc
 815              	.LVL62:
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 816              		.loc 1 803 0
 817 0000 0023     		mov	r3, #0
 818 0002 C370     		strb	r3, [r0, #3]
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 819              		.loc 1 804 0
 820 0004 0370     		strb	r3, [r0]
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 821              		.loc 1 805 0
 822 0006 4370     		strb	r3, [r0, #1]
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 823              		.loc 1 806 0
 824 0008 8370     		strb	r3, [r0, #2]
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 825              		.loc 1 807 0
 826              		@ sp needed for prologue
 827 000a 7047     		bx	lr
 828              		.cfi_endproc
 829              	.LFE43:
 831              		.section	.text.RTC_GetTime,"ax",%progbits
 832              		.align	1
 833              		.global	RTC_GetTime
 834              		.code	16
 835              		.thumb_func
 837              	RTC_GetTime:
 838              	.LFB44:
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 839              		.loc 1 820 0
 840              		.cfi_startproc
 841              	.LVL63:
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 842              		.loc 1 827 0
 843 0000 104B     		ldr	r3, .L79
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 844              		.loc 1 820 0
 845 0002 70B5     		push	{r4, r5, r6, lr}
 846              	.LCFI9:
 847              		.cfi_def_cfa_offset 16
 848              		.cfi_offset 4, -16
 849              		.cfi_offset 5, -12
 850              		.cfi_offset 6, -8
 851              		.cfi_offset 14, -4
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 852              		.loc 1 827 0
 853 0004 1B68     		ldr	r3, [r3]
 854              	.LVL64:
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 855              		.loc 1 820 0
 856 0006 021C     		mov	r2, r0
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 857              		.loc 1 831 0
 858 0008 5E04     		lsl	r6, r3, #17
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 859              		.loc 1 830 0
 860 000a 9802     		lsl	r0, r3, #10
 861              	.LVL65:
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 862              		.loc 1 832 0
 863 000c 7F25     		mov	r5, #127
 864 000e 1D40     		and	r5, r3
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 865              		.loc 1 830 0
 866 0010 800E     		lsr	r0, r0, #26
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 867              		.loc 1 831 0
 868 0012 760E     		lsr	r6, r6, #25
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 869              		.loc 1 820 0
 870 0014 0C1C     		mov	r4, r1
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 871              		.loc 1 830 0
 872 0016 0870     		strb	r0, [r1]
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 873              		.loc 1 831 0
 874 0018 4E70     		strb	r6, [r1, #1]
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 875              		.loc 1 832 0
 876 001a 8D70     		strb	r5, [r1, #2]
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 877              		.loc 1 833 0
 878 001c 8021     		mov	r1, #128
 879              	.LVL66:
 880 001e C903     		lsl	r1, r1, #15
 881 0020 0B40     		and	r3, r1
 882              	.LVL67:
 883 0022 1B0C     		lsr	r3, r3, #16
 884 0024 E370     		strb	r3, [r4, #3]
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 885              		.loc 1 836 0
 886 0026 002A     		cmp	r2, #0
 887 0028 0AD1     		bne	.L77
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 888              		.loc 1 839 0
 889 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 890              	.LVL68:
 891 002e 2070     		strb	r0, [r4]
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 892              		.loc 1 840 0
 893 0030 301C     		mov	r0, r6
 894 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 895              	.LVL69:
 896 0036 6070     		strb	r0, [r4, #1]
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);
 897              		.loc 1 841 0
 898 0038 281C     		mov	r0, r5
 899 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 900              	.LVL70:
 901 003e A070     		strb	r0, [r4, #2]
 902              	.L77:
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 903              		.loc 1 843 0
 904              		@ sp needed for prologue
 905              	.LVL71:
 906 0040 70BD     		pop	{r4, r5, r6, pc}
 907              	.L80:
 908 0042 C046     		.align	2
 909              	.L79:
 910 0044 00280040 		.word	1073752064
 911              		.cfi_endproc
 912              	.LFE44:
 914              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 915              		.align	1
 916              		.global	RTC_GetSubSecond
 917              		.code	16
 918              		.thumb_func
 920              	RTC_GetSubSecond:
 921              	.LFB45:
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 922              		.loc 1 853 0
 923              		.cfi_startproc
 924              	.LVL72:
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 925              		.loc 1 857 0
 926 0000 014B     		ldr	r3, .L82
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 927              		.loc 1 863 0
 928              		@ sp needed for prologue
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 929              		.loc 1 857 0
 930 0002 986A     		ldr	r0, [r3, #40]
 931              	.LVL73:
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   (void) (RTC->DR);
 932              		.loc 1 860 0
 933 0004 5B68     		ldr	r3, [r3, #4]
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 934              		.loc 1 863 0
 935 0006 7047     		bx	lr
 936              	.L83:
 937              		.align	2
 938              	.L82:
 939 0008 00280040 		.word	1073752064
 940              		.cfi_endproc
 941              	.LFE45:
 943              		.section	.text.RTC_SetDate,"ax",%progbits
 944              		.align	1
 945              		.global	RTC_SetDate
 946              		.code	16
 947              		.thumb_func
 949              	RTC_SetDate:
 950              	.LFB46:
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 951              		.loc 1 878 0
 952              		.cfi_startproc
 953              	.LVL74:
 954 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 955              	.LCFI10:
 956              		.cfi_def_cfa_offset 24
 957              		.cfi_offset 3, -24
 958              		.cfi_offset 4, -20
 959              		.cfi_offset 5, -16
 960              		.cfi_offset 6, -12
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 963              		.loc 1 878 0
 964 0002 0C1C     		mov	r4, r1
 965 0004 4B78     		ldrb	r3, [r1, #1]
 966 0006 CD78     		ldrb	r5, [r1, #3]
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 967              		.loc 1 885 0
 968 0008 0028     		cmp	r0, #0
 969 000a 34D1     		bne	.L85
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 970              		.loc 1 885 0 is_stmt 0 discriminator 1
 971 000c 1022     		mov	r2, #16
 972 000e 1342     		tst	r3, r2
 973 0010 1ED0     		beq	.L86
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 974              		.loc 1 887 0 is_stmt 1
 975 0012 9343     		bic	r3, r2
 976 0014 0A33     		add	r3, r3, #10
 977 0016 4B70     		strb	r3, [r1, #1]
 978 0018 1AE0     		b	.L86
 979              	.LVL75:
 980              	.L88:
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 981              		.loc 1 922 0
 982 001a 1C4C     		ldr	r4, .L96
 983              	.LVL76:
 984 001c CA23     		mov	r3, #202
 985 001e 6362     		str	r3, [r4, #36]
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 986              		.loc 1 923 0
 987 0020 5323     		mov	r3, #83
 988 0022 6362     		str	r3, [r4, #36]
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 989              		.loc 1 926 0
 990 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 991              	.LVL77:
 992 0028 031C     		mov	r3, r0
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 993              		.loc 1 928 0
 994 002a 0020     		mov	r0, #0
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 995              		.loc 1 926 0
 996 002c 8342     		cmp	r3, r0
 997 002e 0CD0     		beq	.L87
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 998              		.loc 1 933 0
 999 0030 174B     		ldr	r3, .L96+4
 1000 0032 1D40     		and	r5, r3
 1001              	.LVL78:
 1002 0034 6560     		str	r5, [r4, #4]
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 1003              		.loc 1 936 0
 1004 0036 FFF7FEFF 		bl	RTC_ExitInitMode
 1005              	.LVL79:
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1006              		.loc 1 939 0
 1007 003a A368     		ldr	r3, [r4, #8]
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 1008              		.loc 1 952 0
 1009 003c 0120     		mov	r0, #1
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1010              		.loc 1 939 0
 1011 003e 9A06     		lsl	r2, r3, #26
 1012 0040 03D4     		bmi	.L87
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 1013              		.loc 1 941 0
 1014 0042 FFF7FEFF 		bl	RTC_WaitForSynchro
 1015              	.LVL80:
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 1016              		.loc 1 928 0
 1017 0046 431E     		sub	r3, r0, #1
 1018 0048 9841     		sbc	r0, r0, r3
 1019              	.L87:
 1020              	.LVL81:
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1021              		.loc 1 956 0
 1022 004a FF23     		mov	r3, #255
 1023 004c 6362     		str	r3, [r4, #36]
 1024 004e 1BE0     		b	.L95
 1025              	.LVL82:
 1026              	.L86:
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1027              		.loc 1 915 0
 1028 0050 281C     		mov	r0, r5
 1029              	.LVL83:
 1030 0052 FFF7FEFF 		bl	RTC_ByteToBcd2
 1031              	.LVL84:
 1032 0056 071C     		mov	r7, r0
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1033              		.loc 1 916 0
 1034 0058 6078     		ldrb	r0, [r4, #1]
 1035 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 1036              	.LVL85:
 1037 005e 061C     		mov	r6, r0
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1038              		.loc 1 917 0
 1039 0060 A078     		ldrb	r0, [r4, #2]
 1040 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1041              	.LVL86:
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1042              		.loc 1 918 0
 1043 0066 2578     		ldrb	r5, [r4]
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1044              		.loc 1 915 0
 1045 0068 3F04     		lsl	r7, r7, #16
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1046              		.loc 1 918 0
 1047 006a 6D03     		lsl	r5, r5, #13
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1048              		.loc 1 915 0
 1049 006c 0543     		orr	r5, r0
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1050              		.loc 1 916 0
 1051 006e 3D43     		orr	r5, r7
 1052 0070 3602     		lsl	r6, r6, #8
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1053              		.loc 1 915 0
 1054 0072 3543     		orr	r5, r6
 1055              	.LVL87:
 1056 0074 D1E7     		b	.L88
 1057              	.LVL88:
 1058              	.L85:
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1059              		.loc 1 910 0
 1060 0076 8A78     		ldrb	r2, [r1, #2]
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1061              		.loc 1 908 0
 1062 0078 2D04     		lsl	r5, r5, #16
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1063              		.loc 1 909 0
 1064 007a 1B02     		lsl	r3, r3, #8
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1065              		.loc 1 908 0
 1066 007c 1D43     		orr	r5, r3
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1067              		.loc 1 909 0
 1068 007e 1543     		orr	r5, r2
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1069              		.loc 1 911 0
 1070 0080 0A78     		ldrb	r2, [r1]
 1071 0082 5203     		lsl	r2, r2, #13
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1072              		.loc 1 908 0
 1073 0084 1543     		orr	r5, r2
 1074              	.LVL89:
 1075 0086 C8E7     		b	.L88
 1076              	.LVL90:
 1077              	.L95:
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1078              		.loc 1 959 0
 1079              		@ sp needed for prologue
 1080 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1081              	.L97:
 1082 008a C046     		.align	2
 1083              	.L96:
 1084 008c 00280040 		.word	1073752064
 1085 0090 3FFFFF00 		.word	16777023
 1086              		.cfi_endproc
 1087              	.LFE46:
 1089              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1090              		.align	1
 1091              		.global	RTC_DateStructInit
 1092              		.code	16
 1093              		.thumb_func
 1095              	RTC_DateStructInit:
 1096              	.LFB47:
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1097              		.loc 1 969 0
 1098              		.cfi_startproc
 1099              	.LVL91:
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1100              		.loc 1 971 0
 1101 0000 0123     		mov	r3, #1
 1102 0002 0370     		strb	r3, [r0]
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1103              		.loc 1 972 0
 1104 0004 8370     		strb	r3, [r0, #2]
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1105              		.loc 1 973 0
 1106 0006 4370     		strb	r3, [r0, #1]
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1107              		.loc 1 974 0
 1108 0008 0023     		mov	r3, #0
 1109 000a C370     		strb	r3, [r0, #3]
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1110              		.loc 1 975 0
 1111              		@ sp needed for prologue
 1112 000c 7047     		bx	lr
 1113              		.cfi_endproc
 1114              	.LFE47:
 1116              		.section	.text.RTC_GetDate,"ax",%progbits
 1117              		.align	1
 1118              		.global	RTC_GetDate
 1119              		.code	16
 1120              		.thumb_func
 1122              	RTC_GetDate:
 1123              	.LFB48:
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1124              		.loc 1 988 0
 1125              		.cfi_startproc
 1126              	.LVL92:
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1127              		.loc 1 995 0
 1128 0000 0F4B     		ldr	r3, .L101
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1129              		.loc 1 988 0
 1130 0002 70B5     		push	{r4, r5, r6, lr}
 1131              	.LCFI11:
 1132              		.cfi_def_cfa_offset 16
 1133              		.cfi_offset 4, -16
 1134              		.cfi_offset 5, -12
 1135              		.cfi_offset 6, -8
 1136              		.cfi_offset 14, -4
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1137              		.loc 1 995 0
 1138 0004 5B68     		ldr	r3, [r3, #4]
 1139              	.LVL93:
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1140              		.loc 1 1000 0
 1141 0006 3F25     		mov	r5, #63
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1142              		.loc 1 999 0
 1143 0008 DE04     		lsl	r6, r3, #19
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1144              		.loc 1 1000 0
 1145 000a 1D40     		and	r5, r3
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1146              		.loc 1 988 0
 1147 000c 021C     		mov	r2, r0
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1148              		.loc 1 998 0
 1149 000e 1802     		lsl	r0, r3, #8
 1150              	.LVL94:
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1151              		.loc 1 1001 0
 1152 0010 1B04     		lsl	r3, r3, #16
 1153              	.LVL95:
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1154              		.loc 1 998 0
 1155 0012 000E     		lsr	r0, r0, #24
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1156              		.loc 1 999 0
 1157 0014 F60E     		lsr	r6, r6, #27
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1158              		.loc 1 1001 0
 1159 0016 5B0F     		lsr	r3, r3, #29
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1160              		.loc 1 988 0
 1161 0018 0C1C     		mov	r4, r1
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1162              		.loc 1 998 0
 1163 001a C870     		strb	r0, [r1, #3]
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1164              		.loc 1 999 0
 1165 001c 4E70     		strb	r6, [r1, #1]
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1166              		.loc 1 1000 0
 1167 001e 8D70     		strb	r5, [r1, #2]
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1168              		.loc 1 1001 0
 1169 0020 0B70     		strb	r3, [r1]
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1170              		.loc 1 1004 0
 1171 0022 002A     		cmp	r2, #0
 1172 0024 0AD1     		bne	.L99
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1173              		.loc 1 1007 0
 1174 0026 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1175              	.LVL96:
 1176 002a E070     		strb	r0, [r4, #3]
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1177              		.loc 1 1008 0
 1178 002c 301C     		mov	r0, r6
 1179 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1180              	.LVL97:
 1181 0032 6070     		strb	r0, [r4, #1]
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1182              		.loc 1 1009 0
 1183 0034 281C     		mov	r0, r5
 1184 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1185              	.LVL98:
 1186 003a A070     		strb	r0, [r4, #2]
 1187              	.L99:
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1188              		.loc 1 1012 0
 1189              		@ sp needed for prologue
 1190              	.LVL99:
 1191 003c 70BD     		pop	{r4, r5, r6, pc}
 1192              	.L102:
 1193 003e C046     		.align	2
 1194              	.L101:
 1195 0040 00280040 		.word	1073752064
 1196              		.cfi_endproc
 1197              	.LFE48:
 1199              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1200              		.align	1
 1201              		.global	RTC_SetAlarm
 1202              		.code	16
 1203              		.thumb_func
 1205              	RTC_SetAlarm:
 1206              	.LFB49:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1207              		.loc 1 1048 0
 1208              		.cfi_startproc
 1209              	.LVL100:
 1210 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1211              	.LCFI12:
 1212              		.cfi_def_cfa_offset 32
 1213              		.cfi_offset 0, -32
 1214              		.cfi_offset 1, -28
 1215              		.cfi_offset 2, -24
 1216              		.cfi_offset 4, -20
 1217              		.cfi_offset 5, -16
 1218              		.cfi_offset 6, -12
 1219              		.cfi_offset 7, -8
 1220              		.cfi_offset 14, -4
 1221 0002 244D     		ldr	r5, .L109
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1222              		.loc 1 1048 0
 1223 0004 141C     		mov	r4, r2
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1224              		.loc 1 1059 0
 1225 0006 A968     		ldr	r1, [r5, #8]
 1226              	.LVL101:
 1227 0008 4022     		mov	r2, #64
 1228              	.LVL102:
 1229 000a 2378     		ldrb	r3, [r4]
 1230 000c 0A40     		and	r2, r1
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1231              		.loc 1 1057 0
 1232 000e 0028     		cmp	r0, #0
 1233 0010 03D1     		bne	.L104
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1234              		.loc 1 1059 0
 1235 0012 002A     		cmp	r2, #0
 1236 0014 1ED1     		bne	.L105
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1237              		.loc 1 1066 0
 1238 0016 E270     		strb	r2, [r4, #3]
 1239 0018 1CE0     		b	.L105
 1240              	.L104:
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1241              		.loc 1 1083 0
 1242 001a 002A     		cmp	r2, #0
 1243 001c 09D1     		bne	.L106
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1244              		.loc 1 1091 0
 1245 001e E270     		strb	r2, [r4, #3]
 1246 0020 07E0     		b	.L106
 1247              	.LVL103:
 1248              	.L107:
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1249              		.loc 1 1133 0
 1250 0022 CA23     		mov	r3, #202
 1251 0024 6B62     		str	r3, [r5, #36]
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1252              		.loc 1 1134 0
 1253 0026 5323     		mov	r3, #83
 1254 0028 6B62     		str	r3, [r5, #36]
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1255              		.loc 1 1140 0
 1256 002a FF23     		mov	r3, #255
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMAR = (uint32_t)tmpreg;
 1257              		.loc 1 1137 0
 1258 002c EF61     		str	r7, [r5, #28]
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1259              		.loc 1 1140 0
 1260 002e 6B62     		str	r3, [r5, #36]
 1261 0030 2EE0     		b	.L108
 1262              	.LVL104:
 1263              	.L106:
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1264              		.loc 1 1113 0
 1265 0032 A268     		ldr	r2, [r4, #8]
 1266 0034 6768     		ldr	r7, [r4, #4]
 1267 0036 1B04     		lsl	r3, r3, #16
 1268 0038 1743     		orr	r7, r2
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1269              		.loc 1 1115 0
 1270 003a A278     		ldrb	r2, [r4, #2]
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1271              		.loc 1 1114 0
 1272 003c 1743     		orr	r7, r2
 1273 003e 6278     		ldrb	r2, [r4, #1]
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1274              		.loc 1 1115 0
 1275 0040 1F43     		orr	r7, r3
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1276              		.loc 1 1114 0
 1277 0042 1202     		lsl	r2, r2, #8
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1278              		.loc 1 1116 0
 1279 0044 1743     		orr	r7, r2
 1280 0046 E278     		ldrb	r2, [r4, #3]
 1281 0048 1204     		lsl	r2, r2, #16
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1282              		.loc 1 1117 0
 1283 004a 1743     		orr	r7, r2
 1284 004c 227B     		ldrb	r2, [r4, #12]
 1285 004e 1206     		lsl	r2, r2, #24
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1286              		.loc 1 1113 0
 1287 0050 1743     		orr	r7, r2
 1288              	.LVL105:
 1289 0052 E6E7     		b	.L107
 1290              	.LVL106:
 1291              	.L105:
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1292              		.loc 1 1123 0
 1293 0054 181C     		mov	r0, r3
 1294              	.LVL107:
 1295 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 1296              	.LVL108:
 1297 005a 061C     		mov	r6, r0
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1298              		.loc 1 1124 0
 1299 005c 6078     		ldrb	r0, [r4, #1]
 1300 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1301              	.LVL109:
 1302 0062 0190     		str	r0, [sp, #4]
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1303              		.loc 1 1125 0
 1304 0064 A078     		ldrb	r0, [r4, #2]
 1305 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 1306              	.LVL110:
 1307 006a 071C     		mov	r7, r0
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1308              		.loc 1 1127 0
 1309 006c 207B     		ldrb	r0, [r4, #12]
 1310 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1311              	.LVL111:
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1312              		.loc 1 1123 0
 1313 0072 A368     		ldr	r3, [r4, #8]
 1314 0074 6268     		ldr	r2, [r4, #4]
 1315 0076 3604     		lsl	r6, r6, #16
 1316 0078 1A43     		orr	r2, r3
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1317              		.loc 1 1126 0
 1318 007a E378     		ldrb	r3, [r4, #3]
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1319              		.loc 1 1127 0
 1320 007c 0006     		lsl	r0, r0, #24
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1321              		.loc 1 1126 0
 1322 007e 1B04     		lsl	r3, r3, #16
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1323              		.loc 1 1124 0
 1324 0080 1343     		orr	r3, r2
 1325 0082 019A     		ldr	r2, [sp, #4]
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1326              		.loc 1 1125 0
 1327 0084 1F43     		orr	r7, r3
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1328              		.loc 1 1126 0
 1329 0086 3743     		orr	r7, r6
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1330              		.loc 1 1124 0
 1331 0088 1302     		lsl	r3, r2, #8
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1332              		.loc 1 1127 0
 1333 008a 1F43     		orr	r7, r3
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1334              		.loc 1 1123 0
 1335 008c 0743     		orr	r7, r0
 1336              	.LVL112:
 1337 008e C8E7     		b	.L107
 1338              	.L108:
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1339              		.loc 1 1141 0
 1340              		@ sp needed for prologue
 1341              	.LVL113:
 1342              	.LVL114:
 1343 0090 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 1344              	.L110:
 1345 0092 C046     		.align	2
 1346              	.L109:
 1347 0094 00280040 		.word	1073752064
 1348              		.cfi_endproc
 1349              	.LFE49:
 1351              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1352              		.align	1
 1353              		.global	RTC_AlarmStructInit
 1354              		.code	16
 1355              		.thumb_func
 1357              	RTC_AlarmStructInit:
 1358              	.LFB50:
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1359              		.loc 1 1152 0
 1360              		.cfi_startproc
 1361              	.LVL115:
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1362              		.loc 1 1154 0
 1363 0000 0023     		mov	r3, #0
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1364              		.loc 1 1161 0
 1365 0002 0122     		mov	r2, #1
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1366              		.loc 1 1154 0
 1367 0004 C370     		strb	r3, [r0, #3]
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1368              		.loc 1 1155 0
 1369 0006 0370     		strb	r3, [r0]
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1370              		.loc 1 1156 0
 1371 0008 4370     		strb	r3, [r0, #1]
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1372              		.loc 1 1157 0
 1373 000a 8370     		strb	r3, [r0, #2]
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1374              		.loc 1 1160 0
 1375 000c 8360     		str	r3, [r0, #8]
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1376              		.loc 1 1161 0
 1377 000e 0273     		strb	r2, [r0, #12]
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1378              		.loc 1 1164 0
 1379 0010 4360     		str	r3, [r0, #4]
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1380              		.loc 1 1165 0
 1381              		@ sp needed for prologue
 1382 0012 7047     		bx	lr
 1383              		.cfi_endproc
 1384              	.LFE50:
 1386              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1387              		.align	1
 1388              		.global	RTC_GetAlarm
 1389              		.code	16
 1390              		.thumb_func
 1392              	RTC_GetAlarm:
 1393              	.LFB51:
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1394              		.loc 1 1181 0
 1395              		.cfi_startproc
 1396              	.LVL116:
 1397 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1398              	.LCFI13:
 1399              		.cfi_def_cfa_offset 24
 1400              		.cfi_offset 3, -24
 1401              		.cfi_offset 4, -20
 1402              		.cfi_offset 5, -16
 1403              		.cfi_offset 6, -12
 1404              		.cfi_offset 7, -8
 1405              		.cfi_offset 14, -4
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ALRMAR);
 1406              		.loc 1 1189 0
 1407 0002 174B     		ldr	r3, .L114
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1408              		.loc 1 1181 0
 1409 0004 011C     		mov	r1, r0
 1410              	.LVL117:
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ALRMAR);
 1411              		.loc 1 1189 0
 1412 0006 DB69     		ldr	r3, [r3, #28]
 1413              	.LVL118:
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1414              		.loc 1 1196 0
 1415 0008 7F26     		mov	r6, #127
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1416              		.loc 1 1192 0
 1417 000a 9802     		lsl	r0, r3, #10
 1418              	.LVL119:
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1419              		.loc 1 1194 0
 1420 000c 5F04     		lsl	r7, r3, #17
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1421              		.loc 1 1196 0
 1422 000e 1E40     		and	r6, r3
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1423              		.loc 1 1192 0
 1424 0010 800E     		lsr	r0, r0, #26
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1425              		.loc 1 1194 0
 1426 0012 7F0E     		lsr	r7, r7, #25
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1427              		.loc 1 1181 0
 1428 0014 141C     		mov	r4, r2
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1429              		.loc 1 1192 0
 1430 0016 1070     		strb	r0, [r2]
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1431              		.loc 1 1194 0
 1432 0018 5770     		strb	r7, [r2, #1]
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1433              		.loc 1 1196 0
 1434 001a 9670     		strb	r6, [r2, #2]
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1435              		.loc 1 1198 0
 1436 001c 8022     		mov	r2, #128
 1437              	.LVL120:
 1438 001e D203     		lsl	r2, r2, #15
 1439 0020 1A40     		and	r2, r3
 1440 0022 120C     		lsr	r2, r2, #16
 1441 0024 E270     		strb	r2, [r4, #3]
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1442              		.loc 1 1200 0
 1443 0026 8022     		mov	r2, #128
 1444 0028 D205     		lsl	r2, r2, #23
 1445 002a 1A40     		and	r2, r3
 1446 002c A260     		str	r2, [r4, #8]
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1447              		.loc 1 1201 0
 1448 002e 0D4A     		ldr	r2, .L114+4
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1449              		.loc 1 1199 0
 1450 0030 9D00     		lsl	r5, r3, #2
 1451 0032 AD0E     		lsr	r5, r5, #26
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1452              		.loc 1 1201 0
 1453 0034 1340     		and	r3, r2
 1454              	.LVL121:
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1455              		.loc 1 1199 0
 1456 0036 2573     		strb	r5, [r4, #12]
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1457              		.loc 1 1201 0
 1458 0038 6360     		str	r3, [r4, #4]
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1459              		.loc 1 1203 0
 1460 003a 0029     		cmp	r1, #0
 1461 003c 0ED1     		bne	.L112
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1462              		.loc 1 1205 0
 1463 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1464              	.LVL122:
 1465 0042 2070     		strb	r0, [r4]
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1466              		.loc 1 1207 0
 1467 0044 381C     		mov	r0, r7
 1468 0046 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1469              	.LVL123:
 1470 004a 6070     		strb	r0, [r4, #1]
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1471              		.loc 1 1209 0
 1472 004c 301C     		mov	r0, r6
 1473 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1474              	.LVL124:
 1475 0052 A070     		strb	r0, [r4, #2]
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1476              		.loc 1 1211 0
 1477 0054 281C     		mov	r0, r5
 1478 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1479              	.LVL125:
 1480 005a 2073     		strb	r0, [r4, #12]
 1481              	.L112:
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1482              		.loc 1 1213 0
 1483              		@ sp needed for prologue
 1484              	.LVL126:
 1485 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1486              	.L115:
 1487 005e C046     		.align	2
 1488              	.L114:
 1489 0060 00280040 		.word	1073752064
 1490 0064 80808080 		.word	-2139062144
 1491              		.cfi_endproc
 1492              	.LFE51:
 1494              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1495              		.align	1
 1496              		.global	RTC_AlarmCmd
 1497              		.code	16
 1498              		.thumb_func
 1500              	RTC_AlarmCmd:
 1501              	.LFB52:
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1502              		.loc 1 1227 0
 1503              		.cfi_startproc
 1504              	.LVL127:
 1505 0000 13B5     		push	{r0, r1, r4, lr}
 1506              	.LCFI14:
 1507              		.cfi_def_cfa_offset 16
 1508              		.cfi_offset 0, -16
 1509              		.cfi_offset 1, -12
 1510              		.cfi_offset 4, -8
 1511              		.cfi_offset 14, -4
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1512              		.loc 1 1228 0
 1513 0002 0023     		mov	r3, #0
 1514 0004 0193     		str	r3, [sp, #4]
 1515              	.LVL128:
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1516              		.loc 1 1237 0
 1517 0006 124B     		ldr	r3, .L126
 1518 0008 CA22     		mov	r2, #202
 1519 000a 5A62     		str	r2, [r3, #36]
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1520              		.loc 1 1238 0
 1521 000c 5322     		mov	r2, #83
 1522 000e 5A62     		str	r2, [r3, #36]
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1523              		.loc 1 1243 0
 1524 0010 9A68     		ldr	r2, [r3, #8]
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 1525              		.loc 1 1241 0
 1526 0012 0029     		cmp	r1, #0
 1527 0014 03D0     		beq	.L117
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1528              		.loc 1 1243 0
 1529 0016 1043     		orr	r0, r2
 1530              	.LVL129:
 1531 0018 9860     		str	r0, [r3, #8]
 1532              	.LVL130:
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
 1533              		.loc 1 1245 0
 1534 001a 0120     		mov	r0, #1
 1535 001c 14E0     		b	.L118
 1536              	.LVL131:
 1537              	.L117:
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1538              		.loc 1 1250 0
 1539 001e 8243     		bic	r2, r0
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1540              		.loc 1 1257 0
 1541 0020 8021     		mov	r1, #128
 1542              	.LVL132:
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1543              		.loc 1 1250 0
 1544 0022 9A60     		str	r2, [r3, #8]
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1545              		.loc 1 1255 0
 1546 0024 000A     		lsr	r0, r0, #8
 1547              	.LVL133:
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1548              		.loc 1 1257 0
 1549 0026 C901     		lsl	r1, r1, #7
 1550              	.LVL134:
 1551              	.L120:
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1552              		.loc 1 1255 0 discriminator 1
 1553 0028 DA68     		ldr	r2, [r3, #12]
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmcounter++;  
 1554              		.loc 1 1256 0 discriminator 1
 1555 002a 019C     		ldr	r4, [sp, #4]
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1556              		.loc 1 1255 0 discriminator 1
 1557 002c 0240     		and	r2, r0
 1558              	.LVL135:
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmcounter++;  
 1559              		.loc 1 1256 0 discriminator 1
 1560 002e 0134     		add	r4, r4, #1
 1561              	.LVL136:
 1562 0030 0194     		str	r4, [sp, #4]
 1563              	.LVL137:
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1564              		.loc 1 1257 0 discriminator 1
 1565 0032 019C     		ldr	r4, [sp, #4]
 1566              	.LVL138:
 1567 0034 8C42     		cmp	r4, r1
 1568 0036 04D1     		bne	.L119
 1569              	.L121:
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1570              		.loc 1 1259 0
 1571 0038 DA68     		ldr	r2, [r3, #12]
 1572              	.LVL139:
 1573 003a 1040     		and	r0, r2
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
 1574              		.loc 1 1245 0
 1575 003c 421E     		sub	r2, r0, #1
 1576 003e 9041     		sbc	r0, r0, r2
 1577 0040 02E0     		b	.L118
 1578              	.LVL140:
 1579              	.L119:
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1580              		.loc 1 1257 0 discriminator 1
 1581 0042 002A     		cmp	r2, #0
 1582 0044 F0D0     		beq	.L120
 1583 0046 F7E7     		b	.L121
 1584              	.LVL141:
 1585              	.L118:
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1586              		.loc 1 1270 0
 1587 0048 FF22     		mov	r2, #255
 1588 004a 5A62     		str	r2, [r3, #36]
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1589              		.loc 1 1273 0
 1590              		@ sp needed for prologue
 1591 004c 16BD     		pop	{r1, r2, r4, pc}
 1592              	.L127:
 1593 004e C046     		.align	2
 1594              	.L126:
 1595 0050 00280040 		.word	1073752064
 1596              		.cfi_endproc
 1597              	.LFE52:
 1599              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1600              		.align	1
 1601              		.global	RTC_AlarmSubSecondConfig
 1602              		.code	16
 1603              		.thumb_func
 1605              	RTC_AlarmSubSecondConfig:
 1606              	.LFB53:
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1607              		.loc 1 1319 0
 1608              		.cfi_startproc
 1609              	.LVL142:
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1610              		.loc 1 1328 0
 1611 0000 054B     		ldr	r3, .L129
 1612 0002 CA20     		mov	r0, #202
 1613              	.LVL143:
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) 
 1614              		.loc 1 1332 0
 1615 0004 1206     		lsl	r2, r2, #24
 1616              	.LVL144:
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1617              		.loc 1 1328 0
 1618 0006 5862     		str	r0, [r3, #36]
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) 
 1619              		.loc 1 1332 0
 1620 0008 1143     		orr	r1, r2
 1621              	.LVL145:
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1622              		.loc 1 1329 0
 1623 000a 5320     		mov	r0, #83
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1624              		.loc 1 1338 0
 1625 000c FF22     		mov	r2, #255
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1626              		.loc 1 1329 0
 1627 000e 5862     		str	r0, [r3, #36]
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1628              		.loc 1 1340 0
 1629              		@ sp needed for prologue
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMASSR = tmpreg;
 1630              		.loc 1 1335 0
 1631 0010 5964     		str	r1, [r3, #68]
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1632              		.loc 1 1338 0
 1633 0012 5A62     		str	r2, [r3, #36]
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1634              		.loc 1 1340 0
 1635 0014 7047     		bx	lr
 1636              	.L130:
 1637 0016 C046     		.align	2
 1638              	.L129:
 1639 0018 00280040 		.word	1073752064
 1640              		.cfi_endproc
 1641              	.LFE53:
 1643              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1644              		.align	1
 1645              		.global	RTC_GetAlarmSubSecond
 1646              		.code	16
 1647              		.thumb_func
 1649              	RTC_GetAlarmSubSecond:
 1650              	.LFB54:
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1651              		.loc 1 1351 0
 1652              		.cfi_startproc
 1653              	.LVL146:
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 1654              		.loc 1 1355 0
 1655 0000 024B     		ldr	r3, .L132
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1656              		.loc 1 1358 0
 1657              		@ sp needed for prologue
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 1658              		.loc 1 1355 0
 1659 0002 586C     		ldr	r0, [r3, #68]
 1660              	.LVL147:
 1661 0004 4004     		lsl	r0, r0, #17
 1662              	.LVL148:
 1663 0006 400C     		lsr	r0, r0, #17
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1664              		.loc 1 1358 0
 1665 0008 7047     		bx	lr
 1666              	.L133:
 1667 000a C046     		.align	2
 1668              	.L132:
 1669 000c 00280040 		.word	1073752064
 1670              		.cfi_endproc
 1671              	.LFE54:
 1673              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1674              		.align	1
 1675              		.global	RTC_WakeUpClockConfig
 1676              		.code	16
 1677              		.thumb_func
 1679              	RTC_WakeUpClockConfig:
 1680              	.LFB55:
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1681              		.loc 1 1394 0
 1682              		.cfi_startproc
 1683              	.LVL149:
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1684              		.loc 1 1399 0
 1685 0000 074B     		ldr	r3, .L135
 1686 0002 CA22     		mov	r2, #202
 1687 0004 5A62     		str	r2, [r3, #36]
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1688              		.loc 1 1400 0
 1689 0006 5322     		mov	r2, #83
 1690 0008 5A62     		str	r2, [r3, #36]
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1691              		.loc 1 1403 0
 1692 000a 9A68     		ldr	r2, [r3, #8]
 1693 000c 0721     		mov	r1, #7
 1694 000e 8A43     		bic	r2, r1
 1695 0010 9A60     		str	r2, [r3, #8]
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1696              		.loc 1 1406 0
 1697 0012 9A68     		ldr	r2, [r3, #8]
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1698              		.loc 1 1410 0
 1699              		@ sp needed for prologue
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1700              		.loc 1 1406 0
 1701 0014 1043     		orr	r0, r2
 1702              	.LVL150:
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1703              		.loc 1 1409 0
 1704 0016 FF22     		mov	r2, #255
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1705              		.loc 1 1406 0
 1706 0018 9860     		str	r0, [r3, #8]
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1707              		.loc 1 1409 0
 1708 001a 5A62     		str	r2, [r3, #36]
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1709              		.loc 1 1410 0
 1710 001c 7047     		bx	lr
 1711              	.L136:
 1712 001e C046     		.align	2
 1713              	.L135:
 1714 0020 00280040 		.word	1073752064
 1715              		.cfi_endproc
 1716              	.LFE55:
 1718              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1719              		.align	1
 1720              		.global	RTC_SetWakeUpCounter
 1721              		.code	16
 1722              		.thumb_func
 1724              	RTC_SetWakeUpCounter:
 1725              	.LFB56:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1726              		.loc 1 1422 0
 1727              		.cfi_startproc
 1728              	.LVL151:
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1729              		.loc 1 1427 0
 1730 0000 044B     		ldr	r3, .L138
 1731 0002 CA22     		mov	r2, #202
 1732 0004 5A62     		str	r2, [r3, #36]
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1733              		.loc 1 1428 0
 1734 0006 5322     		mov	r2, #83
 1735 0008 5A62     		str	r2, [r3, #36]
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1736              		.loc 1 1434 0
 1737 000a FF22     		mov	r2, #255
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 1738              		.loc 1 1431 0
 1739 000c 5861     		str	r0, [r3, #20]
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1740              		.loc 1 1435 0
 1741              		@ sp needed for prologue
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1742              		.loc 1 1434 0
 1743 000e 5A62     		str	r2, [r3, #36]
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1744              		.loc 1 1435 0
 1745 0010 7047     		bx	lr
 1746              	.L139:
 1747 0012 C046     		.align	2
 1748              	.L138:
 1749 0014 00280040 		.word	1073752064
 1750              		.cfi_endproc
 1751              	.LFE56:
 1753              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1754              		.align	1
 1755              		.global	RTC_GetWakeUpCounter
 1756              		.code	16
 1757              		.thumb_func
 1759              	RTC_GetWakeUpCounter:
 1760              	.LFB57:
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1761              		.loc 1 1444 0
 1762              		.cfi_startproc
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 1763              		.loc 1 1446 0
 1764 0000 014B     		ldr	r3, .L141
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1765              		.loc 1 1447 0
 1766              		@ sp needed for prologue
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 1767              		.loc 1 1446 0
 1768 0002 5869     		ldr	r0, [r3, #20]
 1769 0004 80B2     		uxth	r0, r0
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1770              		.loc 1 1447 0
 1771 0006 7047     		bx	lr
 1772              	.L142:
 1773              		.align	2
 1774              	.L141:
 1775 0008 00280040 		.word	1073752064
 1776              		.cfi_endproc
 1777              	.LFE57:
 1779              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1780              		.align	1
 1781              		.global	RTC_WakeUpCmd
 1782              		.code	16
 1783              		.thumb_func
 1785              	RTC_WakeUpCmd:
 1786              	.LFB58:
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1787              		.loc 1 1457 0
 1788              		.cfi_startproc
 1789              	.LVL152:
 1790 0000 13B5     		push	{r0, r1, r4, lr}
 1791              	.LCFI15:
 1792              		.cfi_def_cfa_offset 16
 1793              		.cfi_offset 0, -16
 1794              		.cfi_offset 1, -12
 1795              		.cfi_offset 4, -8
 1796              		.cfi_offset 14, -4
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1797              		.loc 1 1458 0
 1798 0002 0023     		mov	r3, #0
 1799 0004 0193     		str	r3, [sp, #4]
 1800              	.LVL153:
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1801              		.loc 1 1466 0
 1802 0006 124B     		ldr	r3, .L152
 1803 0008 CA22     		mov	r2, #202
 1804 000a 5A62     		str	r2, [r3, #36]
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1805              		.loc 1 1467 0
 1806 000c 5322     		mov	r2, #83
 1807 000e 5A62     		str	r2, [r3, #36]
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1808              		.loc 1 1472 0
 1809 0010 9968     		ldr	r1, [r3, #8]
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 1810              		.loc 1 1469 0
 1811 0012 0028     		cmp	r0, #0
 1812 0014 05D0     		beq	.L144
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1813              		.loc 1 1472 0
 1814 0016 8022     		mov	r2, #128
 1815 0018 D200     		lsl	r2, r2, #3
 1816 001a 0A43     		orr	r2, r1
 1817 001c 9A60     		str	r2, [r3, #8]
 1818              	.LVL154:
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
 1819              		.loc 1 1473 0
 1820 001e 0120     		mov	r0, #1
 1821              	.LVL155:
 1822 0020 12E0     		b	.L145
 1823              	.LVL156:
 1824              	.L144:
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 1825              		.loc 1 1478 0
 1826 0022 0C4A     		ldr	r2, .L152+4
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1827              		.loc 1 1484 0
 1828 0024 8020     		mov	r0, #128
 1829              	.LVL157:
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 1830              		.loc 1 1478 0
 1831 0026 0A40     		and	r2, r1
 1832 0028 9A60     		str	r2, [r3, #8]
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1833              		.loc 1 1482 0
 1834 002a 0421     		mov	r1, #4
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1835              		.loc 1 1484 0
 1836 002c C001     		lsl	r0, r0, #7
 1837              	.LVL158:
 1838              	.L147:
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1839              		.loc 1 1482 0 discriminator 1
 1840 002e DA68     		ldr	r2, [r3, #12]
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutcounter++;  
 1841              		.loc 1 1483 0 discriminator 1
 1842 0030 019C     		ldr	r4, [sp, #4]
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1843              		.loc 1 1482 0 discriminator 1
 1844 0032 0A40     		and	r2, r1
 1845              	.LVL159:
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutcounter++;  
 1846              		.loc 1 1483 0 discriminator 1
 1847 0034 0134     		add	r4, r4, #1
 1848              	.LVL160:
 1849 0036 0194     		str	r4, [sp, #4]
 1850              	.LVL161:
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1851              		.loc 1 1484 0 discriminator 1
 1852 0038 019C     		ldr	r4, [sp, #4]
 1853              	.LVL162:
 1854 003a 8442     		cmp	r4, r0
 1855 003c 01D0     		beq	.L146
 1856 003e 002A     		cmp	r2, #0
 1857 0040 F5D0     		beq	.L147
 1858              	.L146:
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 1859              		.loc 1 1486 0
 1860 0042 D868     		ldr	r0, [r3, #12]
 1861 0044 4007     		lsl	r0, r0, #29
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
 1862              		.loc 1 1473 0
 1863 0046 C00F     		lsr	r0, r0, #31
 1864              	.LVL163:
 1865              	.L145:
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1866              		.loc 1 1497 0
 1867 0048 FF22     		mov	r2, #255
 1868 004a 5A62     		str	r2, [r3, #36]
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1869              		.loc 1 1500 0
 1870              		@ sp needed for prologue
 1871 004c 16BD     		pop	{r1, r2, r4, pc}
 1872              	.L153:
 1873 004e C046     		.align	2
 1874              	.L152:
 1875 0050 00280040 		.word	1073752064
 1876 0054 FFFBFFFF 		.word	-1025
 1877              		.cfi_endproc
 1878              	.LFE58:
 1880              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1881              		.align	1
 1882              		.global	RTC_DayLightSavingConfig
 1883              		.code	16
 1884              		.thumb_func
 1886              	RTC_DayLightSavingConfig:
 1887              	.LFB59:
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1888              		.loc 1 1535 0
 1889              		.cfi_startproc
 1890              	.LVL164:
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1891              		.loc 1 1541 0
 1892 0000 084B     		ldr	r3, .L155
 1893 0002 CA22     		mov	r2, #202
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1894              		.loc 1 1535 0
 1895 0004 10B5     		push	{r4, lr}
 1896              	.LCFI16:
 1897              		.cfi_def_cfa_offset 8
 1898              		.cfi_offset 4, -8
 1899              		.cfi_offset 14, -4
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1900              		.loc 1 1541 0
 1901 0006 5A62     		str	r2, [r3, #36]
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1902              		.loc 1 1542 0
 1903 0008 5322     		mov	r2, #83
 1904 000a 5A62     		str	r2, [r3, #36]
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 1905              		.loc 1 1545 0
 1906 000c 9C68     		ldr	r4, [r3, #8]
 1907 000e 064A     		ldr	r2, .L155+4
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1908              		.loc 1 1552 0
 1909              		@ sp needed for prologue
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 1910              		.loc 1 1545 0
 1911 0010 2240     		and	r2, r4
 1912 0012 9A60     		str	r2, [r3, #8]
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1913              		.loc 1 1548 0
 1914 0014 9A68     		ldr	r2, [r3, #8]
 1915 0016 1043     		orr	r0, r2
 1916              	.LVL165:
 1917 0018 0843     		orr	r0, r1
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1918              		.loc 1 1551 0
 1919 001a FF22     		mov	r2, #255
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1920              		.loc 1 1548 0
 1921 001c 9860     		str	r0, [r3, #8]
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1922              		.loc 1 1551 0
 1923 001e 5A62     		str	r2, [r3, #36]
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1924              		.loc 1 1552 0
 1925 0020 10BD     		pop	{r4, pc}
 1926              	.L156:
 1927 0022 C046     		.align	2
 1928              	.L155:
 1929 0024 00280040 		.word	1073752064
 1930 0028 FFFFFBFF 		.word	-262145
 1931              		.cfi_endproc
 1932              	.LFE59:
 1934              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1935              		.align	1
 1936              		.global	RTC_GetStoreOperation
 1937              		.code	16
 1938              		.thumb_func
 1940              	RTC_GetStoreOperation:
 1941              	.LFB60:
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1942              		.loc 1 1562 0
 1943              		.cfi_startproc
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1944              		.loc 1 1563 0
 1945 0000 024B     		ldr	r3, .L158
 1946 0002 8020     		mov	r0, #128
 1947 0004 9B68     		ldr	r3, [r3, #8]
 1948 0006 C002     		lsl	r0, r0, #11
 1949 0008 1840     		and	r0, r3
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1950              		.loc 1 1564 0
 1951              		@ sp needed for prologue
 1952 000a 7047     		bx	lr
 1953              	.L159:
 1954              		.align	2
 1955              	.L158:
 1956 000c 00280040 		.word	1073752064
 1957              		.cfi_endproc
 1958              	.LFE60:
 1960              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1961              		.align	1
 1962              		.global	RTC_OutputConfig
 1963              		.code	16
 1964              		.thumb_func
 1966              	RTC_OutputConfig:
 1967              	.LFB61:
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1968              		.loc 1 1599 0
 1969              		.cfi_startproc
 1970              	.LVL166:
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1971              		.loc 1 1605 0
 1972 0000 084B     		ldr	r3, .L161
 1973 0002 CA22     		mov	r2, #202
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1974              		.loc 1 1599 0
 1975 0004 10B5     		push	{r4, lr}
 1976              	.LCFI17:
 1977              		.cfi_def_cfa_offset 8
 1978              		.cfi_offset 4, -8
 1979              		.cfi_offset 14, -4
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1980              		.loc 1 1605 0
 1981 0006 5A62     		str	r2, [r3, #36]
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1982              		.loc 1 1606 0
 1983 0008 5322     		mov	r2, #83
 1984 000a 5A62     		str	r2, [r3, #36]
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 1985              		.loc 1 1609 0
 1986 000c 9C68     		ldr	r4, [r3, #8]
 1987 000e 064A     		ldr	r2, .L161+4
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1988              		.loc 1 1616 0
 1989              		@ sp needed for prologue
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 1990              		.loc 1 1609 0
 1991 0010 2240     		and	r2, r4
 1992 0012 9A60     		str	r2, [r3, #8]
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1993              		.loc 1 1612 0
 1994 0014 9A68     		ldr	r2, [r3, #8]
 1995 0016 1043     		orr	r0, r2
 1996              	.LVL167:
 1997 0018 0843     		orr	r0, r1
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1998              		.loc 1 1615 0
 1999 001a FF22     		mov	r2, #255
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2000              		.loc 1 1612 0
 2001 001c 9860     		str	r0, [r3, #8]
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2002              		.loc 1 1615 0
 2003 001e 5A62     		str	r2, [r3, #36]
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2004              		.loc 1 1616 0
 2005 0020 10BD     		pop	{r4, pc}
 2006              	.L162:
 2007 0022 C046     		.align	2
 2008              	.L161:
 2009 0024 00280040 		.word	1073752064
 2010 0028 FFFF8FFF 		.word	-7340033
 2011              		.cfi_endproc
 2012              	.LFE61:
 2014              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2015              		.align	1
 2016              		.global	RTC_CalibOutputCmd
 2017              		.code	16
 2018              		.thumb_func
 2020              	RTC_CalibOutputCmd:
 2021              	.LFB62:
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2022              		.loc 1 1641 0
 2023              		.cfi_startproc
 2024              	.LVL168:
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2025              		.loc 1 1646 0
 2026 0000 094B     		ldr	r3, .L167
 2027 0002 CA22     		mov	r2, #202
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2028              		.loc 1 1641 0
 2029 0004 00B5     		push	{lr}
 2030              	.LCFI18:
 2031              		.cfi_def_cfa_offset 4
 2032              		.cfi_offset 14, -4
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2033              		.loc 1 1646 0
 2034 0006 5A62     		str	r2, [r3, #36]
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2035              		.loc 1 1647 0
 2036 0008 5322     		mov	r2, #83
 2037 000a 5A62     		str	r2, [r3, #36]
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2038              		.loc 1 1652 0
 2039 000c 9968     		ldr	r1, [r3, #8]
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2040              		.loc 1 1649 0
 2041 000e 0028     		cmp	r0, #0
 2042 0010 03D0     		beq	.L164
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2043              		.loc 1 1652 0
 2044 0012 8022     		mov	r2, #128
 2045 0014 1204     		lsl	r2, r2, #16
 2046 0016 0A43     		orr	r2, r1
 2047 0018 01E0     		b	.L166
 2048              	.L164:
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2049              		.loc 1 1657 0
 2050 001a 044A     		ldr	r2, .L167+4
 2051 001c 0A40     		and	r2, r1
 2052              	.L166:
 2053 001e 9A60     		str	r2, [r3, #8]
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
 2054              		.loc 1 1661 0
 2055 0020 FF22     		mov	r2, #255
 2056 0022 5A62     		str	r2, [r3, #36]
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2057              		.loc 1 1662 0
 2058              		@ sp needed for prologue
 2059 0024 00BD     		pop	{pc}
 2060              	.L168:
 2061 0026 C046     		.align	2
 2062              	.L167:
 2063 0028 00280040 		.word	1073752064
 2064 002c FFFF7FFF 		.word	-8388609
 2065              		.cfi_endproc
 2066              	.LFE62:
 2068              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2069              		.align	1
 2070              		.global	RTC_CalibOutputConfig
 2071              		.code	16
 2072              		.thumb_func
 2074              	RTC_CalibOutputConfig:
 2075              	.LFB63:
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2076              		.loc 1 1673 0
 2077              		.cfi_startproc
 2078              	.LVL169:
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2079              		.loc 1 1678 0
 2080 0000 074B     		ldr	r3, .L170
 2081 0002 CA22     		mov	r2, #202
 2082 0004 5A62     		str	r2, [r3, #36]
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2083              		.loc 1 1679 0
 2084 0006 5322     		mov	r2, #83
 2085 0008 5A62     		str	r2, [r3, #36]
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
 2086              		.loc 1 1682 0
 2087 000a 9968     		ldr	r1, [r3, #8]
 2088 000c 054A     		ldr	r2, .L170+4
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2089              		.loc 1 1689 0
 2090              		@ sp needed for prologue
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
 2091              		.loc 1 1682 0
 2092 000e 0A40     		and	r2, r1
 2093 0010 9A60     		str	r2, [r3, #8]
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2094              		.loc 1 1685 0
 2095 0012 9A68     		ldr	r2, [r3, #8]
 2096 0014 1043     		orr	r0, r2
 2097              	.LVL170:
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2098              		.loc 1 1688 0
 2099 0016 FF22     		mov	r2, #255
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2100              		.loc 1 1685 0
 2101 0018 9860     		str	r0, [r3, #8]
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2102              		.loc 1 1688 0
 2103 001a 5A62     		str	r2, [r3, #36]
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2104              		.loc 1 1689 0
 2105 001c 7047     		bx	lr
 2106              	.L171:
 2107 001e C046     		.align	2
 2108              	.L170:
 2109 0020 00280040 		.word	1073752064
 2110 0024 FFFFF7FF 		.word	-524289
 2111              		.cfi_endproc
 2112              	.LFE63:
 2114              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2115              		.align	1
 2116              		.global	RTC_SmoothCalibConfig
 2117              		.code	16
 2118              		.thumb_func
 2120              	RTC_SmoothCalibConfig:
 2121              	.LFB64:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2122              		.loc 1 1711 0
 2123              		.cfi_startproc
 2124              	.LVL171:
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2125              		.loc 1 1721 0
 2126 0000 0F4B     		ldr	r3, .L184
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2127              		.loc 1 1711 0
 2128 0002 70B5     		push	{r4, r5, r6, lr}
 2129              	.LCFI19:
 2130              		.cfi_def_cfa_offset 16
 2131              		.cfi_offset 4, -16
 2132              		.cfi_offset 5, -12
 2133              		.cfi_offset 6, -8
 2134              		.cfi_offset 14, -4
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2135              		.loc 1 1721 0
 2136 0004 CA24     		mov	r4, #202
 2137 0006 5C62     		str	r4, [r3, #36]
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2138              		.loc 1 1722 0
 2139 0008 5324     		mov	r4, #83
 2140 000a 5C62     		str	r4, [r3, #36]
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2141              		.loc 1 1725 0
 2142 000c 8025     		mov	r5, #128
 2143 000e DC68     		ldr	r4, [r3, #12]
 2144 0010 6D02     		lsl	r5, r5, #9
 2145 0012 2C42     		tst	r4, r5
 2146 0014 06D0     		beq	.L173
 2147 0016 0B4C     		ldr	r4, .L184+4
 2148              	.LVL172:
 2149              	.L174:
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2150              		.loc 1 1728 0 discriminator 1
 2151 0018 DE68     		ldr	r6, [r3, #12]
 2152 001a 2E42     		tst	r6, r5
 2153 001c 02D0     		beq	.L173
 2154 001e 013C     		sub	r4, r4, #1
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2155              		.loc 1 1728 0 is_stmt 0 discriminator 2
 2156 0020 002C     		cmp	r4, #0
 2157 0022 F9D1     		bne	.L174
 2158              	.L173:
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2159              		.loc 1 1735 0 is_stmt 1
 2160 0024 DD68     		ldr	r5, [r3, #12]
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 2161              		.loc 1 1744 0
 2162 0026 0024     		mov	r4, #0
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2163              		.loc 1 1735 0
 2164 0028 EE03     		lsl	r6, r5, #15
 2165 002a 04D4     		bmi	.L175
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2166              		.loc 1 1738 0
 2167 002c 044C     		ldr	r4, .L184
 2168 002e 0843     		orr	r0, r1
 2169              	.LVL173:
 2170 0030 1043     		orr	r0, r2
 2171 0032 E063     		str	r0, [r4, #60]
 2172              	.LVL174:
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 2173              		.loc 1 1740 0
 2174 0034 0124     		mov	r4, #1
 2175              	.LVL175:
 2176              	.L175:
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2177              		.loc 1 1748 0
 2178 0036 FF22     		mov	r2, #255
 2179              	.LVL176:
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2180              		.loc 1 1751 0
 2181 0038 201C     		mov	r0, r4
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2182              		.loc 1 1748 0
 2183 003a 5A62     		str	r2, [r3, #36]
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2184              		.loc 1 1751 0
 2185              		@ sp needed for prologue
 2186              	.LVL177:
 2187 003c 70BD     		pop	{r4, r5, r6, pc}
 2188              	.L185:
 2189 003e C046     		.align	2
 2190              	.L184:
 2191 0040 00280040 		.word	1073752064
 2192 0044 01100000 		.word	4097
 2193              		.cfi_endproc
 2194              	.LFE64:
 2196              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2197              		.align	1
 2198              		.global	RTC_TimeStampCmd
 2199              		.code	16
 2200              		.thumb_func
 2202              	RTC_TimeStampCmd:
 2203              	.LFB65:
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2204              		.loc 1 1785 0
 2205              		.cfi_startproc
 2206              	.LVL178:
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2207              		.loc 1 1793 0
 2208 0000 094B     		ldr	r3, .L189
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2209              		.loc 1 1785 0
 2210 0002 10B5     		push	{r4, lr}
 2211              	.LCFI20:
 2212              		.cfi_def_cfa_offset 8
 2213              		.cfi_offset 4, -8
 2214              		.cfi_offset 14, -4
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2215              		.loc 1 1793 0
 2216 0004 094A     		ldr	r2, .L189+4
 2217 0006 9C68     		ldr	r4, [r3, #8]
 2218 0008 2240     		and	r2, r4
 2219              	.LVL179:
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2220              		.loc 1 1796 0
 2221 000a 0029     		cmp	r1, #0
 2222 000c 02D0     		beq	.L187
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 2223              		.loc 1 1798 0
 2224 000e 8021     		mov	r1, #128
 2225              	.LVL180:
 2226 0010 0901     		lsl	r1, r1, #4
 2227 0012 0A43     		orr	r2, r1
 2228              	.LVL181:
 2229              	.L187:
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 2230              		.loc 1 1802 0
 2231 0014 1043     		orr	r0, r2
 2232              	.LVL182:
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2233              		.loc 1 1806 0
 2234 0016 CA22     		mov	r2, #202
 2235 0018 5A62     		str	r2, [r3, #36]
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2236              		.loc 1 1807 0
 2237 001a 5322     		mov	r2, #83
 2238 001c 5A62     		str	r2, [r3, #36]
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2239              		.loc 1 1813 0
 2240 001e FF22     		mov	r2, #255
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 2241              		.loc 1 1810 0
 2242 0020 9860     		str	r0, [r3, #8]
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2243              		.loc 1 1814 0
 2244              		@ sp needed for prologue
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2245              		.loc 1 1813 0
 2246 0022 5A62     		str	r2, [r3, #36]
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2247              		.loc 1 1814 0
 2248 0024 10BD     		pop	{r4, pc}
 2249              	.L190:
 2250 0026 C046     		.align	2
 2251              	.L189:
 2252 0028 00280040 		.word	1073752064
 2253 002c F7F7FFFF 		.word	-2057
 2254              		.cfi_endproc
 2255              	.LFE65:
 2257              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2258              		.align	1
 2259              		.global	RTC_GetTimeStamp
 2260              		.code	16
 2261              		.thumb_func
 2263              	RTC_GetTimeStamp:
 2264              	.LFB66:
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2265              		.loc 1 1830 0
 2266              		.cfi_startproc
 2267              	.LVL183:
 2268 0000 38B5     		push	{r3, r4, r5, lr}
 2269              	.LCFI21:
 2270              		.cfi_def_cfa_offset 16
 2271              		.cfi_offset 3, -16
 2272              		.cfi_offset 4, -12
 2273              		.cfi_offset 5, -8
 2274              		.cfi_offset 14, -4
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2275              		.loc 1 1830 0
 2276 0002 141C     		mov	r4, r2
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2277              		.loc 1 1837 0
 2278 0004 1B4A     		ldr	r2, .L193
 2279              	.LVL184:
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2280              		.loc 1 1830 0
 2281 0006 0D1C     		mov	r5, r1
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2282              		.loc 1 1837 0
 2283 0008 136B     		ldr	r3, [r2, #48]
 2284              	.LVL185:
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2285              		.loc 1 1838 0
 2286 000a 526B     		ldr	r2, [r2, #52]
 2287              	.LVL186:
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 2288              		.loc 1 1841 0
 2289 000c 9902     		lsl	r1, r3, #10
 2290              	.LVL187:
 2291 000e 890E     		lsr	r1, r1, #26
 2292 0010 2970     		strb	r1, [r5]
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2293              		.loc 1 1842 0
 2294 0012 5904     		lsl	r1, r3, #17
 2295 0014 490E     		lsr	r1, r1, #25
 2296 0016 6970     		strb	r1, [r5, #1]
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2297              		.loc 1 1843 0
 2298 0018 7F21     		mov	r1, #127
 2299 001a 1940     		and	r1, r3
 2300 001c A970     		strb	r1, [r5, #2]
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2301              		.loc 1 1844 0
 2302 001e 8021     		mov	r1, #128
 2303 0020 C903     		lsl	r1, r1, #15
 2304 0022 0B40     		and	r3, r1
 2305              	.LVL188:
 2306 0024 1B0C     		lsr	r3, r3, #16
 2307 0026 EB70     		strb	r3, [r5, #3]
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2308              		.loc 1 1847 0
 2309 0028 0023     		mov	r3, #0
 2310 002a E370     		strb	r3, [r4, #3]
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2311              		.loc 1 1848 0
 2312 002c D304     		lsl	r3, r2, #19
 2313 002e DB0E     		lsr	r3, r3, #27
 2314 0030 6370     		strb	r3, [r4, #1]
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2315              		.loc 1 1849 0
 2316 0032 3F23     		mov	r3, #63
 2317 0034 1340     		and	r3, r2
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2318              		.loc 1 1850 0
 2319 0036 1204     		lsl	r2, r2, #16
 2320              	.LVL189:
 2321 0038 520F     		lsr	r2, r2, #29
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2322              		.loc 1 1849 0
 2323 003a A370     		strb	r3, [r4, #2]
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2324              		.loc 1 1850 0
 2325 003c 2270     		strb	r2, [r4]
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2326              		.loc 1 1853 0
 2327 003e 0028     		cmp	r0, #0
 2328 0040 17D1     		bne	.L191
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 2329              		.loc 1 1856 0
 2330 0042 2878     		ldrb	r0, [r5]
 2331              	.LVL190:
 2332 0044 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2333              	.LVL191:
 2334 0048 2870     		strb	r0, [r5]
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2335              		.loc 1 1857 0
 2336 004a 6878     		ldrb	r0, [r5, #1]
 2337 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2338              	.LVL192:
 2339 0050 6870     		strb	r0, [r5, #1]
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2340              		.loc 1 1858 0
 2341 0052 A878     		ldrb	r0, [r5, #2]
 2342 0054 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2343              	.LVL193:
 2344 0058 A870     		strb	r0, [r5, #2]
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 2345              		.loc 1 1861 0
 2346 005a 6078     		ldrb	r0, [r4, #1]
 2347 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2348              	.LVL194:
 2349 0060 6070     		strb	r0, [r4, #1]
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2350              		.loc 1 1862 0
 2351 0062 A078     		ldrb	r0, [r4, #2]
 2352 0064 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2353              	.LVL195:
 2354 0068 A070     		strb	r0, [r4, #2]
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2355              		.loc 1 1863 0
 2356 006a 2078     		ldrb	r0, [r4]
 2357 006c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2358              	.LVL196:
 2359 0070 2070     		strb	r0, [r4]
 2360              	.L191:
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2361              		.loc 1 1865 0
 2362              		@ sp needed for prologue
 2363              	.LVL197:
 2364              	.LVL198:
 2365 0072 38BD     		pop	{r3, r4, r5, pc}
 2366              	.L194:
 2367              		.align	2
 2368              	.L193:
 2369 0074 00280040 		.word	1073752064
 2370              		.cfi_endproc
 2371              	.LFE66:
 2373              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2374              		.align	1
 2375              		.global	RTC_GetTimeStampSubSecond
 2376              		.code	16
 2377              		.thumb_func
 2379              	RTC_GetTimeStampSubSecond:
 2380              	.LFB67:
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2381              		.loc 1 1873 0
 2382              		.cfi_startproc
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 2383              		.loc 1 1875 0
 2384 0000 014B     		ldr	r3, .L196
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2385              		.loc 1 1876 0
 2386              		@ sp needed for prologue
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 2387              		.loc 1 1875 0
 2388 0002 986B     		ldr	r0, [r3, #56]
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2389              		.loc 1 1876 0
 2390 0004 7047     		bx	lr
 2391              	.L197:
 2392 0006 C046     		.align	2
 2393              	.L196:
 2394 0008 00280040 		.word	1073752064
 2395              		.cfi_endproc
 2396              	.LFE67:
 2398              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2399              		.align	1
 2400              		.global	RTC_TamperTriggerConfig
 2401              		.code	16
 2402              		.thumb_func
 2404              	RTC_TamperTriggerConfig:
 2405              	.LFB68:
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2406              		.loc 1 1910 0
 2407              		.cfi_startproc
 2408              	.LVL199:
 2409 0000 054B     		ldr	r3, .L201
 2410 0002 00B5     		push	{lr}
 2411              	.LCFI22:
 2412              		.cfi_def_cfa_offset 4
 2413              		.cfi_offset 14, -4
 2414 0004 4000     		lsl	r0, r0, #1
 2415              	.LVL200:
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2416              		.loc 1 1918 0
 2417 0006 1A6C     		ldr	r2, [r3, #64]
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 2418              		.loc 1 1915 0
 2419 0008 0029     		cmp	r1, #0
 2420 000a 02D1     		bne	.L199
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2421              		.loc 1 1918 0
 2422 000c 8243     		bic	r2, r0
 2423 000e 1A64     		str	r2, [r3, #64]
 2424 0010 01E0     		b	.L198
 2425              	.L199:
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 2426              		.loc 1 1923 0
 2427 0012 1043     		orr	r0, r2
 2428 0014 1864     		str	r0, [r3, #64]
 2429              	.L198:
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2430              		.loc 1 1925 0
 2431              		@ sp needed for prologue
 2432 0016 00BD     		pop	{pc}
 2433              	.L202:
 2434              		.align	2
 2435              	.L201:
 2436 0018 00280040 		.word	1073752064
 2437              		.cfi_endproc
 2438              	.LFE68:
 2440              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2441              		.align	1
 2442              		.global	RTC_TamperCmd
 2443              		.code	16
 2444              		.thumb_func
 2446              	RTC_TamperCmd:
 2447              	.LFB69:
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2448              		.loc 1 1938 0
 2449              		.cfi_startproc
 2450              	.LVL201:
 2451 0000 054B     		ldr	r3, .L206
 2452 0002 00B5     		push	{lr}
 2453              	.LCFI23:
 2454              		.cfi_def_cfa_offset 4
 2455              		.cfi_offset 14, -4
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2456              		.loc 1 1946 0
 2457 0004 1A6C     		ldr	r2, [r3, #64]
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2458              		.loc 1 1943 0
 2459 0006 0029     		cmp	r1, #0
 2460 0008 02D0     		beq	.L204
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2461              		.loc 1 1946 0
 2462 000a 1043     		orr	r0, r2
 2463              	.LVL202:
 2464 000c 1864     		str	r0, [r3, #64]
 2465 000e 01E0     		b	.L203
 2466              	.LVL203:
 2467              	.L204:
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 2468              		.loc 1 1951 0
 2469 0010 8243     		bic	r2, r0
 2470 0012 1A64     		str	r2, [r3, #64]
 2471              	.LVL204:
 2472              	.L203:
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2473              		.loc 1 1953 0
 2474              		@ sp needed for prologue
 2475 0014 00BD     		pop	{pc}
 2476              	.L207:
 2477 0016 C046     		.align	2
 2478              	.L206:
 2479 0018 00280040 		.word	1073752064
 2480              		.cfi_endproc
 2481              	.LFE69:
 2483              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2484              		.align	1
 2485              		.global	RTC_TamperFilterConfig
 2486              		.code	16
 2487              		.thumb_func
 2489              	RTC_TamperFilterConfig:
 2490              	.LFB70:
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2491              		.loc 1 1969 0
 2492              		.cfi_startproc
 2493              	.LVL205:
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 2494              		.loc 1 1974 0
 2495 0000 044B     		ldr	r3, .L209
 2496 0002 054A     		ldr	r2, .L209+4
 2497 0004 196C     		ldr	r1, [r3, #64]
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2498              		.loc 1 1978 0
 2499              		@ sp needed for prologue
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 2500              		.loc 1 1974 0
 2501 0006 0A40     		and	r2, r1
 2502 0008 1A64     		str	r2, [r3, #64]
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 2503              		.loc 1 1977 0
 2504 000a 1A6C     		ldr	r2, [r3, #64]
 2505 000c 1043     		orr	r0, r2
 2506              	.LVL206:
 2507 000e 1864     		str	r0, [r3, #64]
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2508              		.loc 1 1978 0
 2509 0010 7047     		bx	lr
 2510              	.L210:
 2511 0012 C046     		.align	2
 2512              	.L209:
 2513 0014 00280040 		.word	1073752064
 2514 0018 FFE7FFFF 		.word	-6145
 2515              		.cfi_endproc
 2516              	.LFE70:
 2518              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2519              		.align	1
 2520              		.global	RTC_TamperSamplingFreqConfig
 2521              		.code	16
 2522              		.thumb_func
 2524              	RTC_TamperSamplingFreqConfig:
 2525              	.LFB71:
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2526              		.loc 1 2003 0
 2527              		.cfi_startproc
 2528              	.LVL207:
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 2529              		.loc 1 2008 0
 2530 0000 044B     		ldr	r3, .L212
 2531 0002 054A     		ldr	r2, .L212+4
 2532 0004 196C     		ldr	r1, [r3, #64]
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2533              		.loc 1 2012 0
 2534              		@ sp needed for prologue
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 2535              		.loc 1 2008 0
 2536 0006 0A40     		and	r2, r1
 2537 0008 1A64     		str	r2, [r3, #64]
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 2538              		.loc 1 2011 0
 2539 000a 1A6C     		ldr	r2, [r3, #64]
 2540 000c 1043     		orr	r0, r2
 2541              	.LVL208:
 2542 000e 1864     		str	r0, [r3, #64]
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2543              		.loc 1 2012 0
 2544 0010 7047     		bx	lr
 2545              	.L213:
 2546 0012 C046     		.align	2
 2547              	.L212:
 2548 0014 00280040 		.word	1073752064
 2549 0018 FFF8FFFF 		.word	-1793
 2550              		.cfi_endproc
 2551              	.LFE71:
 2553              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2554              		.align	1
 2555              		.global	RTC_TamperPinsPrechargeDuration
 2556              		.code	16
 2557              		.thumb_func
 2559              	RTC_TamperPinsPrechargeDuration:
 2560              	.LFB72:
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2561              		.loc 1 2026 0
 2562              		.cfi_startproc
 2563              	.LVL209:
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 2564              		.loc 1 2031 0
 2565 0000 044B     		ldr	r3, .L215
 2566 0002 054A     		ldr	r2, .L215+4
 2567 0004 196C     		ldr	r1, [r3, #64]
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2568              		.loc 1 2035 0
 2569              		@ sp needed for prologue
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 2570              		.loc 1 2031 0
 2571 0006 0A40     		and	r2, r1
 2572 0008 1A64     		str	r2, [r3, #64]
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 2573              		.loc 1 2034 0
 2574 000a 1A6C     		ldr	r2, [r3, #64]
 2575 000c 1043     		orr	r0, r2
 2576              	.LVL210:
 2577 000e 1864     		str	r0, [r3, #64]
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2578              		.loc 1 2035 0
 2579 0010 7047     		bx	lr
 2580              	.L216:
 2581 0012 C046     		.align	2
 2582              	.L215:
 2583 0014 00280040 		.word	1073752064
 2584 0018 FF9FFFFF 		.word	-24577
 2585              		.cfi_endproc
 2586              	.LFE72:
 2588              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2589              		.align	1
 2590              		.global	RTC_TimeStampOnTamperDetectionCmd
 2591              		.code	16
 2592              		.thumb_func
 2594              	RTC_TimeStampOnTamperDetectionCmd:
 2595              	.LFB73:
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2596              		.loc 1 2046 0
 2597              		.cfi_startproc
 2598              	.LVL211:
 2599 0000 054B     		ldr	r3, .L221
 2600 0002 00B5     		push	{lr}
 2601              	.LCFI24:
 2602              		.cfi_def_cfa_offset 4
 2603              		.cfi_offset 14, -4
 2604 0004 8022     		mov	r2, #128
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2605              		.loc 1 2053 0
 2606 0006 196C     		ldr	r1, [r3, #64]
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2607              		.loc 1 2050 0
 2608 0008 0028     		cmp	r0, #0
 2609 000a 01D0     		beq	.L218
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2610              		.loc 1 2053 0
 2611 000c 0A43     		orr	r2, r1
 2612 000e 01E0     		b	.L220
 2613              	.L218:
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 2614              		.loc 1 2058 0
 2615 0010 9143     		bic	r1, r2
 2616 0012 0A1C     		mov	r2, r1
 2617              	.L220:
 2618 0014 1A64     		str	r2, [r3, #64]
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2619              		.loc 1 2060 0
 2620              		@ sp needed for prologue
 2621 0016 00BD     		pop	{pc}
 2622              	.L222:
 2623              		.align	2
 2624              	.L221:
 2625 0018 00280040 		.word	1073752064
 2626              		.cfi_endproc
 2627              	.LFE73:
 2629              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2630              		.align	1
 2631              		.global	RTC_TamperPullUpCmd
 2632              		.code	16
 2633              		.thumb_func
 2635              	RTC_TamperPullUpCmd:
 2636              	.LFB74:
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2637              		.loc 1 2069 0
 2638              		.cfi_startproc
 2639              	.LVL212:
 2640 0000 064B     		ldr	r3, .L227
 2641 0002 00B5     		push	{lr}
 2642              	.LCFI25:
 2643              		.cfi_def_cfa_offset 4
 2644              		.cfi_offset 14, -4
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2645              		.loc 1 2076 0
 2646 0004 196C     		ldr	r1, [r3, #64]
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  if (NewState != DISABLE)
 2647              		.loc 1 2073 0
 2648 0006 0028     		cmp	r0, #0
 2649 0008 02D0     		beq	.L224
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2650              		.loc 1 2076 0
 2651 000a 054A     		ldr	r2, .L227+4
 2652 000c 0A40     		and	r2, r1
 2653 000e 02E0     		b	.L226
 2654              	.L224:
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 2655              		.loc 1 2081 0
 2656 0010 8022     		mov	r2, #128
 2657 0012 1202     		lsl	r2, r2, #8
 2658 0014 0A43     		orr	r2, r1
 2659              	.L226:
 2660 0016 1A64     		str	r2, [r3, #64]
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2661              		.loc 1 2083 0
 2662              		@ sp needed for prologue
 2663 0018 00BD     		pop	{pc}
 2664              	.L228:
 2665 001a C046     		.align	2
 2666              	.L227:
 2667 001c 00280040 		.word	1073752064
 2668 0020 FF7FFFFF 		.word	-32769
 2669              		.cfi_endproc
 2670              	.LFE74:
 2672              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2673              		.align	1
 2674              		.global	RTC_WriteBackupRegister
 2675              		.code	16
 2676              		.thumb_func
 2678              	RTC_WriteBackupRegister:
 2679              	.LFB75:
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2680              		.loc 1 2110 0
 2681              		.cfi_startproc
 2682              	.LVL213:
 2683 0000 82B0     		sub	sp, sp, #8
 2684              	.LCFI26:
 2685              		.cfi_def_cfa_offset 8
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
 2686              		.loc 1 2111 0
 2687 0002 0023     		mov	r3, #0
 2688 0004 0193     		str	r3, [sp, #4]
 2689              	.LVL214:
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2690              		.loc 1 2116 0
 2691 0006 054B     		ldr	r3, .L230
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2692              		.loc 1 2117 0
 2693 0008 8000     		lsl	r0, r0, #2
 2694              	.LVL215:
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2695              		.loc 1 2116 0
 2696 000a 0193     		str	r3, [sp, #4]
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2697              		.loc 1 2117 0
 2698 000c 019B     		ldr	r3, [sp, #4]
 2699 000e C018     		add	r0, r0, r3
 2700              	.LVL216:
 2701 0010 0190     		str	r0, [sp, #4]
 2702              	.LVL217:
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 2703              		.loc 1 2120 0
 2704 0012 019B     		ldr	r3, [sp, #4]
 2705 0014 1960     		str	r1, [r3]
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2706              		.loc 1 2121 0
 2707 0016 02B0     		add	sp, sp, #8
 2708              		@ sp needed for prologue
 2709 0018 7047     		bx	lr
 2710              	.L231:
 2711 001a C046     		.align	2
 2712              	.L230:
 2713 001c 50280040 		.word	1073752144
 2714              		.cfi_endproc
 2715              	.LFE75:
 2717              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2718              		.align	1
 2719              		.global	RTC_ReadBackupRegister
 2720              		.code	16
 2721              		.thumb_func
 2723              	RTC_ReadBackupRegister:
 2724              	.LFB76:
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2725              		.loc 1 2131 0
 2726              		.cfi_startproc
 2727              	.LVL218:
 2728 0000 82B0     		sub	sp, sp, #8
 2729              	.LCFI27:
 2730              		.cfi_def_cfa_offset 8
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
 2731              		.loc 1 2132 0
 2732 0002 0023     		mov	r3, #0
 2733 0004 0193     		str	r3, [sp, #4]
 2734              	.LVL219:
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2735              		.loc 1 2137 0
 2736 0006 054B     		ldr	r3, .L233
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2737              		.loc 1 2138 0
 2738 0008 8000     		lsl	r0, r0, #2
 2739              	.LVL220:
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2740              		.loc 1 2137 0
 2741 000a 0193     		str	r3, [sp, #4]
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2742              		.loc 1 2138 0
 2743 000c 019B     		ldr	r3, [sp, #4]
 2744 000e C018     		add	r0, r0, r3
 2745              	.LVL221:
 2746 0010 0190     		str	r0, [sp, #4]
 2747              	.LVL222:
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 2748              		.loc 1 2141 0
 2749 0012 019B     		ldr	r3, [sp, #4]
 2750 0014 1868     		ldr	r0, [r3]
 2751              	.LVL223:
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2752              		.loc 1 2142 0
 2753 0016 02B0     		add	sp, sp, #8
 2754              		@ sp needed for prologue
 2755 0018 7047     		bx	lr
 2756              	.L234:
 2757 001a C046     		.align	2
 2758              	.L233:
 2759 001c 50280040 		.word	1073752144
 2760              		.cfi_endproc
 2761              	.LFE76:
 2763              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2764              		.align	1
 2765              		.global	RTC_OutputTypeConfig
 2766              		.code	16
 2767              		.thumb_func
 2769              	RTC_OutputTypeConfig:
 2770              	.LFB77:
2171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2771              		.loc 1 2171 0
 2772              		.cfi_startproc
 2773              	.LVL224:
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 2774              		.loc 1 2175 0
 2775 0000 044B     		ldr	r3, .L236
 2776 0002 054A     		ldr	r2, .L236+4
 2777 0004 196C     		ldr	r1, [r3, #64]
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2778              		.loc 1 2177 0
 2779              		@ sp needed for prologue
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 2780              		.loc 1 2175 0
 2781 0006 0A40     		and	r2, r1
 2782 0008 1A64     		str	r2, [r3, #64]
2176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2783              		.loc 1 2176 0
 2784 000a 1A6C     		ldr	r2, [r3, #64]
 2785 000c 1043     		orr	r0, r2
 2786              	.LVL225:
 2787 000e 1864     		str	r0, [r3, #64]
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2788              		.loc 1 2177 0
 2789 0010 7047     		bx	lr
 2790              	.L237:
 2791 0012 C046     		.align	2
 2792              	.L236:
 2793 0014 00280040 		.word	1073752064
 2794 0018 FFFFFBFF 		.word	-262145
 2795              		.cfi_endproc
 2796              	.LFE77:
 2798              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 2799              		.align	1
 2800              		.global	RTC_SynchroShiftConfig
 2801              		.code	16
 2802              		.thumb_func
 2804              	RTC_SynchroShiftConfig:
 2805              	.LFB78:
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2806              		.loc 1 2209 0
 2807              		.cfi_startproc
 2808              	.LVL226:
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2809              		.loc 1 2218 0
 2810 0000 114B     		ldr	r3, .L251
 2811 0002 CA22     		mov	r2, #202
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2812              		.loc 1 2209 0
 2813 0004 70B5     		push	{r4, r5, r6, lr}
 2814              	.LCFI28:
 2815              		.cfi_def_cfa_offset 16
 2816              		.cfi_offset 4, -16
 2817              		.cfi_offset 5, -12
 2818              		.cfi_offset 6, -8
 2819              		.cfi_offset 14, -4
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2820              		.loc 1 2218 0
 2821 0006 5A62     		str	r2, [r3, #36]
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2822              		.loc 1 2219 0
 2823 0008 5322     		mov	r2, #83
 2824 000a 5A62     		str	r2, [r3, #36]
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2825              		.loc 1 2209 0
 2826 000c 051C     		mov	r5, r0
2222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 2827              		.loc 1 2222 0
 2828 000e D868     		ldr	r0, [r3, #12]
 2829              	.LVL227:
 2830 0010 0822     		mov	r2, #8
 2831 0012 1C1C     		mov	r4, r3
 2832 0014 1042     		tst	r0, r2
 2833 0016 06D0     		beq	.L239
 2834 0018 0C4B     		ldr	r3, .L251+4
 2835              	.LVL228:
 2836              	.L240:
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2837              		.loc 1 2225 0 discriminator 1
 2838 001a E068     		ldr	r0, [r4, #12]
 2839 001c 1042     		tst	r0, r2
 2840 001e 02D0     		beq	.L239
 2841 0020 013B     		sub	r3, r3, #1
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2842              		.loc 1 2225 0 is_stmt 0 discriminator 2
 2843 0022 002B     		cmp	r3, #0
 2844 0024 F9D1     		bne	.L240
 2845              	.L239:
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2846              		.loc 1 2232 0 is_stmt 1
 2847 0026 E268     		ldr	r2, [r4, #12]
 2848 0028 074B     		ldr	r3, .L251
2256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 2849              		.loc 1 2256 0
 2850 002a 0020     		mov	r0, #0
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2851              		.loc 1 2232 0
 2852 002c 1607     		lsl	r6, r2, #28
 2853 002e 08D4     		bmi	.L241
2235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 2854              		.loc 1 2235 0
 2855 0030 9A68     		ldr	r2, [r3, #8]
 2856 0032 D606     		lsl	r6, r2, #27
 2857 0034 05D4     		bmi	.L241
2238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 2858              		.loc 1 2238 0
 2859 0036 0D43     		orr	r5, r1
 2860              	.LVL229:
 2861 0038 DD62     		str	r5, [r3, #44]
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 2862              		.loc 1 2240 0
 2863 003a FFF7FEFF 		bl	RTC_WaitForSynchro
 2864              	.LVL230:
2251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 2865              		.loc 1 2251 0
 2866 003e 431E     		sub	r3, r0, #1
 2867 0040 9841     		sbc	r0, r0, r3
 2868              	.L241:
 2869              	.LVL231:
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2870              		.loc 1 2260 0
 2871 0042 FF23     		mov	r3, #255
 2872 0044 6362     		str	r3, [r4, #36]
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2873              		.loc 1 2263 0
 2874              		@ sp needed for prologue
 2875 0046 70BD     		pop	{r4, r5, r6, pc}
 2876              	.L252:
 2877              		.align	2
 2878              	.L251:
 2879 0048 00280040 		.word	1073752064
 2880 004c 01100000 		.word	4097
 2881              		.cfi_endproc
 2882              	.LFE78:
 2884              		.section	.text.RTC_ITConfig,"ax",%progbits
 2885              		.align	1
 2886              		.global	RTC_ITConfig
 2887              		.code	16
 2888              		.thumb_func
 2890              	RTC_ITConfig:
 2891              	.LFB79:
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2892              		.loc 1 2319 0
 2893              		.cfi_startproc
 2894              	.LVL232:
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2895              		.loc 1 2325 0
 2896 0000 0F4B     		ldr	r3, .L256
 2897 0002 CA22     		mov	r2, #202
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2898              		.loc 1 2319 0
 2899 0004 10B5     		push	{r4, lr}
 2900              	.LCFI29:
 2901              		.cfi_def_cfa_offset 8
 2902              		.cfi_offset 4, -8
 2903              		.cfi_offset 14, -4
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2904              		.loc 1 2325 0
 2905 0006 5A62     		str	r2, [r3, #36]
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2906              		.loc 1 2326 0
 2907 0008 5322     		mov	r2, #83
 2908 000a 5A62     		str	r2, [r3, #36]
 2909 000c 0422     		mov	r2, #4
2328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2910              		.loc 1 2328 0
 2911 000e 0029     		cmp	r1, #0
 2912 0010 09D0     		beq	.L254
2331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 2913              		.loc 1 2331 0
 2914 0012 9968     		ldr	r1, [r3, #8]
 2915              	.LVL233:
 2916 0014 041C     		mov	r4, r0
 2917 0016 9443     		bic	r4, r2
 2918 0018 2143     		orr	r1, r4
 2919 001a 9960     		str	r1, [r3, #8]
2333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 2920              		.loc 1 2333 0
 2921 001c 196C     		ldr	r1, [r3, #64]
 2922 001e 1040     		and	r0, r2
 2923              	.LVL234:
 2924 0020 0843     		orr	r0, r1
 2925 0022 1864     		str	r0, [r3, #64]
 2926 0024 09E0     		b	.L255
 2927              	.LVL235:
 2928              	.L254:
2338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 2929              		.loc 1 2338 0
 2930 0026 9968     		ldr	r1, [r3, #8]
 2931              	.LVL236:
 2932 0028 041C     		mov	r4, r0
 2933 002a 9443     		bic	r4, r2
 2934 002c A143     		bic	r1, r4
 2935 002e 9960     		str	r1, [r3, #8]
2340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 2936              		.loc 1 2340 0
 2937 0030 196C     		ldr	r1, [r3, #64]
 2938 0032 1040     		and	r0, r2
 2939              	.LVL237:
 2940 0034 0A1C     		mov	r2, r1
 2941 0036 8243     		bic	r2, r0
 2942 0038 1A64     		str	r2, [r3, #64]
 2943              	.L255:
2343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
 2944              		.loc 1 2343 0
 2945 003a FF22     		mov	r2, #255
 2946 003c 5A62     		str	r2, [r3, #36]
2344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2947              		.loc 1 2344 0
 2948              		@ sp needed for prologue
 2949 003e 10BD     		pop	{r4, pc}
 2950              	.L257:
 2951              		.align	2
 2952              	.L256:
 2953 0040 00280040 		.word	1073752064
 2954              		.cfi_endproc
 2955              	.LFE79:
 2957              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 2958              		.align	1
 2959              		.global	RTC_GetFlagStatus
 2960              		.code	16
 2961              		.thumb_func
 2963              	RTC_GetFlagStatus:
 2964              	.LFB80:
2363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2965              		.loc 1 2363 0
 2966              		.cfi_startproc
 2967              	.LVL238:
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 2968              		.loc 1 2371 0
 2969 0000 034B     		ldr	r3, .L259
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2970              		.loc 1 2383 0
 2971              		@ sp needed for prologue
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 2972              		.loc 1 2371 0
 2973 0002 DA68     		ldr	r2, [r3, #12]
 2974              	.LVL239:
 2975 0004 034B     		ldr	r3, .L259+4
 2976 0006 1340     		and	r3, r2
 2977              	.LVL240:
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 2978              		.loc 1 2374 0
 2979 0008 1840     		and	r0, r3
 2980              	.LVL241:
2382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return bitstatus;
 2981              		.loc 1 2382 0
 2982 000a 431E     		sub	r3, r0, #1
 2983 000c 9841     		sbc	r0, r0, r3
 2984              	.LVL242:
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2985              		.loc 1 2383 0
 2986 000e 7047     		bx	lr
 2987              	.L260:
 2988              		.align	2
 2989              	.L259:
 2990 0010 00280040 		.word	1073752064
 2991 0014 78790100 		.word	96632
 2992              		.cfi_endproc
 2993              	.LFE80:
 2995              		.section	.text.RTC_ClearFlag,"ax",%progbits
 2996              		.align	1
 2997              		.global	RTC_ClearFlag
 2998              		.code	16
 2999              		.thumb_func
 3001              	RTC_ClearFlag:
 3002              	.LFB81:
2399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3003              		.loc 1 2399 0
 3004              		.cfi_startproc
 3005              	.LVL243:
2404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR &
 3006              		.loc 1 2404 0
 3007 0000 054B     		ldr	r3, .L262
 3008 0002 064A     		ldr	r2, .L262+4
 3009 0004 D968     		ldr	r1, [r3, #12]
 3010 0006 1040     		and	r0, r2
 3011              	.LVL244:
 3012 0008 8022     		mov	r2, #128
 3013 000a 1043     		orr	r0, r2
 3014 000c C043     		mvn	r0, r0
 3015 000e 0A40     		and	r2, r1
 3016 0010 0243     		orr	r2, r0
 3017 0012 DA60     		str	r2, [r3, #12]
2405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 3018              		.loc 1 2405 0
 3019              		@ sp needed for prologue
 3020 0014 7047     		bx	lr
 3021              	.L263:
 3022 0016 C046     		.align	2
 3023              	.L262:
 3024 0018 00280040 		.word	1073752064
 3025 001c 7FFF0100 		.word	130943
 3026              		.cfi_endproc
 3027              	.LFE81:
 3029              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3030              		.align	1
 3031              		.global	RTC_GetITStatus
 3032              		.code	16
 3033              		.thumb_func
 3035              	RTC_GetITStatus:
 3036              	.LFB82:
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3037              		.loc 1 2419 0
 3038              		.cfi_startproc
 3039              	.LVL245:
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 3040              		.loc 1 2427 0
 3041 0000 0B4A     		ldr	r2, .L268
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3042              		.loc 1 2419 0
 3043 0002 30B5     		push	{r4, r5, lr}
 3044              	.LCFI30:
 3045              		.cfi_def_cfa_offset 12
 3046              		.cfi_offset 4, -12
 3047              		.cfi_offset 5, -8
 3048              		.cfi_offset 14, -4
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 3049              		.loc 1 2427 0
 3050 0004 146C     		ldr	r4, [r2, #64]
 3051              	.LVL246:
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3052              		.loc 1 2419 0
 3053 0006 031C     		mov	r3, r0
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 3054              		.loc 1 2427 0
 3055 0008 0421     		mov	r1, #4
 3056 000a 2140     		and	r1, r4
 3057              	.LVL247:
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 3058              		.loc 1 2430 0
 3059 000c 1D1C     		mov	r5, r3
 3060 000e 9C0C     		lsr	r4, r3, #18
 3061 0010 9068     		ldr	r0, [r2, #8]
 3062              	.LVL248:
 3063 0012 E540     		lsr	r5, r5, r4
 3064 0014 EC0B     		lsr	r4, r5, #15
 3065 0016 1840     		and	r0, r3
 3066 0018 2140     		and	r1, r4
 3067              	.LVL249:
 3068 001a 0143     		orr	r1, r0
2442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = RESET;
 3069              		.loc 1 2442 0
 3070 001c 0020     		mov	r0, #0
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 3071              		.loc 1 2433 0
 3072 001e D268     		ldr	r2, [r2, #12]
 3073              	.LVL250:
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3074              		.loc 1 2436 0
 3075 0020 8142     		cmp	r1, r0
 3076 0022 04D0     		beq	.L265
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 3077              		.loc 1 2433 0 discriminator 1
 3078 0024 1B09     		lsr	r3, r3, #4
 3079              	.LVL251:
 3080 0026 90B2     		uxth	r0, r2
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3081              		.loc 1 2436 0 discriminator 1
 3082 0028 1840     		and	r0, r3
2438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = SET;
 3083              		.loc 1 2438 0 discriminator 1
 3084 002a 431E     		sub	r3, r0, #1
 3085 002c 9841     		sbc	r0, r0, r3
 3086              	.LVL252:
 3087              	.L265:
2445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 3088              		.loc 1 2445 0
 3089              		@ sp needed for prologue
 3090 002e 30BD     		pop	{r4, r5, pc}
 3091              	.L269:
 3092              		.align	2
 3093              	.L268:
 3094 0030 00280040 		.word	1073752064
 3095              		.cfi_endproc
 3096              	.LFE82:
 3098              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3099              		.align	1
 3100              		.global	RTC_ClearITPendingBit
 3101              		.code	16
 3102              		.thumb_func
 3104              	RTC_ClearITPendingBit:
 3105              	.LFB83:
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3106              		.loc 1 2459 0
 3107              		.cfi_startproc
 3108              	.LVL253:
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3109              		.loc 1 2469 0
 3110 0000 054B     		ldr	r3, .L271
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3111              		.loc 1 2459 0
 3112 0002 10B5     		push	{r4, lr}
 3113              	.LCFI31:
 3114              		.cfi_def_cfa_offset 8
 3115              		.cfi_offset 4, -8
 3116              		.cfi_offset 14, -4
2466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 3117              		.loc 1 2466 0
 3118 0004 0109     		lsr	r1, r0, #4
 3119              	.LVL254:
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3120              		.loc 1 2469 0
 3121 0006 DC68     		ldr	r4, [r3, #12]
 3122 0008 8022     		mov	r2, #128
 3123 000a 89B2     		uxth	r1, r1
 3124              	.LVL255:
 3125 000c 1143     		orr	r1, r2
 3126 000e C943     		mvn	r1, r1
 3127 0010 2240     		and	r2, r4
 3128 0012 0A43     		orr	r2, r1
 3129 0014 DA60     		str	r2, [r3, #12]
2470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 3130              		.loc 1 2470 0
 3131              		@ sp needed for prologue
 3132 0016 10BD     		pop	{r4, pc}
 3133              	.L272:
 3134              		.align	2
 3135              	.L271:
 3136 0018 00280040 		.word	1073752064
 3137              		.cfi_endproc
 3138              	.LFE83:
 3140              		.text
 3141              	.Letext0:
 3142              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 3143              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 3144              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_rtc.c
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:18     .text.RTC_ByteToBcd2:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:22     .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:67     .text.RTC_Bcd2ToByte:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:71     .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:93     .text.RTC_StructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:98     .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:116    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:121    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:150    .text.RTC_WriteProtectionCmd:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:155    .text.RTC_EnterInitMode:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:160    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:231    .text.RTC_EnterInitMode:00000038 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:236    .text.RTC_ExitInitMode:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:241    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:259    .text.RTC_ExitInitMode:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:264    .text.RTC_Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:269    .text.RTC_Init:00000000 RTC_Init
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:337    .text.RTC_Init:00000044 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:342    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:347    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:432    .text.RTC_WaitForSynchro:00000048 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:437    .text.RTC_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:442    .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:512    .text.RTC_DeInit:00000044 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:520    .text.RTC_RefClockCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:525    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:588    .text.RTC_RefClockCmd:00000038 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:593    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:598    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:640    .text.RTC_BypassShadowCmd:00000028 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:645    .text.RTC_SetTime:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:650    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:800    .text.RTC_SetTime:00000098 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:806    .text.RTC_TimeStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:811    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:832    .text.RTC_GetTime:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:837    .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:910    .text.RTC_GetTime:00000044 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:915    .text.RTC_GetSubSecond:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:920    .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:939    .text.RTC_GetSubSecond:00000008 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:944    .text.RTC_SetDate:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:949    .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1084   .text.RTC_SetDate:0000008c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1090   .text.RTC_DateStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1095   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1117   .text.RTC_GetDate:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1122   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1195   .text.RTC_GetDate:00000040 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1200   .text.RTC_SetAlarm:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1205   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1347   .text.RTC_SetAlarm:00000094 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1352   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1357   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1387   .text.RTC_GetAlarm:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1392   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1489   .text.RTC_GetAlarm:00000060 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1495   .text.RTC_AlarmCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1500   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1595   .text.RTC_AlarmCmd:00000050 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1600   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1605   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1639   .text.RTC_AlarmSubSecondConfig:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1644   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1649   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1669   .text.RTC_GetAlarmSubSecond:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1674   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1679   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1714   .text.RTC_WakeUpClockConfig:00000020 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1719   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1724   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1749   .text.RTC_SetWakeUpCounter:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1754   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1759   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1775   .text.RTC_GetWakeUpCounter:00000008 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1780   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1785   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1875   .text.RTC_WakeUpCmd:00000050 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1881   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1886   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1929   .text.RTC_DayLightSavingConfig:00000024 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1935   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1940   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1956   .text.RTC_GetStoreOperation:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1961   .text.RTC_OutputConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:1966   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2009   .text.RTC_OutputConfig:00000024 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2015   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2020   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2063   .text.RTC_CalibOutputCmd:00000028 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2069   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2074   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2109   .text.RTC_CalibOutputConfig:00000020 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2115   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2120   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2191   .text.RTC_SmoothCalibConfig:00000040 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2197   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2202   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2252   .text.RTC_TimeStampCmd:00000028 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2258   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2263   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2369   .text.RTC_GetTimeStamp:00000074 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2374   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2379   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2394   .text.RTC_GetTimeStampSubSecond:00000008 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2399   .text.RTC_TamperTriggerConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2404   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2436   .text.RTC_TamperTriggerConfig:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2441   .text.RTC_TamperCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2446   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2479   .text.RTC_TamperCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2484   .text.RTC_TamperFilterConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2489   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2513   .text.RTC_TamperFilterConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2519   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2524   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2548   .text.RTC_TamperSamplingFreqConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2554   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2559   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2583   .text.RTC_TamperPinsPrechargeDuration:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2589   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2594   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2625   .text.RTC_TimeStampOnTamperDetectionCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2630   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2635   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2667   .text.RTC_TamperPullUpCmd:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2673   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2678   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2713   .text.RTC_WriteBackupRegister:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2718   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2723   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2759   .text.RTC_ReadBackupRegister:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2764   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2769   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2793   .text.RTC_OutputTypeConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2799   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2804   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2879   .text.RTC_SynchroShiftConfig:00000048 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2885   .text.RTC_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2890   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2953   .text.RTC_ITConfig:00000040 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2958   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2963   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2990   .text.RTC_GetFlagStatus:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:2996   .text.RTC_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3001   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3024   .text.RTC_ClearFlag:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3030   .text.RTC_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3035   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3094   .text.RTC_GetITStatus:00000030 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3099   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3104   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\THANGN~1\AppData\Local\Temp\ccHfxMPd.s:3136   .text.RTC_ClearITPendingBit:00000018 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_rtc.h.133.5476b8c12265017ea9d14b1cda255402

NO UNDEFINED SYMBOLS
