   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_spi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_I2S_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	SPI_I2S_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @file    stm32f0xx_spi.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Initialization and Configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Data transfers functions
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Hardware CRC Calculation
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + DMA transfers management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Interrupts and flags management
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *  @verbatim
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                        ##### How to use this driver #####
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..]
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE)
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             function for SPI1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE)
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             function for SPI2.
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             RCC_AHBPeriphClockCmd() function. 
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Peripherals alternate function: 
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Configure the desired pin in alternate function by:
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Call GPIO_Init() function.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             function.In I2S mode, program the Mode, Standard, Data Format, MCLK 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             Output, Audio frequency and Polarity using I2S_Init() function.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Configure the FIFO threshold using SPI_RxFIFOThresholdConfig() to select 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             at which threshold the RXNE event is generated.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             SPI_ITConfig() if you need to use interrupt mode. 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) When using the DMA mode 
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Configure the DMA using DMA_Init() function.
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Active the needed channel Request using SPI_I2S_DMACmd() function.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****    
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             I2S_Cmd().
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****    
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Optionally, you can enable/configure the following parameters without
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             re-initialization (i.e there is no need to call again SPI_Init() function):
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  is programmed as Data direction parameter using the SPI_Init() 
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  function it can be possible to switch between SPI_Direction_Tx 
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  or SPI_Direction_Rx using the SPI_BiDirectionalLineConfig() function.
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  using the SPI_Init() function it can be possible to manage the 
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Reconfigure the data size using the SPI_DataSizeConfig() function.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Enable or disable the SS output using the SPI_SSOutputCmd() function.  
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             CRC hardware Calculation subsection.
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     @endverbatim 
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ******************************************************************************
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @attention
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * You may not use this file except in compliance with the License.
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * You may obtain a copy of the License at:
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * See the License for the specific language governing permissions and
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * limitations under the License.
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ******************************************************************************
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Includes ------------------------------------------------------------------*/
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #include "stm32f0xx_spi.h"
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #include "stm32f0xx_rcc.h"
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief SPI driver modules
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private define ------------------------------------------------------------*/
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* SPI registers Masks */
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define CR1_CLEAR_MASK       ((uint16_t)0x3040)
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define CR1_CLEAR_MASK2      ((uint16_t)0xFFFB)
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define CR2_LDMA_MASK        ((uint16_t)0x9FFF)
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Private_Functions
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****            ##### Initialization and Configuration functions #####
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to initialize the SPI Direction,
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The SPI_Init() function follows the SPI configuration procedures for Master mode
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and Slave mode (details for these procedures are available in reference manual).
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] When the Software NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Soft) is selected,
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          use the following function to manage the NSS bit:
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In Master mode, when the Hardware NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Hard)
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          is selected, use the follwoing function to enable the NSS output feature.
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The NSS pulse mode can be managed by the SPI TI mode when enabling it using the following 
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          And it can be managed by software in the SPI Motorola mode using this function: 
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides also functions to initialize the I2S Mode, Standard, 
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          Data Format, MCLK Output, Audio frequency and Polarity.
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The I2S_Init() function follows the I2S configuration procedures for Master mode
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and Slave mode.
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         reset values.
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.      
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
  26              		.loc 1 170 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 08B5     		push	{r3, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPIx == SPI1)
  34              		.loc 1 174 0
  35 0002 0E4B     		ldr	r3, .L4
  36 0004 9842     		cmp	r0, r3
  37 0006 0AD1     		bne	.L2
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable SPI1 reset state */
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  38              		.loc 1 177 0
  39 0008 8020     		mov	r0, #128
  40              	.LVL1:
  41 000a 4001     		lsl	r0, r0, #5
  42 000c 0121     		mov	r1, #1
  43 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  44              	.LVL2:
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Release SPI1 from reset state */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  45              		.loc 1 179 0
  46 0012 8020     		mov	r0, #128
  47 0014 4001     		lsl	r0, r0, #5
  48 0016 0021     		mov	r1, #0
  49 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  50              	.LVL3:
  51 001c 0CE0     		b	.L1
  52              	.LVL4:
  53              	.L2:
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     if (SPIx == SPI2)
  54              		.loc 1 183 0
  55 001e 084B     		ldr	r3, .L4+4
  56 0020 9842     		cmp	r0, r3
  57 0022 09D1     		bne	.L1
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Enable SPI2 reset state */
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  58              		.loc 1 186 0
  59 0024 8020     		mov	r0, #128
  60              	.LVL5:
  61 0026 C001     		lsl	r0, r0, #7
  62 0028 0121     		mov	r1, #1
  63 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  64              	.LVL6:
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Release SPI2 from reset state */
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  65              		.loc 1 188 0
  66 002e 8020     		mov	r0, #128
  67 0030 C001     		lsl	r0, r0, #7
  68 0032 0021     		mov	r1, #0
  69 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  70              	.LVL7:
  71              	.L1:
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
  72              		.loc 1 191 0
  73              		@ sp needed for prologue
  74 0038 08BD     		pop	{r3, pc}
  75              	.L5:
  76 003a C046     		.align	2
  77              	.L4:
  78 003c 00300140 		.word	1073819648
  79 0040 00380040 		.word	1073756160
  80              		.cfi_endproc
  81              	.LFE33:
  83              		.section	.text.SPI_StructInit,"ax",%progbits
  84              		.align	1
  85              		.global	SPI_StructInit
  86              		.code	16
  87              		.thumb_func
  89              	SPI_StructInit:
  90              	.LFB34:
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
  91              		.loc 1 199 0
  92              		.cfi_startproc
  93              	.LVL8:
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_Direction member */
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  94              		.loc 1 202 0
  95 0000 0023     		mov	r3, #0
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_Mode member */
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_DataSize member */
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
  96              		.loc 1 206 0
  97 0002 E022     		mov	r2, #224
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  98              		.loc 1 202 0
  99 0004 0380     		strh	r3, [r0]
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 100              		.loc 1 204 0
 101 0006 4380     		strh	r3, [r0, #2]
 102              		.loc 1 206 0
 103 0008 D200     		lsl	r2, r2, #3
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_CPOL member */
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 104              		.loc 1 208 0
 105 000a C380     		strh	r3, [r0, #6]
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_CPHA member */
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 106              		.loc 1 210 0
 107 000c 0381     		strh	r3, [r0, #8]
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_NSS member */
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 108              		.loc 1 212 0
 109 000e 4381     		strh	r3, [r0, #10]
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 110              		.loc 1 214 0
 111 0010 8381     		strh	r3, [r0, #12]
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 112              		.loc 1 216 0
 113 0012 C381     		strh	r3, [r0, #14]
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 114              		.loc 1 218 0
 115 0014 0723     		mov	r3, #7
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 116              		.loc 1 206 0
 117 0016 8280     		strh	r2, [r0, #4]
 118              		.loc 1 218 0
 119 0018 0382     		strh	r3, [r0, #16]
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 120              		.loc 1 219 0
 121              		@ sp needed for prologue
 122 001a 7047     		bx	lr
 123              		.cfi_endproc
 124              	.LFE34:
 126              		.section	.text.SPI_Init,"ax",%progbits
 127              		.align	1
 128              		.global	SPI_Init
 129              		.code	16
 130              		.thumb_func
 132              	SPI_Init:
 133              	.LFB35:
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         parameters in the SPI_InitStruct.
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 134              		.loc 1 231 0
 135              		.cfi_startproc
 136              	.LVL9:
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t tmpreg = 0;
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* check the parameters */
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the SPI parameters */
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_InitStruct->SPI_DataSize));
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*---------------------------- SPIx CR1 Configuration ------------------------*/
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx CR1 value */
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR1;
 137              		.loc 1 250 0
 138 0000 0388     		ldrh	r3, [r0]
 139              	.LVL10:
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 140              		.loc 1 252 0
 141 0002 C122     		mov	r2, #193
 142 0004 9201     		lsl	r2, r2, #6
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 143              		.loc 1 231 0
 144 0006 10B5     		push	{r4, lr}
 145              	.LCFI1:
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 4, -8
 148              		.cfi_offset 14, -4
 149              		.loc 1 252 0
 150 0008 1A40     		and	r2, r3
 151              	.LVL11:
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   master/slave mode, CPOL and CPHA */
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set SSM, SSI bit according to SPI_NSS values */
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 152              		.loc 1 261 0
 153 000a CC89     		ldrh	r4, [r1, #14]
 154 000c 0B88     		ldrh	r3, [r1]
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                       SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                       SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CR1 */
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 = tmpreg;
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*-------------------------Data Size Configuration -----------------------*/
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx CR2 value */
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR2;
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear DS[3:0] bits */
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &=(uint16_t)~SPI_CR2_DS;
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure SPIx: Data Size */
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CR2 */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 = tmpreg;
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CRCPOLY */
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*---------------------------- SPIx CR1 Configuration ------------------------*/
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx CR1 value */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR1;
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear MSTR bit */
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK2;
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure SPIx: master/slave mode */  
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set MSTR bit according to SPI_Mode */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CR1 */
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 = tmpreg;  
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 155              		.loc 1 293 0
 156              		@ sp needed for prologue
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 157              		.loc 1 261 0
 158 000e 2343     		orr	r3, r4
 159 0010 CC88     		ldrh	r4, [r1, #6]
 160 0012 2343     		orr	r3, r4
 161 0014 0C89     		ldrh	r4, [r1, #8]
 162 0016 2343     		orr	r3, r4
 163 0018 4C89     		ldrh	r4, [r1, #10]
 164 001a 2343     		orr	r3, r4
 165 001c 8C89     		ldrh	r4, [r1, #12]
 166 001e 2343     		orr	r3, r4
 167 0020 1343     		orr	r3, r2
 168              	.LVL12:
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 = tmpreg;
 169              		.loc 1 265 0
 170 0022 0380     		strh	r3, [r0]
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR2;
 171              		.loc 1 268 0
 172 0024 8288     		ldrh	r2, [r0, #4]
 173              	.LVL13:
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &=(uint16_t)~SPI_CR2_DS;
 174              		.loc 1 270 0
 175 0026 094B     		ldr	r3, .L8
 176 0028 1340     		and	r3, r2
 177              	.LVL14:
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 178              		.loc 1 272 0
 179 002a 8A88     		ldrh	r2, [r1, #4]
 180 002c 1343     		orr	r3, r2
 181              	.LVL15:
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 = tmpreg;
 182              		.loc 1 274 0
 183 002e 8380     		strh	r3, [r0, #4]
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 184              		.loc 1 278 0
 185 0030 0B8A     		ldrh	r3, [r1, #16]
 186              	.LVL16:
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK2;
 187              		.loc 1 284 0
 188 0032 0422     		mov	r2, #4
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 189              		.loc 1 278 0
 190 0034 0382     		strh	r3, [r0, #16]
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR1;
 191              		.loc 1 282 0
 192 0036 0388     		ldrh	r3, [r0]
 193              	.LVL17:
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK2;
 194              		.loc 1 284 0
 195 0038 9343     		bic	r3, r2
 196              	.LVL18:
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 197              		.loc 1 287 0
 198 003a 4A88     		ldrh	r2, [r1, #2]
 199 003c 1343     		orr	r3, r2
 200              	.LVL19:
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 = tmpreg;  
 201              		.loc 1 289 0
 202 003e 0380     		strh	r3, [r0]
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 203              		.loc 1 292 0
 204 0040 828B     		ldrh	r2, [r0, #28]
 205 0042 034B     		ldr	r3, .L8+4
 206              	.LVL20:
 207 0044 1340     		and	r3, r2
 208 0046 8383     		strh	r3, [r0, #28]
 209              		.loc 1 293 0
 210 0048 10BD     		pop	{r4, pc}
 211              	.L9:
 212 004a C046     		.align	2
 213              	.L8:
 214 004c FFF0FFFF 		.word	-3841
 215 0050 FFF7FFFF 		.word	-2049
 216              		.cfi_endproc
 217              	.LFE35:
 219              		.section	.text.I2S_StructInit,"ax",%progbits
 220              		.align	1
 221              		.global	I2S_StructInit
 222              		.code	16
 223              		.thumb_func
 225              	I2S_StructInit:
 226              	.LFB36:
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This mode is not supported for STM32F030 devices.  
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 227              		.loc 1 302 0
 228              		.cfi_startproc
 229              	.LVL21:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_Mode member */
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 230              		.loc 1 305 0
 231 0000 0023     		mov	r3, #0
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_Standard member */
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 232              		.loc 1 317 0
 233 0002 0222     		mov	r2, #2
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 234              		.loc 1 305 0
 235 0004 0380     		strh	r3, [r0]
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 236              		.loc 1 308 0
 237 0006 4380     		strh	r3, [r0, #2]
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 238              		.loc 1 311 0
 239 0008 8380     		strh	r3, [r0, #4]
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 240              		.loc 1 314 0
 241 000a C380     		strh	r3, [r0, #6]
 242              		.loc 1 317 0
 243 000c 8260     		str	r2, [r0, #8]
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_CPOL member */
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 244              		.loc 1 320 0
 245 000e 8381     		strh	r3, [r0, #12]
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 246              		.loc 1 321 0
 247              		@ sp needed for prologue
 248 0010 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE36:
 252              		.global	__aeabi_uidiv
 253              		.section	.text.I2S_Init,"ax",%progbits
 254              		.align	1
 255              		.global	I2S_Init
 256              		.code	16
 257              		.thumb_func
 259              	I2S_Init:
 260              	.LFB37:
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         parameters in the I2S_InitStruct.
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This mode is not supported for STM32F030 devices.  
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 to select the SPI peripheral (configured in I2S mode).  
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         configured in I2S mode.
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function calculates the optimal prescaler needed to obtain the most 
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 261              		.loc 1 338 0
 262              		.cfi_startproc
 263              	.LVL22:
 264 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 265              	.LCFI2:
 266              		.cfi_def_cfa_offset 20
 267              		.cfi_offset 4, -20
 268              		.cfi_offset 5, -16
 269              		.cfi_offset 6, -12
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t tmp = 0;
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t sourceclock = 0;
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the I2S parameters */
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_1_PERIPH(SPIx));
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 272              		.loc 1 355 0
 273 0002 254B     		ldr	r3, .L21
 274 0004 828B     		ldrh	r2, [r0, #28]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 275              		.loc 1 338 0
 276 0006 051C     		mov	r5, r0
 277              		.loc 1 355 0
 278 0008 1340     		and	r3, r2
 279 000a 8383     		strh	r3, [r0, #28]
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SPR = 0x0002;
 280              		.loc 1 356 0
 281 000c 0223     		mov	r3, #2
 282 000e 0384     		strh	r3, [r0, #32]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the I2SCFGR register value */
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 283              		.loc 1 359 0
 284 0010 868B     		ldrh	r6, [r0, #28]
 285              	.LVL23:
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 286              		.loc 1 362 0
 287 0012 8868     		ldr	r0, [r1, #8]
 288              	.LVL24:
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 289              		.loc 1 338 0
 290 0014 8BB0     		sub	sp, sp, #44
 291              	.LCFI3:
 292              		.cfi_def_cfa_offset 64
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 293              		.loc 1 338 0
 294 0016 0C1C     		mov	r4, r1
 295              		.loc 1 362 0
 296 0018 9842     		cmp	r0, r3
 297 001a 23D0     		beq	.L17
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t)0;
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = (uint16_t)2;   
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 298              		.loc 1 371 0
 299 001c 8F88     		ldrh	r7, [r1, #4]
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Packet length is 16 bits */
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 1;
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     else
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Packet length is 32 bits */
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 2;
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 300              		.loc 1 383 0
 301 001e 6846     		mov	r0, sp
 302 0020 FFF7FEFF 		bl	RCC_GetClocksFreq
 303              	.LVL25:
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the source clock value: based on System Clock value */
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a floating point */
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 304              		.loc 1 389 0
 305 0024 E288     		ldrh	r2, [r4, #6]
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 1;
 306              		.loc 1 374 0
 307 0026 7B1E     		sub	r3, r7, #1
 308 0028 9F41     		sbc	r7, r7, r3
 309              		.loc 1 389 0
 310 002a 8023     		mov	r3, #128
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 1;
 311              		.loc 1 374 0
 312 002c 0137     		add	r7, r7, #1
 313              	.LVL26:
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 314              		.loc 1 386 0
 315 002e 0098     		ldr	r0, [sp]
 316              	.LVL27:
 317              		.loc 1 389 0
 318 0030 9B00     		lsl	r3, r3, #2
 319 0032 9A42     		cmp	r2, r3
 320 0034 01D1     		bne	.L14
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* MCLK output is enabled */
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 321              		.loc 1 392 0
 322 0036 000A     		lsr	r0, r0, #8
 323              	.LVL28:
 324 0038 02E0     		b	.L20
 325              	.LVL29:
 326              	.L14:
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     else
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* MCLK output is disabled */
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 327              		.loc 1 397 0
 328 003a 7901     		lsl	r1, r7, #5
 329 003c FFF7FEFF 		bl	__aeabi_uidiv
 330              	.LVL30:
 331              	.L20:
 332 0040 0A23     		mov	r3, #10
 333 0042 5843     		mul	r0, r3
 334 0044 A168     		ldr	r1, [r4, #8]
 335 0046 FFF7FEFF 		bl	__aeabi_uidiv
 336              	.LVL31:
 337 004a 0530     		add	r0, r0, #5
 338 004c 80B2     		uxth	r0, r0
 339              	.LVL32:
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Remove the floating point */
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     tmp = tmp / 10;
 340              		.loc 1 401 0
 341 004e 0A21     		mov	r1, #10
 342 0050 FFF7FEFF 		bl	__aeabi_uidiv
 343              	.LVL33:
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Check the parity of the divider */
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 344              		.loc 1 404 0
 345 0054 0123     		mov	r3, #1
 346 0056 0340     		and	r3, r0
 347              	.LVL34:
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Compute the i2sdiv prescaler */
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 348              		.loc 1 407 0
 349 0058 C01A     		sub	r0, r0, r3
 350              	.LVL35:
 351 005a 4008     		lsr	r0, r0, #1
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 352              		.loc 1 410 0
 353 005c 1B02     		lsl	r3, r3, #8
 354              	.LVL36:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 355              		.loc 1 407 0
 356 005e 80B2     		uxth	r0, r0
 357              	.LVL37:
 358              		.loc 1 410 0
 359 0060 9BB2     		uxth	r3, r3
 360              	.LVL38:
 361 0062 00E0     		b	.L12
 362              	.LVL39:
 363              	.L17:
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t)0;
 364              		.loc 1 364 0
 365 0064 0023     		mov	r3, #0
 366              	.LVL40:
 367              	.L12:
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 368              		.loc 1 414 0
 369 0066 821E     		sub	r2, r0, #2
 370 0068 92B2     		uxth	r2, r2
 371 006a FD2A     		cmp	r2, #253
 372 006c 01D9     		bls	.L16
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set the default values */
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = 2;
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = 0;
 373              		.loc 1 418 0
 374 006e 0023     		mov	r3, #0
 375              	.LVL41:
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = 2;
 376              		.loc 1 417 0
 377 0070 0220     		mov	r0, #2
 378              	.LVL42:
 379              	.L16:
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 380              		.loc 1 422 0
 381 0072 E288     		ldrh	r2, [r4, #6]
 382 0074 1843     		orr	r0, r3
 383              	.LVL43:
 384 0076 1043     		orr	r0, r2
 385 0078 2884     		strh	r0, [r5, #32]
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 386              		.loc 1 426 0
 387 007a 2388     		ldrh	r3, [r4]
 388              	.LVL44:
 389 007c 1E43     		orr	r6, r3
 390              	.LVL45:
 391 007e 8023     		mov	r3, #128
 392 0080 1B01     		lsl	r3, r3, #4
 393 0082 1E43     		orr	r6, r3
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 394              		.loc 1 425 0
 395 0084 6388     		ldrh	r3, [r4, #2]
 396 0086 1E43     		orr	r6, r3
 397 0088 A388     		ldrh	r3, [r4, #4]
 398 008a 1E43     		orr	r6, r3
 399 008c A389     		ldrh	r3, [r4, #12]
 400 008e 1E43     		orr	r6, r3
 401              	.LVL46:
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx I2SCFGR */
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 402              		.loc 1 430 0
 403 0090 AE83     		strh	r6, [r5, #28]
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 404              		.loc 1 431 0
 405 0092 0BB0     		add	sp, sp, #44
 406              		@ sp needed for prologue
 407              	.LVL47:
 408              	.LVL48:
 409              	.LVL49:
 410 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 411              	.L22:
 412 0096 C046     		.align	2
 413              	.L21:
 414 0098 40F0FFFF 		.word	-4032
 415              		.cfi_endproc
 416              	.LFE37:
 418              		.section	.text.SPI_Cmd,"ax",%progbits
 419              		.align	1
 420              		.global	SPI_Cmd
 421              		.code	16
 422              		.thumb_func
 424              	SPI_Cmd:
 425              	.LFB38:
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 426              		.loc 1 442 0
 427              		.cfi_startproc
 428              	.LVL50:
 429 0000 00B5     		push	{lr}
 430              	.LCFI4:
 431              		.cfi_def_cfa_offset 4
 432              		.cfi_offset 14, -4
 433 0002 4023     		mov	r3, #64
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI peripheral */
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 434              		.loc 1 450 0
 435 0004 0288     		ldrh	r2, [r0]
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 436              		.loc 1 447 0
 437 0006 0029     		cmp	r1, #0
 438 0008 01D0     		beq	.L24
 439              		.loc 1 450 0
 440 000a 1343     		orr	r3, r2
 441 000c 01E0     		b	.L26
 442              	.L24:
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI peripheral */
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 443              		.loc 1 455 0
 444 000e 9A43     		bic	r2, r3
 445 0010 131C     		mov	r3, r2
 446              	.L26:
 447 0012 0380     		strh	r3, [r0]
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 448              		.loc 1 457 0
 449              		@ sp needed for prologue
 450 0014 00BD     		pop	{pc}
 451              		.cfi_endproc
 452              	.LFE38:
 454              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 455              		.align	1
 456              		.global	SPI_TIModeCmd
 457              		.code	16
 458              		.thumb_func
 460              	SPI_TIModeCmd:
 461              	.LFB39:
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the TI Mode.
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *   
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called. 
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         are not taken into consideration and are configured by hardware 
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         respectively to the TI mode requirements.
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *    
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 462              		.loc 1 475 0
 463              		.cfi_startproc
 464              	.LVL51:
 465 0000 00B5     		push	{lr}
 466              	.LCFI5:
 467              		.cfi_def_cfa_offset 4
 468              		.cfi_offset 14, -4
 469 0002 1023     		mov	r3, #16
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 470              		.loc 1 483 0
 471 0004 8288     		ldrh	r2, [r0, #4]
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 472              		.loc 1 480 0
 473 0006 0029     		cmp	r1, #0
 474 0008 01D0     		beq	.L28
 475              		.loc 1 483 0
 476 000a 1343     		orr	r3, r2
 477 000c 01E0     		b	.L30
 478              	.L28:
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 479              		.loc 1 488 0
 480 000e 9A43     		bic	r2, r3
 481 0010 131C     		mov	r3, r2
 482              	.L30:
 483 0012 8380     		strh	r3, [r0, #4]
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 484              		.loc 1 490 0
 485              		@ sp needed for prologue
 486 0014 00BD     		pop	{pc}
 487              		.cfi_endproc
 488              	.LFE39:
 490              		.section	.text.I2S_Cmd,"ax",%progbits
 491              		.align	1
 492              		.global	I2S_Cmd
 493              		.code	16
 494              		.thumb_func
 496              	I2S_Cmd:
 497              	.LFB40:
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This mode is not supported for STM32F030 devices.    
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 to select the SPI peripheral.
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 498              		.loc 1 501 0
 499              		.cfi_startproc
 500              	.LVL52:
 501 0000 00B5     		push	{lr}
 502              	.LCFI6:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 14, -4
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_1_PERIPH(SPIx));
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI peripheral in I2S mode */
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 505              		.loc 1 508 0
 506 0002 828B     		ldrh	r2, [r0, #28]
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 507              		.loc 1 505 0
 508 0004 0029     		cmp	r1, #0
 509 0006 03D0     		beq	.L32
 510              		.loc 1 508 0
 511 0008 8023     		mov	r3, #128
 512 000a DB00     		lsl	r3, r3, #3
 513 000c 1343     		orr	r3, r2
 514 000e 01E0     		b	.L34
 515              	.L32:
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 516              		.loc 1 513 0
 517 0010 014B     		ldr	r3, .L35
 518 0012 1340     		and	r3, r2
 519              	.L34:
 520 0014 8383     		strh	r3, [r0, #28]
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 521              		.loc 1 515 0
 522              		@ sp needed for prologue
 523 0016 00BD     		pop	{pc}
 524              	.L36:
 525              		.align	2
 526              	.L35:
 527 0018 FFFBFFFF 		.word	-1025
 528              		.cfi_endproc
 529              	.LFE40:
 531              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 532              		.align	1
 533              		.global	SPI_DataSizeConfig
 534              		.code	16
 535              		.thumb_func
 537              	SPI_DataSizeConfig:
 538              	.LFB41:
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2  to select the SPI peripheral.
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         For the SPIx peripheral this parameter can be one of the following values:
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_4b: Set data size to 4 bits
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_5b: Set data size to 5 bits
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_6b: Set data size to 6 bits
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_7b: Set data size to 7 bits
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data size to 8 bits
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_9b: Set data size to 9 bits
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_10b: Set data size to 10 bits
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_11b: Set data size to 11 bits
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_12b: Set data size to 12 bits
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_13b: Set data size to 13 bits
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_14b: Set data size to 14 bits
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_15b: Set data size to 15 bits
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data size to 16 bits
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 539              		.loc 1 539 0
 540              		.cfi_startproc
 541              	.LVL53:
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t tmpreg = 0;
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Read the CR2 register */
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR2;
 542              		.loc 1 546 0
 543 0000 8288     		ldrh	r2, [r0, #4]
 544              	.LVL54:
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear DS[3:0] bits */
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= (uint16_t)~SPI_CR2_DS;
 545              		.loc 1 548 0
 546 0002 024B     		ldr	r3, .L38
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new DS[3:0] bits value */
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= SPI_DataSize;
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 = tmpreg;
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 547              		.loc 1 552 0
 548              		@ sp needed for prologue
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= (uint16_t)~SPI_CR2_DS;
 549              		.loc 1 548 0
 550 0004 1340     		and	r3, r2
 551              	.LVL55:
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= SPI_DataSize;
 552              		.loc 1 550 0
 553 0006 1943     		orr	r1, r3
 554              	.LVL56:
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 = tmpreg;
 555              		.loc 1 551 0
 556 0008 8180     		strh	r1, [r0, #4]
 557              		.loc 1 552 0
 558 000a 7047     		bx	lr
 559              	.L39:
 560              		.align	2
 561              	.L38:
 562 000c FFF0FFFF 		.word	-3841
 563              		.cfi_endproc
 564              	.LFE41:
 566              		.section	.text.SPI_RxFIFOThresholdConfig,"ax",%progbits
 567              		.align	1
 568              		.global	SPI_RxFIFOThresholdConfig
 569              		.code	16
 570              		.thumb_func
 572              	SPI_RxFIFOThresholdConfig:
 573              	.LFB42:
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the FIFO reception threshold for the selected SPI.
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_RxFIFOThreshold: specifies the FIFO reception threshold.
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_RxFIFOThreshold_HF: RXNE event is generated if the FIFO 
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                         level is greater or equal to 1/2. 
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                         level is greater or equal to 1/4. 
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 574              		.loc 1 567 0
 575              		.cfi_startproc
 576              	.LVL57:
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear FRXTH bit */
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 577              		.loc 1 573 0
 578 0000 8288     		ldrh	r2, [r0, #4]
 579 0002 034B     		ldr	r3, .L41
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new FRXTH bit value */
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 |= SPI_RxFIFOThreshold;
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 580              		.loc 1 577 0
 581              		@ sp needed for prologue
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 582              		.loc 1 573 0
 583 0004 1340     		and	r3, r2
 584 0006 8380     		strh	r3, [r0, #4]
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 |= SPI_RxFIFOThreshold;
 585              		.loc 1 576 0
 586 0008 8388     		ldrh	r3, [r0, #4]
 587 000a 1943     		orr	r1, r3
 588              	.LVL58:
 589 000c 8180     		strh	r1, [r0, #4]
 590              		.loc 1 577 0
 591 000e 7047     		bx	lr
 592              	.L42:
 593              		.align	2
 594              	.L41:
 595 0010 FFEFFFFF 		.word	-4097
 596              		.cfi_endproc
 597              	.LFE42:
 599              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 600              		.align	1
 601              		.global	SPI_BiDirectionalLineConfig
 602              		.code	16
 603              		.thumb_func
 605              	SPI_BiDirectionalLineConfig:
 606              	.LFB43:
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2  to select the SPI peripheral.
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 607              		.loc 1 590 0
 608              		.cfi_startproc
 609              	.LVL59:
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 610              		.loc 1 594 0
 611 0000 8023     		mov	r3, #128
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 612              		.loc 1 590 0
 613 0002 00B5     		push	{lr}
 614              	.LCFI7:
 615              		.cfi_def_cfa_offset 4
 616              		.cfi_offset 14, -4
 617              		.loc 1 594 0
 618 0004 DB01     		lsl	r3, r3, #7
 619 0006 9942     		cmp	r1, r3
 620 0008 03D1     		bne	.L44
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set the Tx only mode */
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 621              		.loc 1 597 0
 622 000a 0388     		ldrh	r3, [r0]
 623 000c 1943     		orr	r1, r3
 624              	.LVL60:
 625 000e 0180     		strh	r1, [r0]
 626 0010 03E0     		b	.L43
 627              	.LVL61:
 628              	.L44:
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set the Rx only mode */
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 629              		.loc 1 602 0
 630 0012 0288     		ldrh	r2, [r0]
 631 0014 014B     		ldr	r3, .L46
 632 0016 1340     		and	r3, r2
 633 0018 0380     		strh	r3, [r0]
 634              	.LVL62:
 635              	.L43:
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 636              		.loc 1 604 0
 637              		@ sp needed for prologue
 638 001a 00BD     		pop	{pc}
 639              	.L47:
 640              		.align	2
 641              	.L46:
 642 001c FFBFFFFF 		.word	-16385
 643              		.cfi_endproc
 644              	.LFE43:
 646              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 647              		.align	1
 648              		.global	SPI_NSSInternalSoftwareConfig
 649              		.code	16
 650              		.thumb_func
 652              	SPI_NSSInternalSoftwareConfig:
 653              	.LFB44:
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called.  
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.  
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 654              		.loc 1 619 0
 655              		.cfi_startproc
 656              	.LVL63:
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 657              		.loc 1 624 0
 658 0000 064B     		ldr	r3, .L52
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 659              		.loc 1 619 0
 660 0002 00B5     		push	{lr}
 661              	.LCFI8:
 662              		.cfi_def_cfa_offset 4
 663              		.cfi_offset 14, -4
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set NSS pin internally by software */
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 664              		.loc 1 627 0
 665 0004 0288     		ldrh	r2, [r0]
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 666              		.loc 1 624 0
 667 0006 9942     		cmp	r1, r3
 668 0008 03D0     		beq	.L49
 669              		.loc 1 627 0
 670 000a 8023     		mov	r3, #128
 671 000c 5B00     		lsl	r3, r3, #1
 672 000e 1343     		orr	r3, r2
 673 0010 01E0     		b	.L51
 674              	.L49:
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Reset NSS pin internally by software */
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 675              		.loc 1 632 0
 676 0012 034B     		ldr	r3, .L52+4
 677 0014 1340     		and	r3, r2
 678              	.L51:
 679 0016 0380     		strh	r3, [r0]
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 680              		.loc 1 634 0
 681              		@ sp needed for prologue
 682 0018 00BD     		pop	{pc}
 683              	.L53:
 684 001a C046     		.align	2
 685              	.L52:
 686 001c FFFE0000 		.word	65279
 687 0020 FFFEFFFF 		.word	-257
 688              		.cfi_endproc
 689              	.LFE44:
 691              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 692              		.align	1
 693              		.global	SPI_SSOutputCmd
 694              		.code	16
 695              		.thumb_func
 697              	SPI_SSOutputCmd:
 698              	.LFB45:
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called and the NSS hardware management mode is selected. 
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.  
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 699              		.loc 1 647 0
 700              		.cfi_startproc
 701              	.LVL64:
 702 0000 00B5     		push	{lr}
 703              	.LCFI9:
 704              		.cfi_def_cfa_offset 4
 705              		.cfi_offset 14, -4
 706 0002 0423     		mov	r3, #4
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI SS output */
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_CR2_SSOE;
 707              		.loc 1 654 0
 708 0004 8288     		ldrh	r2, [r0, #4]
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 709              		.loc 1 651 0
 710 0006 0029     		cmp	r1, #0
 711 0008 01D0     		beq	.L55
 712              		.loc 1 654 0
 713 000a 1343     		orr	r3, r2
 714 000c 01E0     		b	.L57
 715              	.L55:
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI SS output */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 716              		.loc 1 659 0
 717 000e 9A43     		bic	r2, r3
 718 0010 131C     		mov	r3, r2
 719              	.L57:
 720 0012 8380     		strh	r3, [r0, #4]
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 721              		.loc 1 661 0
 722              		@ sp needed for prologue
 723 0014 00BD     		pop	{pc}
 724              		.cfi_endproc
 725              	.LFE45:
 727              		.section	.text.SPI_NSSPulseModeCmd,"ax",%progbits
 728              		.align	1
 729              		.global	SPI_NSSPulseModeCmd
 730              		.code	16
 731              		.thumb_func
 733              	SPI_NSSPulseModeCmd:
 734              	.LFB46:
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the NSS pulse management mode.
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called. 
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   When TI mode is selected, the control bits NSSP is not taken into 
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         consideration and are configured by hardware respectively to the 
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         TI mode requirements. 
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the NSS pulse management mode.
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 735              		.loc 1 677 0
 736              		.cfi_startproc
 737              	.LVL65:
 738 0000 00B5     		push	{lr}
 739              	.LCFI10:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 14, -4
 742 0002 0823     		mov	r3, #8
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the NSS pulse management mode */
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_CR2_NSSP;
 743              		.loc 1 685 0
 744 0004 8288     		ldrh	r2, [r0, #4]
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 745              		.loc 1 682 0
 746 0006 0029     		cmp	r1, #0
 747 0008 01D0     		beq	.L59
 748              		.loc 1 685 0
 749 000a 1343     		orr	r3, r2
 750 000c 01E0     		b	.L61
 751              	.L59:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the NSS pulse management mode */
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 752              		.loc 1 690 0
 753 000e 9A43     		bic	r2, r3
 754 0010 131C     		mov	r3, r2
 755              	.L61:
 756 0012 8380     		strh	r3, [r0, #4]
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 757              		.loc 1 692 0
 758              		@ sp needed for prologue
 759 0014 00BD     		pop	{pc}
 760              		.cfi_endproc
 761              	.LFE46:
 763              		.section	.text.SPI_SendData8,"ax",%progbits
 764              		.align	1
 765              		.global	SPI_SendData8
 766              		.code	16
 767              		.thumb_func
 769              	SPI_SendData8:
 770              	.LFB47:
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Data transfers functions
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                     ##### Data transfers functions #####
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI or I2S
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          data transfers.
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In reception, data are received and then stored into an internal Rx buffer while 
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          In transmission, data are first stored into an internal Tx buffer before being 
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          transmitted.
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The read access of the SPI_DR register can be done using 
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          SPI_ReceiveData8() (when data size is equal or inferior than 8bits) and.
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          SPI_I2S_ReceiveData16() (when data size is superior than 8bits)function
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          can be done using SPI_SendData8() (when data size is equal or inferior than 8bits)
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and SPI_I2S_SendData16() (when data size is superior than 8bits) function 
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and stores the written data into Tx buffer.
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral.
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  Data: Data to be transmitted.
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 771              		.loc 1 732 0
 772              		.cfi_startproc
 773              	.LVL66:
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t spixbase = 0x00;
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase = (uint32_t)SPIx; 
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase += 0x0C;
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *(__IO uint8_t *) spixbase = Data;
 774              		.loc 1 741 0
 775 0000 0173     		strb	r1, [r0, #12]
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 776              		.loc 1 742 0
 777              		@ sp needed for prologue
 778 0002 7047     		bx	lr
 779              		.cfi_endproc
 780              	.LFE47:
 782              		.section	.text.SPI_I2S_SendData16,"ax",%progbits
 783              		.align	1
 784              		.global	SPI_I2S_SendData16
 785              		.code	16
 786              		.thumb_func
 788              	SPI_I2S_SendData16:
 789              	.LFB48:
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral. 
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  Data: Data to be transmitted.
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 790              		.loc 1 753 0
 791              		.cfi_startproc
 792              	.LVL67:
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->DR = (uint16_t)Data;
 793              		.loc 1 757 0
 794 0000 8181     		strh	r1, [r0, #12]
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 795              		.loc 1 758 0
 796              		@ sp needed for prologue
 797 0002 7047     		bx	lr
 798              		.cfi_endproc
 799              	.LFE48:
 801              		.section	.text.SPI_ReceiveData8,"ax",%progbits
 802              		.align	1
 803              		.global	SPI_ReceiveData8
 804              		.code	16
 805              		.thumb_func
 807              	SPI_ReceiveData8:
 808              	.LFB49:
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral. 
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The value of the received data.
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 809              		.loc 1 767 0
 810              		.cfi_startproc
 811              	.LVL68:
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t spixbase = 0x00;
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase = (uint32_t)SPIx; 
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase += 0x0C;
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return *(__IO uint8_t *) spixbase;
 812              		.loc 1 773 0
 813 0000 007B     		ldrb	r0, [r0, #12]
 814              	.LVL69:
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 815              		.loc 1 774 0
 816              		@ sp needed for prologue
 817 0002 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE49:
 821              		.section	.text.SPI_I2S_ReceiveData16,"ax",%progbits
 822              		.align	1
 823              		.global	SPI_I2S_ReceiveData16
 824              		.code	16
 825              		.thumb_func
 827              	SPI_I2S_ReceiveData16:
 828              	.LFB50:
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx peripheral. 
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.  
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The value of the received data.
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 829              		.loc 1 784 0
 830              		.cfi_startproc
 831              	.LVL70:
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return SPIx->DR;
 832              		.loc 1 785 0
 833 0000 8089     		ldrh	r0, [r0, #12]
 834              	.LVL71:
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 835              		.loc 1 786 0
 836              		@ sp needed for prologue
 837 0002 7047     		bx	lr
 838              		.cfi_endproc
 839              	.LFE50:
 841              		.section	.text.SPI_CRCLengthConfig,"ax",%progbits
 842              		.align	1
 843              		.global	SPI_CRCLengthConfig
 844              		.code	16
 845              		.thumb_func
 847              	SPI_CRCLengthConfig:
 848              	.LFB51:
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                 ##### Hardware CRC Calculation functions #####
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          calculation.SPI communication using CRC is possible through the following procedure:
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler,
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              function.
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Enable the SPI using the SPI_Cmd() function
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              SPI_TransmitCRC() function to indicate that after transmission of the last 
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              data, the CRC should be transmitted.
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              value. 
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     -@-
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) It is advised to don't read the calculate CRC values during the communication.
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) When the SPI is in slave mode, be careful to enable CRC calculation only
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        the value of the SPE bit.
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) With high bitrate frequencies, be careful when transmitting the CRC.
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        of the last data.
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        SPI bandwidth.
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) When the STM32F0xx are configured as slaves and the NSS hardware mode is 
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        phase.
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        This may happen for example in case of a multislave environment where the 
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        communication master addresses slaves alternately.
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) Between a slave deselection (high level on NSS) and a new slave selection
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        CRC calculation.
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     -@- To clear the CRC, follow the procedure below:
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the CRC calculation length for the selected SPI.
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called.  
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.  
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_CRCLength: specifies the SPI CRC calculation length.
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 849              		.loc 1 866 0
 850              		.cfi_startproc
 851              	.LVL72:
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear CRCL bit */
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 852              		.loc 1 872 0
 853 0000 0288     		ldrh	r2, [r0]
 854 0002 034B     		ldr	r3, .L67
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new CRCL bit value */
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 |= SPI_CRCLength;
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 855              		.loc 1 876 0
 856              		@ sp needed for prologue
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 857              		.loc 1 872 0
 858 0004 1340     		and	r3, r2
 859 0006 0380     		strh	r3, [r0]
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 |= SPI_CRCLength;
 860              		.loc 1 875 0
 861 0008 0388     		ldrh	r3, [r0]
 862 000a 1943     		orr	r1, r3
 863              	.LVL73:
 864 000c 0180     		strh	r1, [r0]
 865              		.loc 1 876 0
 866 000e 7047     		bx	lr
 867              	.L68:
 868              		.align	2
 869              	.L67:
 870 0010 FFF7FFFF 		.word	-2049
 871              		.cfi_endproc
 872              	.LFE51:
 874              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 875              		.align	1
 876              		.global	SPI_CalculateCRC
 877              		.code	16
 878              		.thumb_func
 880              	SPI_CalculateCRC:
 881              	.LFB52:
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called.   
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 882              		.loc 1 889 0
 883              		.cfi_startproc
 884              	.LVL74:
 885 0000 00B5     		push	{lr}
 886              	.LCFI11:
 887              		.cfi_def_cfa_offset 4
 888              		.cfi_offset 14, -4
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 889              		.loc 1 897 0
 890 0002 0288     		ldrh	r2, [r0]
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 891              		.loc 1 894 0
 892 0004 0029     		cmp	r1, #0
 893 0006 03D0     		beq	.L70
 894              		.loc 1 897 0
 895 0008 8023     		mov	r3, #128
 896 000a 9B01     		lsl	r3, r3, #6
 897 000c 1343     		orr	r3, r2
 898 000e 01E0     		b	.L72
 899              	.L70:
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 900              		.loc 1 902 0
 901 0010 014B     		ldr	r3, .L73
 902 0012 1340     		and	r3, r2
 903              	.L72:
 904 0014 0380     		strh	r3, [r0]
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 905              		.loc 1 904 0
 906              		@ sp needed for prologue
 907 0016 00BD     		pop	{pc}
 908              	.L74:
 909              		.align	2
 910              	.L73:
 911 0018 FFDFFFFF 		.word	-8193
 912              		.cfi_endproc
 913              	.LFE52:
 915              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 916              		.align	1
 917              		.global	SPI_TransmitCRC
 918              		.code	16
 919              		.thumb_func
 921              	SPI_TransmitCRC:
 922              	.LFB53:
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 923              		.loc 1 913 0
 924              		.cfi_startproc
 925              	.LVL75:
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 926              		.loc 1 918 0
 927 0000 0288     		ldrh	r2, [r0]
 928 0002 8023     		mov	r3, #128
 929 0004 5B01     		lsl	r3, r3, #5
 930 0006 1343     		orr	r3, r2
 931 0008 0380     		strh	r3, [r0]
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 932              		.loc 1 919 0
 933              		@ sp needed for prologue
 934 000a 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE53:
 938              		.section	.text.SPI_GetCRC,"ax",%progbits
 939              		.align	1
 940              		.global	SPI_GetCRC
 941              		.code	16
 942              		.thumb_func
 944              	SPI_GetCRC:
 945              	.LFB54:
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The selected CRC register value..
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 946              		.loc 1 932 0
 947              		.cfi_startproc
 948              	.LVL76:
 949 0000 00B5     		push	{lr}
 950              	.LCFI12:
 951              		.cfi_def_cfa_offset 4
 952              		.cfi_offset 14, -4
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t crcreg = 0;
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 953              		.loc 1 938 0
 954 0002 0129     		cmp	r1, #1
 955 0004 01D0     		beq	.L77
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the Tx CRC register */
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     crcreg = SPIx->TXCRCR;
 956              		.loc 1 941 0
 957 0006 008B     		ldrh	r0, [r0, #24]
 958              	.LVL77:
 959 0008 00E0     		b	.L78
 960              	.LVL78:
 961              	.L77:
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the Rx CRC register */
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     crcreg = SPIx->RXCRCR;
 962              		.loc 1 946 0
 963 000a 808A     		ldrh	r0, [r0, #20]
 964              	.LVL79:
 965              	.L78:
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the selected CRC register */
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return crcreg;
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 966              		.loc 1 950 0
 967              		@ sp needed for prologue
 968 000c 00BD     		pop	{pc}
 969              		.cfi_endproc
 970              	.LFE54:
 972              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 973              		.align	1
 974              		.global	SPI_GetCRCPolynomial
 975              		.code	16
 976              		.thumb_func
 978              	SPI_GetCRCPolynomial:
 979              	.LFB55:
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The CRC Polynomial register value.
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 980              		.loc 1 959 0
 981              		.cfi_startproc
 982              	.LVL80:
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the CRC polynomial register */
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return SPIx->CRCPR;
 983              		.loc 1 964 0
 984 0000 008A     		ldrh	r0, [r0, #16]
 985              	.LVL81:
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 986              		.loc 1 965 0
 987              		@ sp needed for prologue
 988 0002 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE55:
 992              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 993              		.align	1
 994              		.global	SPI_I2S_DMACmd
 995              		.code	16
 996              		.thumb_func
 998              	SPI_I2S_DMACmd:
 999              	.LFB56:
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   DMA transfers management functions
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                 ##### DMA transfers management functions #####
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides two functions that can be used only in DMA mode.
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be any combination of the following values:
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1000              		.loc 1 999 0
 1001              		.cfi_startproc
 1002              	.LVL82:
 1003 0000 00B5     		push	{lr}
 1004              	.LCFI13:
 1005              		.cfi_def_cfa_offset 4
 1006              		.cfi_offset 14, -4
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI DMA requests */
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1007              		.loc 1 1008 0
 1008 0002 8388     		ldrh	r3, [r0, #4]
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 1009              		.loc 1 1005 0
 1010 0004 002A     		cmp	r2, #0
 1011 0006 02D0     		beq	.L81
 1012              		.loc 1 1008 0
 1013 0008 1943     		orr	r1, r3
 1014              	.LVL83:
 1015 000a 8180     		strh	r1, [r0, #4]
 1016 000c 01E0     		b	.L80
 1017              	.LVL84:
 1018              	.L81:
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI DMA requests */
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1019              		.loc 1 1013 0
 1020 000e 8B43     		bic	r3, r1
 1021 0010 8380     		strh	r3, [r0, #4]
 1022              	.LVL85:
 1023              	.L80:
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1024              		.loc 1 1015 0
 1025              		@ sp needed for prologue
 1026 0012 00BD     		pop	{pc}
 1027              		.cfi_endproc
 1028              	.LFE56:
 1030              		.section	.text.SPI_LastDMATransferCmd,"ax",%progbits
 1031              		.align	1
 1032              		.global	SPI_LastDMATransferCmd
 1033              		.code	16
 1034              		.thumb_func
 1036              	SPI_LastDMATransferCmd:
 1037              	.LFB57:
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the number of data to transfer type(Even/Odd) for the DMA
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         last transfers and for the selected SPI.
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function have a meaning only if DMA mode is selected and if 
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the packing mode is used (data length <= 8 and DMA transfer size halfword)  
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_LastDMATransfer: specifies the SPI last DMA transfers state.
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxEvenRxEven: Number of data for transmission Even
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                   and number of data for reception Even.
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxOddRxEven: Number of data for transmission Odd
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                  and number of data for reception Even.
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxEvenRxOdd: Number of data for transmission Even
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                  and number of data for reception Odd.
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxOddRxOdd: Number of data for transmission Odd
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                 and number of data for reception Odd.
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1038              		.loc 1 1037 0
 1039              		.cfi_startproc
 1040              	.LVL86:
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear LDMA_TX and LDMA_RX bits */
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 &= CR2_LDMA_MASK;
 1041              		.loc 1 1043 0
 1042 0000 8288     		ldrh	r2, [r0, #4]
 1043 0002 034B     		ldr	r3, .L84
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new LDMA_TX and LDMA_RX bits value */
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 |= SPI_LastDMATransfer; 
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1044              		.loc 1 1047 0
 1045              		@ sp needed for prologue
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 &= CR2_LDMA_MASK;
 1046              		.loc 1 1043 0
 1047 0004 1340     		and	r3, r2
 1048 0006 8380     		strh	r3, [r0, #4]
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 |= SPI_LastDMATransfer; 
 1049              		.loc 1 1046 0
 1050 0008 8388     		ldrh	r3, [r0, #4]
 1051 000a 1943     		orr	r1, r3
 1052              	.LVL87:
 1053 000c 8180     		strh	r1, [r0, #4]
 1054              		.loc 1 1047 0
 1055 000e 7047     		bx	lr
 1056              	.L85:
 1057              		.align	2
 1058              	.L84:
 1059 0010 FF9FFFFF 		.word	-24577
 1060              		.cfi_endproc
 1061              	.LFE57:
 1063              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1064              		.align	1
 1065              		.global	SPI_I2S_ITConfig
 1066              		.code	16
 1067              		.thumb_func
 1069              	SPI_I2S_ITConfig:
 1070              	.LFB58:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Interrupts and flags management functions
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              ##### Interrupts and flags management functions #####
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to configure the SPI/I2S Interrupts 
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          sources and check or clear the flags or pending bits status.
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          The user should identify which mode will be used in his application to manage 
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          the communication: Polling mode, Interrupt mode or DMA mode. 
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** Polling Mode ***
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ====================
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_FRE: to indicate a Frame Format error occurs.
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..]
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (@)Do not use the BSY flag to handle each data transmission or reception. It is better 
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****            to use the TXE and RXNE flags instead.
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In this Mode it is advised to use the following functions:
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** Interrupt Mode ***
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ======================
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In Interrupt Mode, the SPI/I2S communication can be managed by 3 interrupt sources
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and 5 pending bits: 
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] Pending Bits:
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) I2S_IT_UDR : to indicate an Underrun Error occurs.
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_FRE : to indicate a Frame Format error occurs.
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] Interrupt Source:
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             interrupt.  
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             empty interrupt.
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In this Mode it is advised to use the following functions:
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** FIFO Status ***
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ===================
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] It is possible to monitor the FIFO status when a transfer is ongoing using the
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          following function:
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (+) uint32_t SPI_GetFIFOStatus(uint8_t SPI_FIFO_Direction); 
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** DMA Mode ***
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ================
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel 
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          requests:
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In this Mode it is advised to use the following function:
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewStat
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.  
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1071              		.loc 1 1144 0
 1072              		.cfi_startproc
 1073              	.LVL88:
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI IT index */
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set the IT mask */
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1074              		.loc 1 1156 0
 1075 0000 0909     		lsr	r1, r1, #4
 1076              	.LVL89:
 1077 0002 0123     		mov	r3, #1
 1078 0004 8B40     		lsl	r3, r3, r1
 1079 0006 99B2     		uxth	r1, r3
 1080              	.LVL90:
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1081              		.loc 1 1144 0
 1082 0008 00B5     		push	{lr}
 1083              	.LCFI14:
 1084              		.cfi_def_cfa_offset 4
 1085              		.cfi_offset 14, -4
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI interrupt */
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= itmask;
 1086              		.loc 1 1161 0
 1087 000a 8388     		ldrh	r3, [r0, #4]
 1088              	.LVL91:
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 1089              		.loc 1 1158 0
 1090 000c 002A     		cmp	r2, #0
 1091 000e 02D0     		beq	.L87
 1092              		.loc 1 1161 0
 1093 0010 1943     		orr	r1, r3
 1094              	.LVL92:
 1095 0012 8180     		strh	r1, [r0, #4]
 1096 0014 01E0     		b	.L86
 1097              	.LVL93:
 1098              	.L87:
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI interrupt */
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1099              		.loc 1 1166 0
 1100 0016 8B43     		bic	r3, r1
 1101 0018 8380     		strh	r3, [r0, #4]
 1102              	.LVL94:
 1103              	.L86:
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1104              		.loc 1 1168 0
 1105              		@ sp needed for prologue
 1106 001a 00BD     		pop	{pc}
 1107              		.cfi_endproc
 1108              	.LFE58:
 1110              		.section	.text.SPI_GetTransmissionFIFOStatus,"ax",%progbits
 1111              		.align	1
 1112              		.global	SPI_GetTransmissionFIFOStatus
 1113              		.code	16
 1114              		.thumb_func
 1116              	SPI_GetTransmissionFIFOStatus:
 1117              	.LFB59:
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the current SPIx Transmission FIFO filled level.
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The Transmission FIFO filling state.
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_Empty: when FIFO is empty
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1118              		.loc 1 1181 0
 1119              		.cfi_startproc
 1120              	.LVL95:
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx Transmission FIFO level bits */
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 1121              		.loc 1 1183 0
 1122 0000 0389     		ldrh	r3, [r0, #8]
 1123 0002 C020     		mov	r0, #192
 1124              	.LVL96:
 1125 0004 4001     		lsl	r0, r0, #5
 1126 0006 1840     		and	r0, r3
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1127              		.loc 1 1184 0
 1128              		@ sp needed for prologue
 1129 0008 7047     		bx	lr
 1130              		.cfi_endproc
 1131              	.LFE59:
 1133              		.section	.text.SPI_GetReceptionFIFOStatus,"ax",%progbits
 1134              		.align	1
 1135              		.global	SPI_GetReceptionFIFOStatus
 1136              		.code	16
 1137              		.thumb_func
 1139              	SPI_GetReceptionFIFOStatus:
 1140              	.LFB60:
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the current SPIx Reception FIFO filled level.
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The Reception FIFO filling state.
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_Empty: when FIFO is empty
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1141              		.loc 1 1197 0
 1142              		.cfi_startproc
 1143              	.LVL97:
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx Reception FIFO level bits */
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 1144              		.loc 1 1199 0
 1145 0000 0389     		ldrh	r3, [r0, #8]
 1146 0002 C020     		mov	r0, #192
 1147              	.LVL98:
 1148 0004 C000     		lsl	r0, r0, #3
 1149 0006 1840     		and	r0, r3
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1150              		.loc 1 1200 0
 1151              		@ sp needed for prologue
 1152 0008 7047     		bx	lr
 1153              		.cfi_endproc
 1154              	.LFE60:
 1156              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1157              		.align	1
 1158              		.global	SPI_I2S_GetFlagStatus
 1159              		.code	16
 1160              		.thumb_func
 1162              	SPI_I2S_GetFlagStatus:
 1163              	.LFB61:
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Checks whether the specified SPI flag is set or not.
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.    
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_FRE: TI frame format error flag.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.   
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1164              		.loc 1 1222 0
 1165              		.cfi_startproc
 1166              	.LVL99:
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   FlagStatus bitstatus = RESET;
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the status of the specified SPI flag */
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1167              		.loc 1 1229 0
 1168 0000 0089     		ldrh	r0, [r0, #8]
 1169              	.LVL100:
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_FLAG is set */
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = SET;
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = RESET;
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return  bitstatus;
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1170              		.loc 1 1241 0
 1171              		@ sp needed for prologue
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1172              		.loc 1 1229 0
 1173 0002 0840     		and	r0, r1
 1174              	.LVL101:
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return  bitstatus;
 1175              		.loc 1 1240 0
 1176 0004 431E     		sub	r3, r0, #1
 1177 0006 9841     		sbc	r0, r0, r3
 1178              		.loc 1 1241 0
 1179 0008 7047     		bx	lr
 1180              		.cfi_endproc
 1181              	.LFE61:
 1183              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1184              		.align	1
 1185              		.global	SPI_I2S_ClearFlag
 1186              		.code	16
 1187              		.thumb_func
 1189              	SPI_I2S_ClearFlag:
 1190              	.LFB62:
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         This function clears only CRCERR flag.
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by  
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         a read operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         a write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1191              		.loc 1 1259 0
 1192              		.cfi_startproc
 1193              	.LVL102:
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1194              		.loc 1 1265 0
 1195 0000 C943     		mvn	r1, r1
 1196              	.LVL103:
 1197 0002 0181     		strh	r1, [r0, #8]
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1198              		.loc 1 1266 0
 1199              		@ sp needed for prologue
 1200 0004 7047     		bx	lr
 1201              		.cfi_endproc
 1202              	.LFE62:
 1204              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1205              		.align	1
 1206              		.global	SPI_I2S_GetITStatus
 1207              		.code	16
 1208              		.thumb_func
 1210              	SPI_I2S_GetITStatus:
 1211              	.LFB63:
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_FRE: Format Error interrupt.  
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1212              		.loc 1 1283 0
 1213              		.cfi_startproc
 1214              	.LVL104:
 1215 0000 30B5     		push	{r4, r5, lr}
 1216              	.LCFI15:
 1217              		.cfi_def_cfa_offset 12
 1218              		.cfi_offset 4, -12
 1219              		.cfi_offset 5, -8
 1220              		.cfi_offset 14, -4
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ITStatus bitstatus = RESET;
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI_I2S_IT index */
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1221              		.loc 1 1292 0
 1222 0002 0123     		mov	r3, #1
 1223 0004 0F25     		mov	r5, #15
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set the IT mask */
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = 0x01 << itmask;
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1224              		.loc 1 1301 0
 1225 0006 8288     		ldrh	r2, [r0, #4]
 1226              	.LVL105:
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1227              		.loc 1 1292 0
 1228 0008 0D40     		and	r5, r1
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1229              		.loc 1 1304 0
 1230 000a 0489     		ldrh	r4, [r0, #8]
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1231              		.loc 1 1292 0
 1232 000c 181C     		mov	r0, r3
 1233              	.LVL106:
 1234 000e A840     		lsl	r0, r0, r5
 1235 0010 051C     		mov	r5, r0
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_IT is set */
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = SET;
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_IT is reset */
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = RESET;
 1236              		.loc 1 1312 0
 1237 0012 0020     		mov	r0, #0
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1238              		.loc 1 1304 0
 1239 0014 2542     		tst	r5, r4
 1240 0016 05D0     		beq	.L94
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = 0x01 << itmask;
 1241              		.loc 1 1298 0 discriminator 1
 1242 0018 0809     		lsr	r0, r1, #4
 1243 001a 8340     		lsl	r3, r3, r0
 1244 001c 181C     		mov	r0, r3
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1245              		.loc 1 1304 0 discriminator 1
 1246 001e 1040     		and	r0, r2
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = SET;
 1247              		.loc 1 1307 0 discriminator 1
 1248 0020 431E     		sub	r3, r0, #1
 1249 0022 9841     		sbc	r0, r0, r3
 1250              	.L94:
 1251              	.LVL107:
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the SPI_I2S_IT status */
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return bitstatus;
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1252              		.loc 1 1316 0
 1253              		@ sp needed for prologue
 1254 0024 30BD     		pop	{r4, r5, pc}
 1255              		.cfi_endproc
 1256              	.LFE63:
 1258              		.text
 1259              	.Letext0:
 1260              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1261              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 1262              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
 1263              		.file 5 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_spi.c
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:18     .text.SPI_I2S_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:23     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:78     .text.SPI_I2S_DeInit:0000003c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:84     .text.SPI_StructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:89     .text.SPI_StructInit:00000000 SPI_StructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:127    .text.SPI_Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:132    .text.SPI_Init:00000000 SPI_Init
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:214    .text.SPI_Init:0000004c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:220    .text.I2S_StructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:225    .text.I2S_StructInit:00000000 I2S_StructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:254    .text.I2S_Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:259    .text.I2S_Init:00000000 I2S_Init
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:414    .text.I2S_Init:00000098 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:419    .text.SPI_Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:424    .text.SPI_Cmd:00000000 SPI_Cmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:455    .text.SPI_TIModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:460    .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:491    .text.I2S_Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:496    .text.I2S_Cmd:00000000 I2S_Cmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:527    .text.I2S_Cmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:532    .text.SPI_DataSizeConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:537    .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:562    .text.SPI_DataSizeConfig:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:567    .text.SPI_RxFIFOThresholdConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:572    .text.SPI_RxFIFOThresholdConfig:00000000 SPI_RxFIFOThresholdConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:595    .text.SPI_RxFIFOThresholdConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:600    .text.SPI_BiDirectionalLineConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:605    .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:642    .text.SPI_BiDirectionalLineConfig:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:647    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:652    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:686    .text.SPI_NSSInternalSoftwareConfig:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:692    .text.SPI_SSOutputCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:697    .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:728    .text.SPI_NSSPulseModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:733    .text.SPI_NSSPulseModeCmd:00000000 SPI_NSSPulseModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:764    .text.SPI_SendData8:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:769    .text.SPI_SendData8:00000000 SPI_SendData8
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:783    .text.SPI_I2S_SendData16:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:788    .text.SPI_I2S_SendData16:00000000 SPI_I2S_SendData16
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:802    .text.SPI_ReceiveData8:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:807    .text.SPI_ReceiveData8:00000000 SPI_ReceiveData8
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:822    .text.SPI_I2S_ReceiveData16:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:827    .text.SPI_I2S_ReceiveData16:00000000 SPI_I2S_ReceiveData16
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:842    .text.SPI_CRCLengthConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:847    .text.SPI_CRCLengthConfig:00000000 SPI_CRCLengthConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:870    .text.SPI_CRCLengthConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:875    .text.SPI_CalculateCRC:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:880    .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:911    .text.SPI_CalculateCRC:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:916    .text.SPI_TransmitCRC:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:921    .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:939    .text.SPI_GetCRC:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:944    .text.SPI_GetCRC:00000000 SPI_GetCRC
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:973    .text.SPI_GetCRCPolynomial:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:978    .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:993    .text.SPI_I2S_DMACmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:998    .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1031   .text.SPI_LastDMATransferCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1036   .text.SPI_LastDMATransferCmd:00000000 SPI_LastDMATransferCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1059   .text.SPI_LastDMATransferCmd:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1064   .text.SPI_I2S_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1069   .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1111   .text.SPI_GetTransmissionFIFOStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1116   .text.SPI_GetTransmissionFIFOStatus:00000000 SPI_GetTransmissionFIFOStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1134   .text.SPI_GetReceptionFIFOStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1139   .text.SPI_GetReceptionFIFOStatus:00000000 SPI_GetReceptionFIFOStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1157   .text.SPI_I2S_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1162   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1184   .text.SPI_I2S_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1189   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1205   .text.SPI_I2S_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccboGz4L.s:1210   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_spi.h.120.b05a38a41ae855920b3d84ddcb9998e5

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
__aeabi_uidiv
RCC_GetClocksFreq
