   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RCC_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	RCC_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @file    stm32f0xx_rcc.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Peripheral clocks configuration
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Interrupts and flags management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  @verbatim
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                         ##### RCC specific features #####
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] After reset the device is running from HSI (8 MHz) with Flash 0 WS, 
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          all peripherals are off except internal SRAM, Flash and SWD.
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              all peripherals mapped on these busses are running at HSI speed.
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) All GPIOs are in input floating state, except the SWD pins which
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              are assigned to be used for debug purpose.
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] Once the device started from reset, the user application has to:
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the clock source to be used to drive the System clock
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (if the application needs higher frequency/performance)
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the System clock frequency and Flash settings
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the AHB and APB busses prescalers
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Enable the clock for the peripheral(s) to be used
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the clock source(s) for peripherals which clocks are not
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              derived from the System clock (ADC, CEC, I2C, USART, RTC and IWDG)
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  @endverbatim
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @attention
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * You may not use this file except in compliance with the License.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * You may obtain a copy of the License at:
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * See the License for the specific language governing permissions and
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * limitations under the License.
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #include "stm32f0xx_rcc.h"
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC 
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief RCC driver modules
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */ 
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* ---------------------- RCC registers mask -------------------------------- */
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* RCC Flag Mask */
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CR register byte 2 (Bits[23:16]) base address */
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CR_BYTE2_ADDRESS          ((uint32_t)0x40021002)
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CFGR register byte 3 (Bits[31:23]) base address */
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CFGR_BYTE3_ADDRESS        ((uint32_t)0x40021007)
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CIR register byte 1 (Bits[15:8]) base address */
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CIR_BYTE1_ADDRESS         ((uint32_t)0x40021009)
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CIR register byte 2 (Bits[23:16]) base address */
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x4002100A)
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Private_Functions
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ##### Internal-external clocks, PLL, CSS and MCO configuration functions #####
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provides functions allowing to configure the internal/external clocks,
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          PLL, CSS and MCO.
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              or through the PLL as System clock source.
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The HSI clock can be used also to clock the USART, I2C and CEC peripherals.
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSI14 (high-speed internal for ADC), 14 MHz factory-trimmed RC used to clock
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              the ADC peripheral.
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) LSI (low-speed internal), 40 KHz low consumption RC used as IWDG and/or RTC
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              clock source.
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSE (high-speed external), 4 to 32 MHz crystal oscillator used directly or
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source. 
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              LSE can be used also to clock the USART and CEC peripherals.   
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) PLL (clocked by HSI or HSE), for System clock.
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) CSS (Clock security system), once enabled and if a HSE clock failure occurs 
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (HSE used directly or through PLL as System clock source), the System clock
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled. 
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The interrupt is linked to the Cortex-M0 NMI (Non-Maskable Interrupt) 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              exception vector.   
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSI14, LSI,
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              HSE, LSE or PLL (divided by 2) clock on PA8 pin.
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      HSI ON and used as system clock source 
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      HSI14, HSE and PLL OFF
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      AHB, APB prescaler set to 1.
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      CSS and MCO OFF
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      All interrupts disabled
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   However, this function doesn't modify the configuration of the
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      Peripheral clocks
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      LSI, LSE and RTC clocks
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_DeInit(void)
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
  26              		.loc 1 147 0
  27              		.cfi_startproc
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set HSION bit */
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  28              		.loc 1 149 0
  29 0000 114B     		ldr	r3, .L2
  30 0002 0122     		mov	r2, #1
  31 0004 1968     		ldr	r1, [r3]
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #if defined (STM32F051)
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80C;
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #else
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0x08FFB80C;
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #endif /* STM32F051 */
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEBYP bit */
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset PREDIV1[3:0] bits */
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSI14 bit */
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Disable all interrupts */
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CIR = 0x00000000;
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
  32              		.loc 1 179 0
  33              		@ sp needed for prologue
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  34              		.loc 1 149 0
  35 0006 1143     		orr	r1, r2
  36 0008 1960     		str	r1, [r3]
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0x08FFB80C;
  37              		.loc 1 156 0
  38 000a 5868     		ldr	r0, [r3, #4]
  39 000c 0F49     		ldr	r1, .L2+4
  40 000e 0140     		and	r1, r0
  41 0010 5960     		str	r1, [r3, #4]
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  42              		.loc 1 160 0
  43 0012 1868     		ldr	r0, [r3]
  44 0014 0E49     		ldr	r1, .L2+8
  45 0016 0140     		and	r1, r0
  46 0018 1960     		str	r1, [r3]
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  47              		.loc 1 163 0
  48 001a 1868     		ldr	r0, [r3]
  49 001c 0D49     		ldr	r1, .L2+12
  50 001e 0140     		and	r1, r0
  51 0020 1960     		str	r1, [r3]
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
  52              		.loc 1 166 0
  53 0022 5868     		ldr	r0, [r3, #4]
  54 0024 0C49     		ldr	r1, .L2+16
  55 0026 0140     		and	r1, r0
  56 0028 5960     		str	r1, [r3, #4]
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  57              		.loc 1 169 0
  58 002a D96A     		ldr	r1, [r3, #44]
  59 002c 0F20     		mov	r0, #15
  60 002e 8143     		bic	r1, r0
  61 0030 D962     		str	r1, [r3, #44]
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
  62              		.loc 1 172 0
  63 0032 186B     		ldr	r0, [r3, #48]
  64 0034 0949     		ldr	r1, .L2+20
  65 0036 0140     		and	r1, r0
  66 0038 1963     		str	r1, [r3, #48]
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  67              		.loc 1 175 0
  68 003a 596B     		ldr	r1, [r3, #52]
  69 003c 9143     		bic	r1, r2
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CIR = 0x00000000;
  70              		.loc 1 178 0
  71 003e 0022     		mov	r2, #0
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  72              		.loc 1 175 0
  73 0040 5963     		str	r1, [r3, #52]
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CIR = 0x00000000;
  74              		.loc 1 178 0
  75 0042 9A60     		str	r2, [r3, #8]
  76              		.loc 1 179 0
  77 0044 7047     		bx	lr
  78              	.L3:
  79 0046 C046     		.align	2
  80              	.L2:
  81 0048 00100240 		.word	1073876992
  82 004c 0CB8FF08 		.word	150976524
  83 0050 FFFFF6FE 		.word	-17367041
  84 0054 FFFFFBFF 		.word	-262145
  85 0058 FFFFC0FF 		.word	-4128769
  86 005c ACFEF0FF 		.word	-983380
  87              		.cfi_endproc
  88              	.LFE33:
  90              		.section	.text.RCC_HSEConfig,"ax",%progbits
  91              		.align	1
  92              		.global	RCC_HSEConfig
  93              		.code	16
  94              		.thumb_func
  96              	RCC_HSEConfig:
  97              	.LFB34:
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function resets the CSSON bit, so if the Clock security system(CSS)
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         function.
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
  98              		.loc 1 202 0
  99              		.cfi_startproc
 100              	.LVL0:
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 101              		.loc 1 207 0
 102 0000 024B     		ldr	r3, .L5
 103 0002 0022     		mov	r2, #0
 104 0004 1A70     		strb	r2, [r3]
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 105              		.loc 1 212 0
 106              		@ sp needed for prologue
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 107              		.loc 1 210 0
 108 0006 1870     		strb	r0, [r3]
 109              		.loc 1 212 0
 110 0008 7047     		bx	lr
 111              	.L6:
 112 000a C046     		.align	2
 113              	.L5:
 114 000c 02100240 		.word	1073876994
 115              		.cfi_endproc
 116              	.LFE34:
 118              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 119              		.align	1
 120              		.global	RCC_AdjustHSICalibrationValue
 121              		.code	16
 122              		.thumb_func
 124              	RCC_AdjustHSICalibrationValue:
 125              	.LFB36:
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Waits for HSE start-up.
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function waits on HSERDY flag to be set and return SUCCESS if 
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f0xx.h file. You can tailor it depending
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         on the HSE crystal used in your application.
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ErrorStatus status = ERROR;
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   FlagStatus HSEStatus = RESET;
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Wait till HSE is ready and if timeout is reached exit */
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   do
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     StartUpCounter++;  
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     status = SUCCESS;
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     status = ERROR;
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }  
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return (status);
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         Refer to the Application Note AN4067 for more details on how to  
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibrate the HSI.
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 126              		.loc 1 262 0
 127              		.cfi_startproc
 128              	.LVL1:
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR;
 129              		.loc 1 268 0
 130 0000 034B     		ldr	r3, .L8
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 131              		.loc 1 271 0
 132 0002 F821     		mov	r1, #248
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR;
 133              		.loc 1 268 0
 134 0004 1A68     		ldr	r2, [r3]
 135              	.LVL2:
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 136              		.loc 1 274 0
 137 0006 C000     		lsl	r0, r0, #3
 138              	.LVL3:
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 139              		.loc 1 271 0
 140 0008 8A43     		bic	r2, r1
 141              	.LVL4:
 142              		.loc 1 274 0
 143 000a 1043     		orr	r0, r2
 144              	.LVL5:
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR = tmpreg;
 145              		.loc 1 277 0
 146 000c 1860     		str	r0, [r3]
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 147              		.loc 1 278 0
 148              		@ sp needed for prologue
 149 000e 7047     		bx	lr
 150              	.L9:
 151              		.align	2
 152              	.L8:
 153 0010 00100240 		.word	1073876992
 154              		.cfi_endproc
 155              	.LFE36:
 157              		.section	.text.RCC_HSICmd,"ax",%progbits
 158              		.align	1
 159              		.global	RCC_HSICmd
 160              		.code	16
 161              		.thumb_func
 163              	RCC_HSICmd:
 164              	.LFB37:
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on 
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the PLL and/or system clock.
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         as system clock. In this case, you have to select another source 
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the system clock then stop the HSI.
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI.
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 165              		.loc 1 296 0
 166              		.cfi_startproc
 167              	.LVL6:
 168 0000 054B     		ldr	r3, .L14
 169 0002 00B5     		push	{lr}
 170              	.LCFI0:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 14, -4
 173 0004 0122     		mov	r2, #1
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_HSION;
 174              		.loc 1 302 0
 175 0006 1968     		ldr	r1, [r3]
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 176              		.loc 1 300 0
 177 0008 0028     		cmp	r0, #0
 178 000a 01D0     		beq	.L11
 179              		.loc 1 302 0
 180 000c 0A43     		orr	r2, r1
 181 000e 01E0     		b	.L13
 182              	.L11:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_HSION;
 183              		.loc 1 306 0
 184 0010 9143     		bic	r1, r2
 185 0012 0A1C     		mov	r2, r1
 186              	.L13:
 187 0014 1A60     		str	r2, [r3]
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 188              		.loc 1 308 0
 189              		@ sp needed for prologue
 190 0016 00BD     		pop	{pc}
 191              	.L15:
 192              		.align	2
 193              	.L14:
 194 0018 00100240 		.word	1073876992
 195              		.cfi_endproc
 196              	.LFE37:
 198              		.section	.text.RCC_AdjustHSI14CalibrationValue,"ax",%progbits
 199              		.align	1
 200              		.global	RCC_AdjustHSI14CalibrationValue
 201              		.code	16
 202              		.thumb_func
 204              	RCC_AdjustHSI14CalibrationValue:
 205              	.LFB38:
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator for ADC (HSI14) 
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibration value.
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         Refer to the Application Note AN4067  for more details on how to  
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibrate the HSI14.
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  HSI14CalibrationValue: specifies the HSI14 calibration trimming value.
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AdjustHSI14CalibrationValue(uint8_t HSI14CalibrationValue)
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 206              		.loc 1 322 0
 207              		.cfi_startproc
 208              	.LVL7:
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR2;
 209              		.loc 1 328 0
 210 0000 034B     		ldr	r3, .L17
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HSI14TRIM[4:0] bits */
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR2_HSI14TRIM;
 211              		.loc 1 331 0
 212 0002 F821     		mov	r1, #248
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR2;
 213              		.loc 1 328 0
 214 0004 5A6B     		ldr	r2, [r3, #52]
 215              	.LVL8:
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 216              		.loc 1 334 0
 217 0006 C000     		lsl	r0, r0, #3
 218              	.LVL9:
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR2_HSI14TRIM;
 219              		.loc 1 331 0
 220 0008 8A43     		bic	r2, r1
 221              	.LVL10:
 222              		.loc 1 334 0
 223 000a 1043     		orr	r0, r2
 224              	.LVL11:
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 = tmpreg;
 225              		.loc 1 337 0
 226 000c 5863     		str	r0, [r3, #52]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 227              		.loc 1 338 0
 228              		@ sp needed for prologue
 229 000e 7047     		bx	lr
 230              	.L18:
 231              		.align	2
 232              	.L17:
 233 0010 00100240 		.word	1073876992
 234              		.cfi_endproc
 235              	.LFE38:
 237              		.section	.text.RCC_HSI14Cmd,"ax",%progbits
 238              		.align	1
 239              		.global	RCC_HSI14Cmd
 240              		.code	16
 241              		.thumb_func
 243              	RCC_HSI14Cmd:
 244              	.LFB39:
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for ADC (HSI14).
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSI14, the application software should wait on 
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the ADC.
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI14 is stopped by hardware when entering STOP and STANDBY modes.
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14.
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI14Cmd(FunctionalState NewState)
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 245              		.loc 1 353 0
 246              		.cfi_startproc
 247              	.LVL12:
 248 0000 054B     		ldr	r3, .L23
 249 0002 00B5     		push	{lr}
 250              	.LCFI1:
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 14, -4
 253 0004 0122     		mov	r2, #1
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14ON;
 254              		.loc 1 359 0
 255 0006 596B     		ldr	r1, [r3, #52]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 256              		.loc 1 357 0
 257 0008 0028     		cmp	r0, #0
 258 000a 01D0     		beq	.L20
 259              		.loc 1 359 0
 260 000c 0A43     		orr	r2, r1
 261 000e 01E0     		b	.L22
 262              	.L20:
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14ON;
 263              		.loc 1 363 0
 264 0010 9143     		bic	r1, r2
 265 0012 0A1C     		mov	r2, r1
 266              	.L22:
 267 0014 5A63     		str	r2, [r3, #52]
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 268              		.loc 1 365 0
 269              		@ sp needed for prologue
 270 0016 00BD     		pop	{pc}
 271              	.L24:
 272              		.align	2
 273              	.L23:
 274 0018 00100240 		.word	1073876992
 275              		.cfi_endproc
 276              	.LFE39:
 278              		.section	.text.RCC_HSI14ADCRequestCmd,"ax",%progbits
 279              		.align	1
 280              		.global	RCC_HSI14ADCRequestCmd
 281              		.code	16
 282              		.thumb_func
 284              	RCC_HSI14ADCRequestCmd:
 285              	.LFB40:
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator request from ADC.
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14 ADC request.
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 286              		.loc 1 374 0
 287              		.cfi_startproc
 288              	.LVL13:
 289 0000 054B     		ldr	r3, .L29
 290 0002 00B5     		push	{lr}
 291              	.LCFI2:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 14, -4
 294 0004 0422     		mov	r2, #4
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 295              		.loc 1 380 0
 296 0006 596B     		ldr	r1, [r3, #52]
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 297              		.loc 1 378 0
 298 0008 0028     		cmp	r0, #0
 299 000a 02D0     		beq	.L26
 300              		.loc 1 380 0
 301 000c 9143     		bic	r1, r2
 302 000e 0A1C     		mov	r2, r1
 303 0010 00E0     		b	.L28
 304              	.L26:
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14DIS;
 305              		.loc 1 384 0
 306 0012 0A43     		orr	r2, r1
 307              	.L28:
 308 0014 5A63     		str	r2, [r3, #52]
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 309              		.loc 1 386 0
 310              		@ sp needed for prologue
 311 0016 00BD     		pop	{pc}
 312              	.L30:
 313              		.align	2
 314              	.L29:
 315 0018 00100240 		.word	1073876992
 316              		.cfi_endproc
 317              	.LFE40:
 319              		.section	.text.RCC_LSEConfig,"ax",%progbits
 320              		.align	1
 321              		.global	RCC_LSEConfig
 322              		.code	16
 323              		.thumb_func
 325              	RCC_LSEConfig:
 326              	.LFB41:
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to this
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         domain after reset, you have to enable write access using 
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         (to be done once after reset).
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSEConfig(uint32_t RCC_LSE)
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 327              		.loc 1 406 0
 328              		.cfi_startproc
 329              	.LVL14:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEON bit */
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEON);
 330              		.loc 1 412 0
 331 0000 064B     		ldr	r3, .L32
 332 0002 0121     		mov	r1, #1
 333 0004 1A6A     		ldr	r2, [r3, #32]
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEBYP bit */
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Configure LSE */
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSE;
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 334              		.loc 1 419 0
 335              		@ sp needed for prologue
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEON);
 336              		.loc 1 412 0
 337 0006 8A43     		bic	r2, r1
 338 0008 1A62     		str	r2, [r3, #32]
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 339              		.loc 1 415 0
 340 000a 1A6A     		ldr	r2, [r3, #32]
 341 000c 0421     		mov	r1, #4
 342 000e 8A43     		bic	r2, r1
 343 0010 1A62     		str	r2, [r3, #32]
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSE;
 344              		.loc 1 418 0
 345 0012 1A6A     		ldr	r2, [r3, #32]
 346 0014 1043     		orr	r0, r2
 347              	.LVL15:
 348 0016 1862     		str	r0, [r3, #32]
 349              		.loc 1 419 0
 350 0018 7047     		bx	lr
 351              	.L33:
 352 001a C046     		.align	2
 353              	.L32:
 354 001c 00100240 		.word	1073876992
 355              		.cfi_endproc
 356              	.LFE41:
 358              		.section	.text.RCC_LSEDriveConfig,"ax",%progbits
 359              		.align	1
 360              		.global	RCC_LSEDriveConfig
 361              		.code	16
 362              		.thumb_func
 364              	RCC_LSEDriveConfig:
 365              	.LFB42:
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE) drive capability.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_LSEDrive: specifies the new state of the LSE drive capability.
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_Low: LSE oscillator low drive capability.
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_MediumLow: LSE oscillator medium low drive capability.
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 366              		.loc 1 432 0
 367              		.cfi_startproc
 368              	.LVL16:
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear LSEDRV[1:0] bits */
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 369              		.loc 1 437 0
 370 0000 044B     		ldr	r3, .L35
 371 0002 1821     		mov	r1, #24
 372 0004 1A6A     		ldr	r2, [r3, #32]
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the LSE Drive */
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSEDrive;
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 373              		.loc 1 441 0
 374              		@ sp needed for prologue
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 375              		.loc 1 437 0
 376 0006 8A43     		bic	r2, r1
 377 0008 1A62     		str	r2, [r3, #32]
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSEDrive;
 378              		.loc 1 440 0
 379 000a 1A6A     		ldr	r2, [r3, #32]
 380 000c 1043     		orr	r0, r2
 381              	.LVL17:
 382 000e 1862     		str	r0, [r3, #32]
 383              		.loc 1 441 0
 384 0010 7047     		bx	lr
 385              	.L36:
 386 0012 C046     		.align	2
 387              	.L35:
 388 0014 00100240 		.word	1073876992
 389              		.cfi_endproc
 390              	.LFE42:
 392              		.section	.text.RCC_LSICmd,"ax",%progbits
 393              		.align	1
 394              		.global	RCC_LSICmd
 395              		.code	16
 396              		.thumb_func
 398              	RCC_LSICmd:
 399              	.LFB43:
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the LSI.
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 400              		.loc 1 456 0
 401              		.cfi_startproc
 402              	.LVL18:
 403 0000 054B     		ldr	r3, .L41
 404 0002 00B5     		push	{lr}
 405              	.LCFI3:
 406              		.cfi_def_cfa_offset 4
 407              		.cfi_offset 14, -4
 408 0004 0122     		mov	r2, #1
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CSR |= RCC_CSR_LSION;
 409              		.loc 1 462 0
 410 0006 596A     		ldr	r1, [r3, #36]
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 411              		.loc 1 460 0
 412 0008 0028     		cmp	r0, #0
 413 000a 01D0     		beq	.L38
 414              		.loc 1 462 0
 415 000c 0A43     		orr	r2, r1
 416 000e 01E0     		b	.L40
 417              	.L38:
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CSR &= ~RCC_CSR_LSION;
 418              		.loc 1 466 0
 419 0010 9143     		bic	r1, r2
 420 0012 0A1C     		mov	r2, r1
 421              	.L40:
 422 0014 5A62     		str	r2, [r3, #36]
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 423              		.loc 1 468 0
 424              		@ sp needed for prologue
 425 0016 00BD     		pop	{pc}
 426              	.L42:
 427              		.align	2
 428              	.L41:
 429 0018 00100240 		.word	1073876992
 430              		.cfi_endproc
 431              	.LFE43:
 433              		.section	.text.RCC_PLLConfig,"ax",%progbits
 434              		.align	1
 435              		.global	RCC_PLLConfig
 436              		.code	16
 437              		.thumb_func
 439              	RCC_PLLConfig:
 440              	.LFB44:
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock selected as PLL clock source
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI48 HSI48 oscillator clock selected as PLL clock source, applic
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI clock selected as PLL clock entry, applicable only for S
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The minimum input clock frequency for PLL is 2 MHz (when using HSE as
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLL source).
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor, which drive the PLLVCO clock
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be RCC_PLLMul_x where x:[2,16] 
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 441              		.loc 1 489 0
 442              		.cfi_startproc
 443              	.LVL19:
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PLL Source [16] and Multiplier [21:18] bits */
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 444              		.loc 1 495 0
 445 0000 054B     		ldr	r3, .L44
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 446              		.loc 1 489 0
 447 0002 10B5     		push	{r4, lr}
 448              	.LCFI4:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 4, -8
 451              		.cfi_offset 14, -4
 452              		.loc 1 495 0
 453 0004 054A     		ldr	r2, .L44+4
 454 0006 5C68     		ldr	r4, [r3, #4]
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the PLL Source and Multiplier */
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 455              		.loc 1 499 0
 456              		@ sp needed for prologue
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 457              		.loc 1 495 0
 458 0008 2240     		and	r2, r4
 459 000a 5A60     		str	r2, [r3, #4]
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 460              		.loc 1 498 0
 461 000c 5A68     		ldr	r2, [r3, #4]
 462 000e 1043     		orr	r0, r2
 463              	.LVL20:
 464 0010 0843     		orr	r0, r1
 465 0012 5860     		str	r0, [r3, #4]
 466              		.loc 1 499 0
 467 0014 10BD     		pop	{r4, pc}
 468              	.L45:
 469 0016 C046     		.align	2
 470              	.L44:
 471 0018 00100240 		.word	1073876992
 472 001c FF7FC2FF 		.word	-4030465
 473              		.cfi_endproc
 474              	.LFE44:
 476              		.section	.text.RCC_PLLCmd,"ax",%progbits
 477              		.align	1
 478              		.global	RCC_PLLCmd
 479              		.code	16
 480              		.thumb_func
 482              	RCC_PLLCmd:
 483              	.LFB45:
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the PLL.
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the PLL, the application software should wait on 
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used as system clock source.
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock source
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The PLL is disabled by hardware when entering STOP and STANDBY modes.
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the PLL.
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 484              		.loc 1 513 0
 485              		.cfi_startproc
 486              	.LVL21:
 487 0000 064B     		ldr	r3, .L50
 488 0002 00B5     		push	{lr}
 489              	.LCFI5:
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 14, -4
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_PLLON;
 492              		.loc 1 519 0
 493 0004 1968     		ldr	r1, [r3]
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 494              		.loc 1 517 0
 495 0006 0028     		cmp	r0, #0
 496 0008 03D0     		beq	.L47
 497              		.loc 1 519 0
 498 000a 8022     		mov	r2, #128
 499 000c 5204     		lsl	r2, r2, #17
 500 000e 0A43     		orr	r2, r1
 501 0010 01E0     		b	.L49
 502              	.L47:
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_PLLON;
 503              		.loc 1 523 0
 504 0012 034A     		ldr	r2, .L50+4
 505 0014 0A40     		and	r2, r1
 506              	.L49:
 507 0016 1A60     		str	r2, [r3]
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 508              		.loc 1 525 0
 509              		@ sp needed for prologue
 510 0018 00BD     		pop	{pc}
 511              	.L51:
 512 001a C046     		.align	2
 513              	.L50:
 514 001c 00100240 		.word	1073876992
 515 0020 FFFFFFFE 		.word	-16777217
 516              		.cfi_endproc
 517              	.LFE45:
 519              		.section	.text.RCC_HSI48Cmd,"ax",%progbits
 520              		.align	1
 521              		.global	RCC_HSI48Cmd
 522              		.code	16
 523              		.thumb_func
 525              	RCC_HSI48Cmd:
 526              	.LFB46:
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for USB (HSI48).
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This function is only applicable for STM32F072 devices.  
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSI48, the application software should wait on 
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSI48RDY flag to be set indicating that HSI48 clock is stable and can
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the USB.
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI48 is stopped by hardware when entering STOP and STANDBY modes.
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI48.
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI48Cmd(FunctionalState NewState)
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 527              		.loc 1 539 0
 528              		.cfi_startproc
 529              	.LVL22:
 530 0000 064B     		ldr	r3, .L56
 531 0002 00B5     		push	{lr}
 532              	.LCFI6:
 533              		.cfi_def_cfa_offset 4
 534              		.cfi_offset 14, -4
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI48ON;
 535              		.loc 1 545 0
 536 0004 596B     		ldr	r1, [r3, #52]
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 537              		.loc 1 543 0
 538 0006 0028     		cmp	r0, #0
 539 0008 03D0     		beq	.L53
 540              		.loc 1 545 0
 541 000a 8022     		mov	r2, #128
 542 000c 5202     		lsl	r2, r2, #9
 543 000e 0A43     		orr	r2, r1
 544 0010 01E0     		b	.L55
 545              	.L53:
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI48ON;
 546              		.loc 1 549 0
 547 0012 034A     		ldr	r2, .L56+4
 548 0014 0A40     		and	r2, r1
 549              	.L55:
 550 0016 5A63     		str	r2, [r3, #52]
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 551              		.loc 1 551 0
 552              		@ sp needed for prologue
 553 0018 00BD     		pop	{pc}
 554              	.L57:
 555 001a C046     		.align	2
 556              	.L56:
 557 001c 00100240 		.word	1073876992
 558 0020 FFFFFEFF 		.word	-65537
 559              		.cfi_endproc
 560              	.LFE46:
 562              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 563              		.align	1
 564              		.global	RCC_PREDIV1Config
 565              		.code	16
 566              		.thumb_func
 568              	RCC_PREDIV1Config:
 569              	.LFB47:
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 570              		.loc 1 561 0
 571              		.cfi_startproc
 572              	.LVL23:
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR2;
 573              		.loc 1 567 0
 574 0000 034B     		ldr	r3, .L59
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PREDIV1[3:0] bits */
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR2_PREDIV1);
 575              		.loc 1 569 0
 576 0002 0F21     		mov	r1, #15
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR2;
 577              		.loc 1 567 0
 578 0004 DA6A     		ldr	r2, [r3, #44]
 579              	.LVL24:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the PREDIV1 division factor */
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_PREDIV1_Div;
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 = tmpreg;
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 580              		.loc 1 574 0
 581              		@ sp needed for prologue
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR2_PREDIV1);
 582              		.loc 1 569 0
 583 0006 8A43     		bic	r2, r1
 584              	.LVL25:
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_PREDIV1_Div;
 585              		.loc 1 571 0
 586 0008 1043     		orr	r0, r2
 587              	.LVL26:
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 = tmpreg;
 588              		.loc 1 573 0
 589 000a D862     		str	r0, [r3, #44]
 590              		.loc 1 574 0
 591 000c 7047     		bx	lr
 592              	.L60:
 593 000e C046     		.align	2
 594              	.L59:
 595 0010 00100240 		.word	1073876992
 596              		.cfi_endproc
 597              	.LFE47:
 599              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 600              		.align	1
 601              		.global	RCC_ClockSecuritySystemCmd
 602              		.code	16
 603              		.thumb_func
 605              	RCC_ClockSecuritySystemCmd:
 606              	.LFB48:
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 607              		.loc 1 588 0
 608              		.cfi_startproc
 609              	.LVL27:
 610 0000 064B     		ldr	r3, .L65
 611 0002 00B5     		push	{lr}
 612              	.LCFI7:
 613              		.cfi_def_cfa_offset 4
 614              		.cfi_offset 14, -4
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_CSSON;
 615              		.loc 1 594 0
 616 0004 1968     		ldr	r1, [r3]
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 617              		.loc 1 592 0
 618 0006 0028     		cmp	r0, #0
 619 0008 03D0     		beq	.L62
 620              		.loc 1 594 0
 621 000a 8022     		mov	r2, #128
 622 000c 1203     		lsl	r2, r2, #12
 623 000e 0A43     		orr	r2, r1
 624 0010 01E0     		b	.L64
 625              	.L62:
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_CSSON;
 626              		.loc 1 598 0
 627 0012 034A     		ldr	r2, .L65+4
 628 0014 0A40     		and	r2, r1
 629              	.L64:
 630 0016 1A60     		str	r2, [r3]
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 631              		.loc 1 600 0
 632              		@ sp needed for prologue
 633 0018 00BD     		pop	{pc}
 634              	.L66:
 635 001a C046     		.align	2
 636              	.L65:
 637 001c 00100240 		.word	1073876992
 638 0020 FFFFF7FF 		.word	-524289
 639              		.cfi_endproc
 640              	.LFE48:
 642              		.section	.text.RCC_MCOConfig,"ax",%progbits
 643              		.align	1
 644              		.global	RCC_MCOConfig
 645              		.code	16
 646              		.thumb_func
 648              	RCC_MCOConfig:
 649              	.LFB49:
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #ifdef STM32F051
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8).
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource)
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Select MCO clock source and prescaler */
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #else
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8) and the corresponding
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         prescsaler.
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK: PLL clock selected.
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI48: HSI48 clock selected.
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOPrescaler: specifies the prescaler on MCO pin.
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_1: MCO clock is divided by 1.
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_2: MCO clock is divided by 2.
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_4: MCO clock is divided by 4.
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_8: MCO clock is divided by 8.
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_16: MCO clock is divided by 16.
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_32: MCO clock is divided by 32.
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_64: MCO clock is divided by 64.
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_128: MCO clock is divided by 128.    
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource, uint32_t RCC_MCOPrescaler)
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 650              		.loc 1 657 0
 651              		.cfi_startproc
 652              	.LVL28:
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_PRESCALER(RCC_MCOPrescaler));
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get CFGR value */  
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 653              		.loc 1 665 0
 654 0000 044B     		ldr	r3, .L68
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear MCOPRE[2:0] bits */
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the RCC_MCOSource and RCC_MCOPrescaler */
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 655              		.loc 1 672 0
 656              		@ sp needed for prologue
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 657              		.loc 1 665 0
 658 0002 5A68     		ldr	r2, [r3, #4]
 659              	.LVL29:
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 660              		.loc 1 667 0
 661 0004 1202     		lsl	r2, r2, #8
 662              	.LVL30:
 663 0006 120A     		lsr	r2, r2, #8
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 664              		.loc 1 669 0
 665 0008 1143     		orr	r1, r2
 666              	.LVL31:
 667 000a 0206     		lsl	r2, r0, #24
 668 000c 081C     		mov	r0, r1
 669              	.LVL32:
 670 000e 1043     		orr	r0, r2
 671              	.LVL33:
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 672              		.loc 1 671 0
 673 0010 5860     		str	r0, [r3, #4]
 674              		.loc 1 672 0
 675 0012 7047     		bx	lr
 676              	.L69:
 677              		.align	2
 678              	.L68:
 679 0014 00100240 		.word	1073876992
 680              		.cfi_endproc
 681              	.LFE49:
 683              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 684              		.align	1
 685              		.global	RCC_SYSCLKConfig
 686              		.code	16
 687              		.thumb_func
 689              	RCC_SYSCLKConfig:
 690              	.LFB50:
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #endif /* STM32F072 */
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****      ##### System, AHB and APB busses clocks configuration functions #####
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the System, AHB and 
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          APB busses clocks.
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              HSE and PLL.
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable prescaler
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA and GPIO).
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              and APB (PCLK) clocks are derived from AHB clock through 
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              configurable prescalers and used to clock the peripherals mapped on these busses.
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The ADC clock which is derived from HSI14 or APB (APB divided by a
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   programmable prescaler: 2 or 4).
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The CEC clock which is derived from LSE or HSI divided by 244.
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The I2C clock which is derived from HSI or system clock (SYSCLK).
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The USART clock which is derived from HSI, system clock (SYSCLK), APB or LSE.
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The RTC/LCD clock which is derived from the LSE, LSI or 2 MHz HSE_RTC (HSE
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   divided by a programmable prescaler).
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   The System clock (SYSCLK) frequency must be higher or equal to the RTC/LCD
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   clock frequency.
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) IWDG clock which is always the LSI clock.
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****        
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The maximum frequency of the SYSCLK, HCLK and PCLK is 48 MHz.
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              Depending on the maximum frequency, the FLASH wait states (WS) should be 
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              adapted accordingly:
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         +--------------------------------------------- +
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |  Wait states  |   HCLK clock frequency (MHz) |
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |---------------|------------------------------|
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |0WS(1CPU cycle)|       0 < HCLK <= 24         |
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |---------------|------------------------------|
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |1WS(2CPU cycle)|       24 < HCLK <= 48        |
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         +----------------------------------------------+
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and 
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              prefetch is disabled.
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] It is recommended to use the following software sequences to tune the number
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          of wait states needed to access the Flash memory with the CPU frequency (HCLK).
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (+) Increasing the CPU frequency
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program the Flash Prefetch buffer, using "FLASH_PrefetchBufferCmd(ENABLE)" 
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               function
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer activation is taken into account by 
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               reading FLASH_ACR using the FLASH_GetPrefetchBufferStatus() function
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program Flash WS to 1, using "FLASH_SetLatency(FLASH_Latency_1)" function
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function 
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (+) Decreasing the CPU frequency
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program the new number of WS, using "FLASH_SetLatency()" function
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Disable the Flash Prefetch buffer using "FLASH_PrefetchBufferCmd(DISABLE)" 
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               function
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer deactivation is taken into account by reading FLASH_
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               using the FLASH_GetPrefetchBufferStatus() function.
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         occur when the clock source will be ready. 
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         currently used as system clock source.  
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock source 
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI48:  HSI48 selected as system clock source, applicable only
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 691              		.loc 1 773 0
 692              		.cfi_startproc
 693              	.LVL34:
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 694              		.loc 1 779 0
 695 0000 034B     		ldr	r3, .L71
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear SW[1:0] bits */
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 696              		.loc 1 782 0
 697 0002 0321     		mov	r1, #3
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 698              		.loc 1 779 0
 699 0004 5A68     		ldr	r2, [r3, #4]
 700              	.LVL35:
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 701              		.loc 1 789 0
 702              		@ sp needed for prologue
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 703              		.loc 1 782 0
 704 0006 8A43     		bic	r2, r1
 705              	.LVL36:
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 706              		.loc 1 785 0
 707 0008 1043     		orr	r0, r2
 708              	.LVL37:
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 709              		.loc 1 788 0
 710 000a 5860     		str	r0, [r3, #4]
 711              		.loc 1 789 0
 712 000c 7047     		bx	lr
 713              	.L72:
 714 000e C046     		.align	2
 715              	.L71:
 716 0010 00100240 		.word	1073876992
 717              		.cfi_endproc
 718              	.LFE50:
 720              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 721              		.align	1
 722              		.global	RCC_GetSYSCLKSource
 723              		.code	16
 724              		.thumb_func
 726              	RCC_GetSYSCLKSource:
 727              	.LFB51:
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one 
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the following values:
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x00: HSI used as system clock
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x04: HSE used as system clock  
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x08: PLL used as system clock
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x0C: HSI48 used as system clock, applicable only for STM32F072 devices  
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 728              		.loc 1 802 0
 729              		.cfi_startproc
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 730              		.loc 1 803 0
 731 0000 024B     		ldr	r3, .L74
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 732              		.loc 1 804 0
 733              		@ sp needed for prologue
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 734              		.loc 1 803 0
 735 0002 5868     		ldr	r0, [r3, #4]
 736 0004 0C23     		mov	r3, #12
 737 0006 1840     		and	r0, r3
 738              		.loc 1 804 0
 739 0008 7047     		bx	lr
 740              	.L75:
 741 000a C046     		.align	2
 742              	.L74:
 743 000c 00100240 		.word	1073876992
 744              		.cfi_endproc
 745              	.LFE51:
 747              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 748              		.align	1
 749              		.global	RCC_HCLKConfig
 750              		.code	16
 751              		.thumb_func
 753              	RCC_HCLKConfig:
 754              	.LFB52:
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the system clock (SYSCLK).
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1:   AHB clock = SYSCLK
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2:   AHB clock = SYSCLK/2
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4:   AHB clock = SYSCLK/4
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8:   AHB clock = SYSCLK/8
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16:  AHB clock = SYSCLK/16
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64:  AHB clock = SYSCLK/64
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 755              		.loc 1 823 0
 756              		.cfi_startproc
 757              	.LVL38:
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 758              		.loc 1 829 0
 759 0000 034B     		ldr	r3, .L77
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 760              		.loc 1 832 0
 761 0002 F021     		mov	r1, #240
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 762              		.loc 1 829 0
 763 0004 5A68     		ldr	r2, [r3, #4]
 764              	.LVL39:
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 765              		.loc 1 839 0
 766              		@ sp needed for prologue
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 767              		.loc 1 832 0
 768 0006 8A43     		bic	r2, r1
 769              	.LVL40:
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 770              		.loc 1 835 0
 771 0008 1043     		orr	r0, r2
 772              	.LVL41:
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 773              		.loc 1 838 0
 774 000a 5860     		str	r0, [r3, #4]
 775              		.loc 1 839 0
 776 000c 7047     		bx	lr
 777              	.L78:
 778 000e C046     		.align	2
 779              	.L77:
 780 0010 00100240 		.word	1073876992
 781              		.cfi_endproc
 782              	.LFE52:
 784              		.section	.text.RCC_PCLKConfig,"ax",%progbits
 785              		.align	1
 786              		.global	RCC_PCLKConfig
 787              		.code	16
 788              		.thumb_func
 790              	RCC_PCLKConfig:
 791              	.LFB53:
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the APB clock (PCLK).
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_HCLK: defines the APB clock divider. This clock is derived from 
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the AHB clock (HCLK).
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div1: APB clock = HCLK
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div2: APB clock = HCLK/2
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div4: APB clock = HCLK/4
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div8: APB clock = HCLK/8
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB clock = HCLK/16
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PCLKConfig(uint32_t RCC_HCLK)
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 792              		.loc 1 854 0
 793              		.cfi_startproc
 794              	.LVL42:
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 795              		.loc 1 860 0
 796 0000 034B     		ldr	r3, .L80
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PPRE[2:0] bits */
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE;
 797              		.loc 1 863 0
 798 0002 044A     		ldr	r2, .L80+4
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 799              		.loc 1 860 0
 800 0004 5968     		ldr	r1, [r3, #4]
 801              	.LVL43:
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set PPRE[2:0] bits according to RCC_HCLK value */
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_HCLK;
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 802              		.loc 1 870 0
 803              		@ sp needed for prologue
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE;
 804              		.loc 1 863 0
 805 0006 0A40     		and	r2, r1
 806              	.LVL44:
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_HCLK;
 807              		.loc 1 866 0
 808 0008 1043     		orr	r0, r2
 809              	.LVL45:
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 810              		.loc 1 869 0
 811 000a 5860     		str	r0, [r3, #4]
 812              		.loc 1 870 0
 813 000c 7047     		bx	lr
 814              	.L81:
 815 000e C046     		.align	2
 816              	.L80:
 817 0010 00100240 		.word	1073876992
 818 0014 FFF8FFFF 		.word	-1793
 819              		.cfi_endproc
 820              	.LFE53:
 822              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 823              		.align	1
 824              		.global	RCC_ADCCLKConfig
 825              		.code	16
 826              		.thumb_func
 828              	RCC_ADCCLKConfig:
 829              	.LFB54:
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function is obsolete.
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         For proper ADC clock selection, refer to ADC_ClockModeConfig() in the ADC driver
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_ADCCLK: defines the ADC clock source. This clock is derived 
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI14 or APB clock (PCLK).
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_HSI14: ADC clock = HSI14 (14MHz)
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div2: ADC clock = PCLK/2
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div4: ADC clock = PCLK/4  
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 830              		.loc 1 885 0
 831              		.cfi_startproc
 832              	.LVL46:
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear ADCPRE bit */
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 833              		.loc 1 890 0
 834 0000 084B     		ldr	r3, .L83
 835 0002 094A     		ldr	r2, .L83+4
 836 0004 5968     		ldr	r1, [r3, #4]
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set ADCPRE bits according to RCC_PCLK value */
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear ADCSW bit */
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set ADCSW bits according to RCC_ADCCLK value */
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 837              		.loc 1 898 0
 838              		@ sp needed for prologue
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 839              		.loc 1 890 0
 840 0006 0A40     		and	r2, r1
 841 0008 5A60     		str	r2, [r3, #4]
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 842              		.loc 1 892 0
 843 000a 5A68     		ldr	r2, [r3, #4]
 844 000c 81B2     		uxth	r1, r0
 845 000e 0A43     		orr	r2, r1
 846 0010 5A60     		str	r2, [r3, #4]
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 847              		.loc 1 895 0
 848 0012 196B     		ldr	r1, [r3, #48]
 849 0014 054A     		ldr	r2, .L83+8
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 850              		.loc 1 897 0
 851 0016 000C     		lsr	r0, r0, #16
 852              	.LVL47:
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 853              		.loc 1 895 0
 854 0018 0A40     		and	r2, r1
 855 001a 1A63     		str	r2, [r3, #48]
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 856              		.loc 1 897 0
 857 001c 1A6B     		ldr	r2, [r3, #48]
 858 001e 1043     		orr	r0, r2
 859 0020 1863     		str	r0, [r3, #48]
 860              		.loc 1 898 0
 861 0022 7047     		bx	lr
 862              	.L84:
 863              		.align	2
 864              	.L83:
 865 0024 00100240 		.word	1073876992
 866 0028 FFBFFFFF 		.word	-16385
 867 002c FFFEFFFF 		.word	-257
 868              		.cfi_endproc
 869              	.LFE54:
 871              		.section	.text.RCC_CECCLKConfig,"ax",%progbits
 872              		.align	1
 873              		.global	RCC_CECCLKConfig
 874              		.code	16
 875              		.thumb_func
 877              	RCC_CECCLKConfig:
 878              	.LFB55:
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the CEC clock (CECCLK).
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_CECCLK: defines the CEC clock source. This clock is derived 
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or LSE clock.
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_CECCLK_HSI_Div244: CEC clock = HSI/244 (32768Hz)
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_CECCLK_LSE: CEC clock = LSE
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_CECCLKConfig(uint32_t RCC_CECCLK)
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 879              		.loc 1 910 0
 880              		.cfi_startproc
 881              	.LVL48:
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_CECCLK(RCC_CECCLK));
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear CECSW bit */
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 882              		.loc 1 915 0
 883 0000 044B     		ldr	r3, .L86
 884 0002 4021     		mov	r1, #64
 885 0004 1A6B     		ldr	r2, [r3, #48]
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set CECSW bits according to RCC_CECCLK value */
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_CECCLK;
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 886              		.loc 1 918 0
 887              		@ sp needed for prologue
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 888              		.loc 1 915 0
 889 0006 8A43     		bic	r2, r1
 890 0008 1A63     		str	r2, [r3, #48]
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_CECCLK;
 891              		.loc 1 917 0
 892 000a 1A6B     		ldr	r2, [r3, #48]
 893 000c 1043     		orr	r0, r2
 894              	.LVL49:
 895 000e 1863     		str	r0, [r3, #48]
 896              		.loc 1 918 0
 897 0010 7047     		bx	lr
 898              	.L87:
 899 0012 C046     		.align	2
 900              	.L86:
 901 0014 00100240 		.word	1073876992
 902              		.cfi_endproc
 903              	.LFE55:
 905              		.section	.text.RCC_I2CCLKConfig,"ax",%progbits
 906              		.align	1
 907              		.global	RCC_I2CCLKConfig
 908              		.code	16
 909              		.thumb_func
 911              	RCC_I2CCLKConfig:
 912              	.LFB56:
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the I2C1 clock (I2C1CLK).
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_I2CCLK: defines the I2C1 clock source. This clock is derived 
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or System clock.
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_HSI: I2C1 clock = HSI
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_SYSCLK: I2C1 clock = System Clock
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 913              		.loc 1 930 0
 914              		.cfi_startproc
 915              	.LVL50:
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear I2CSW bit */
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 916              		.loc 1 935 0
 917 0000 044B     		ldr	r3, .L89
 918 0002 1021     		mov	r1, #16
 919 0004 1A6B     		ldr	r2, [r3, #48]
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set I2CSW bits according to RCC_I2CCLK value */
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_I2CCLK;
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 920              		.loc 1 938 0
 921              		@ sp needed for prologue
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 922              		.loc 1 935 0
 923 0006 8A43     		bic	r2, r1
 924 0008 1A63     		str	r2, [r3, #48]
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_I2CCLK;
 925              		.loc 1 937 0
 926 000a 1A6B     		ldr	r2, [r3, #48]
 927 000c 1043     		orr	r0, r2
 928              	.LVL51:
 929 000e 1863     		str	r0, [r3, #48]
 930              		.loc 1 938 0
 931 0010 7047     		bx	lr
 932              	.L90:
 933 0012 C046     		.align	2
 934              	.L89:
 935 0014 00100240 		.word	1073876992
 936              		.cfi_endproc
 937              	.LFE56:
 939              		.section	.text.RCC_USARTCLKConfig,"ax",%progbits
 940              		.align	1
 941              		.global	RCC_USARTCLKConfig
 942              		.code	16
 943              		.thumb_func
 945              	RCC_USARTCLKConfig:
 946              	.LFB57:
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the USART1 clock (USART1CLK).
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_USARTCLK: defines the USART clock source. This clock is derived 
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or System clock.
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_PCLK: USART1 clock = APB Clock (PCLK)
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_SYSCLK: USART1 clock = System Clock
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_LSE: USART1 clock = LSE Clock
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_HSI: USART1 clock = HSI Clock
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_PCLK: USART2 clock = APB Clock (PCLK), applicable only for STM32
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_SYSCLK: USART2 clock = System Clock, applicable only for STM32F0
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_LSE: USART2 clock = LSE Clock, applicable only for STM32F072 and
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_HSI: USART2 clock = HSI Clock, applicable only for STM32F072 and
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_PCLK: USART3 clock = APB Clock (PCLK), applicable only for STM32
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_SYSCLK: USART3 clock = System Clock, applicable only for STM32F0
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_LSE: USART3 clock = LSE Clock, applicable only for STM32F091 dev
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_HSI: USART3 clock = HSI Clock, applicable only for STM32F091 dev
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 947              		.loc 1 960 0
 948              		.cfi_startproc
 949              	.LVL52:
 950 0000 00B5     		push	{lr}
 951              	.LCFI8:
 952              		.cfi_def_cfa_offset 4
 953              		.cfi_offset 14, -4
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0;
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get USART index */
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = (RCC_USARTCLK >> 28);
 954              		.loc 1 967 0
 955 0002 020F     		lsr	r2, r0, #28
 956              	.LVL53:
 957 0004 094B     		ldr	r3, .L97
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear USARTSW[1:0] bit */
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (tmp == (uint32_t)0x00000001)
 958              		.loc 1 970 0
 959 0006 012A     		cmp	r2, #1
 960 0008 03D1     		bne	.L92
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Clear USART1SW[1:0] bit */  
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 961              		.loc 1 973 0
 962 000a 1A6B     		ldr	r2, [r3, #48]
 963              	.LVL54:
 964 000c 0321     		mov	r1, #3
 965 000e 8A43     		bic	r2, r1
 966 0010 06E0     		b	.L95
 967              	.LVL55:
 968              	.L92:
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == (uint32_t)0x00000002)
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Clear USART2SW[1:0] bit */
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 969              		.loc 1 978 0
 970 0012 196B     		ldr	r1, [r3, #48]
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == (uint32_t)0x00000002)
 971              		.loc 1 975 0
 972 0014 022A     		cmp	r2, #2
 973 0016 01D1     		bne	.L94
 974              		.loc 1 978 0
 975 0018 054A     		ldr	r2, .L97+4
 976              	.LVL56:
 977 001a 00E0     		b	.L96
 978              	.LVL57:
 979              	.L94:
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else 
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Clear USART3SW[1:0] bit */
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 980              		.loc 1 983 0
 981 001c 054A     		ldr	r2, .L97+8
 982              	.LVL58:
 983              	.L96:
 984 001e 0A40     		and	r2, r1
 985              	.L95:
 986 0020 1A63     		str	r2, [r3, #48]
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set USARTxSW bits according to RCC_USARTCLK value */
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USARTCLK;
 987              		.loc 1 987 0
 988 0022 1A6B     		ldr	r2, [r3, #48]
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 989              		.loc 1 988 0
 990              		@ sp needed for prologue
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USARTCLK;
 991              		.loc 1 987 0
 992 0024 1043     		orr	r0, r2
 993              	.LVL59:
 994 0026 1863     		str	r0, [r3, #48]
 995              		.loc 1 988 0
 996 0028 00BD     		pop	{pc}
 997              	.L98:
 998 002a C046     		.align	2
 999              	.L97:
 1000 002c 00100240 		.word	1073876992
 1001 0030 FFFFFCFF 		.word	-196609
 1002 0034 FFFFF3FF 		.word	-786433
 1003              		.cfi_endproc
 1004              	.LFE57:
 1006              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 1007              		.align	1
 1008              		.global	RCC_USBCLKConfig
 1009              		.code	16
 1010              		.thumb_func
 1012              	RCC_USBCLKConfig:
 1013              	.LFB58:
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This function is only applicable for STM32F072 devices.  
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_USBCLK: defines the USB clock source. This clock is derived 
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI48 or system clock.
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USBCLK_HSI48: USB clock = HSI48
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USBCLK_PLLCLK: USB clock = PLL clock
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 1014              		.loc 1 1001 0
 1015              		.cfi_startproc
 1016              	.LVL60:
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_USBCLK(RCC_USBCLK));
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear USBSW bit */
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 1017              		.loc 1 1006 0
 1018 0000 044B     		ldr	r3, .L100
 1019 0002 8021     		mov	r1, #128
 1020 0004 1A6B     		ldr	r2, [r3, #48]
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set USBSW bits according to RCC_USBCLK value */
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USBCLK;
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1021              		.loc 1 1009 0
 1022              		@ sp needed for prologue
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 1023              		.loc 1 1006 0
 1024 0006 8A43     		bic	r2, r1
 1025 0008 1A63     		str	r2, [r3, #48]
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USBCLK;
 1026              		.loc 1 1008 0
 1027 000a 1A6B     		ldr	r2, [r3, #48]
 1028 000c 1043     		orr	r0, r2
 1029              	.LVL61:
 1030 000e 1863     		str	r0, [r3, #48]
 1031              		.loc 1 1009 0
 1032 0010 7047     		bx	lr
 1033              	.L101:
 1034 0012 C046     		.align	2
 1035              	.L100:
 1036 0014 00100240 		.word	1073876992
 1037              		.cfi_endproc
 1038              	.LFE58:
 1040              		.global	__aeabi_uidiv
 1041              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1042              		.align	1
 1043              		.global	RCC_GetClocksFreq
 1044              		.code	16
 1045              		.thumb_func
 1047              	RCC_GetClocksFreq:
 1048              	.LFB59:
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Returns the frequencies of the System, AHB and APB busses clocks.
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note    The frequency returned by this function is not the real frequency
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           in the chip. It is calculated based on the predefined constant and
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           the source selected by RCC_SYSCLKConfig():
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                              
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns constant HSI_VALUE(*)
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                              
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns constant HSE_VALUE(**)
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                          
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns constant HSE_VALUE(**) 
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *               
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI48, function returns constant HSI48_VALUE(***) 
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *               in voltage and temperature, refer to RCC_AdjustHSICalibrationValue().   
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *    
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                return wrong result.
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     (***) HSI48_VALUE is a constant defined in stm32f0xx.h file (default value
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                 48 MHz) but the real value may vary depending on the variations
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                 in voltage and temperature.
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                   
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         value for HSE crystal.   
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold 
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the clocks frequencies. 
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   Each time SYSCLK, HCLK and/or PCLK clock changes, this function
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         configuration based on this function will be incorrect.
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *    
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1049              		.loc 1 1054 0
 1050              		.cfi_startproc
 1051              	.LVL62:
 1052 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1053              	.LCFI9:
 1054              		.cfi_def_cfa_offset 24
 1055              		.cfi_offset 3, -24
 1056              		.cfi_offset 4, -20
 1057              		.cfi_offset 5, -16
 1058              		.cfi_offset 6, -12
 1059              		.cfi_offset 7, -8
 1060              		.cfi_offset 14, -4
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1061              		.loc 1 1058 0
 1062 0002 5B4D     		ldr	r5, .L140
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1063              		.loc 1 1054 0
 1064 0004 041C     		mov	r4, r0
 1065              		.loc 1 1058 0
 1066 0006 6868     		ldr	r0, [r5, #4]
 1067              	.LVL63:
 1068 0008 0C23     		mov	r3, #12
 1069 000a 1840     		and	r0, r3
 1070              	.LVL64:
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   switch (tmp)
 1071              		.loc 1 1060 0
 1072 000c FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 1073              	.L108:
 1074 0010 1F       		.byte	(.L103-.L108)/2
 1075 0011 1F       		.byte	(.L103-.L108)/2
 1076 0012 1F       		.byte	(.L103-.L108)/2
 1077 0013 1F       		.byte	(.L103-.L108)/2
 1078 0014 1F       		.byte	(.L103-.L108)/2
 1079 0015 1F       		.byte	(.L103-.L108)/2
 1080 0016 1F       		.byte	(.L103-.L108)/2
 1081 0017 1F       		.byte	(.L103-.L108)/2
 1082 0018 07       		.byte	(.L106-.L108)/2
 1083 0019 1F       		.byte	(.L103-.L108)/2
 1084 001a 1F       		.byte	(.L103-.L108)/2
 1085 001b 1F       		.byte	(.L103-.L108)/2
 1086 001c 1D       		.byte	(.L107-.L108)/2
 1087 001d 00       		.align	1
 1088              	.L106:
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x00:  /* HSI used as system clock */
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x04:  /* HSE used as system clock */
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x08:  /* PLL used as system clock */
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 1089              		.loc 1 1070 0
 1090 001e 6E68     		ldr	r6, [r5, #4]
 1091              	.LVL65:
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       if (pllsource == 0x00)
 1092              		.loc 1 1074 0
 1093 0020 C023     		mov	r3, #192
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 1094              		.loc 1 1070 0
 1095 0022 B602     		lsl	r6, r6, #10
 1096              	.LVL66:
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 1097              		.loc 1 1071 0
 1098 0024 6A68     		ldr	r2, [r5, #4]
 1099              	.LVL67:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1100              		.loc 1 1072 0
 1101 0026 360F     		lsr	r6, r6, #28
 1102              		.loc 1 1074 0
 1103 0028 5B02     		lsl	r3, r3, #9
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1104              		.loc 1 1072 0
 1105 002a 0236     		add	r6, r6, #2
 1106              	.LVL68:
 1107              		.loc 1 1074 0
 1108 002c 1A42     		tst	r2, r3
 1109 002e 01D1     		bne	.L110
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       {
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         pllclk = (HSI_VALUE >> 1) * pllmull;
 1110              		.loc 1 1077 0
 1111 0030 5048     		ldr	r0, .L140+4
 1112              	.LVL69:
 1113 0032 07E0     		b	.L133
 1114              	.LVL70:
 1115              	.L110:
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       }
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       else
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       {
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 1116              		.loc 1 1081 0
 1117 0034 4E4B     		ldr	r3, .L140
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 1118              		.loc 1 1083 0
 1119 0036 5048     		ldr	r0, .L140+8
 1120              	.LVL71:
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 1121              		.loc 1 1081 0
 1122 0038 D96A     		ldr	r1, [r3, #44]
 1123              	.LVL72:
 1124 003a 0F23     		mov	r3, #15
 1125 003c 1940     		and	r1, r3
 1126              	.LVL73:
 1127 003e 0131     		add	r1, r1, #1
 1128              	.LVL74:
 1129              		.loc 1 1083 0
 1130 0040 FFF7FEFF 		bl	__aeabi_uidiv
 1131              	.LVL75:
 1132              	.L133:
 1133 0044 7043     		mul	r0, r6
 1134              	.LVL76:
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       }
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllclk;      
 1135              		.loc 1 1085 0
 1136 0046 2060     		str	r0, [r4]
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
 1137              		.loc 1 1086 0
 1138 0048 04E0     		b	.L109
 1139              	.LVL77:
 1140              	.L107:
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x0C:  /* HSI48 used as system clock */
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 1141              		.loc 1 1088 0
 1142 004a 4C4B     		ldr	r3, .L140+12
 1143 004c 00E0     		b	.L134
 1144              	.L103:
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     default: /* HSI used as system clock */
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1145              		.loc 1 1091 0
 1146 004e 4A4B     		ldr	r3, .L140+8
 1147              	.L134:
 1148 0050 2360     		str	r3, [r4]
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 1149              		.loc 1 1055 0
 1150 0052 0020     		mov	r0, #0
 1151              	.LVL78:
 1152              	.L109:
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get HCLK prescaler */
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1153              		.loc 1 1096 0
 1154 0054 6B68     		ldr	r3, [r5, #4]
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 4;
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 1155              		.loc 1 1098 0
 1156 0056 4A4A     		ldr	r2, .L140+16
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1157              		.loc 1 1096 0
 1158 0058 1B06     		lsl	r3, r3, #24
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 4;
 1159              		.loc 1 1097 0
 1160 005a 1B0F     		lsr	r3, r3, #28
 1161              	.LVL79:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* HCLK clock frequency */
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1162              		.loc 1 1100 0
 1163 005c 2168     		ldr	r1, [r4]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 1164              		.loc 1 1098 0
 1165 005e D35C     		ldrb	r3, [r2, r3]
 1166              	.LVL80:
 1167              		.loc 1 1100 0
 1168 0060 0E1C     		mov	r6, r1
 1169 0062 DE40     		lsr	r6, r6, r3
 1170 0064 6660     		str	r6, [r4, #4]
 1171 0066 331C     		mov	r3, r6
 1172              	.LVL81:
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get PCLK prescaler */
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE;
 1173              		.loc 1 1103 0
 1174 0068 6E68     		ldr	r6, [r5, #4]
 1175 006a 7605     		lsl	r6, r6, #21
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 8;
 1176              		.loc 1 1104 0
 1177 006c 760F     		lsr	r6, r6, #29
 1178              	.LVL82:
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1179              		.loc 1 1105 0
 1180 006e 925D     		ldrb	r2, [r2, r6]
 1181              	.LVL83:
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* PCLK clock frequency */
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1182              		.loc 1 1107 0
 1183 0070 D340     		lsr	r3, r3, r2
 1184 0072 A360     		str	r3, [r4, #8]
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* ADCCLK clock frequency */
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 1185              		.loc 1 1110 0
 1186 0074 2A6B     		ldr	r2, [r5, #48]
 1187              	.LVL84:
 1188 0076 D605     		lsl	r6, r2, #23
 1189 0078 01D4     		bmi	.L112
 1190              	.LVL85:
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* ADC Clock is HSI14 Osc. */
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 1191              		.loc 1 1113 0
 1192 007a 424A     		ldr	r2, .L140+20
 1193 007c 06E0     		b	.L135
 1194              	.L112:
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 1195              		.loc 1 1117 0
 1196 007e 3C4A     		ldr	r2, .L140
 1197 0080 5268     		ldr	r2, [r2, #4]
 1198 0082 5604     		lsl	r6, r2, #17
 1199 0084 01D4     		bmi	.L114
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     {
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/2 */
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 1200              		.loc 1 1120 0
 1201 0086 5A08     		lsr	r2, r3, #1
 1202 0088 00E0     		b	.L135
 1203              	.L114:
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     }
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     else
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     {
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/4 */
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 1204              		.loc 1 1125 0
 1205 008a 9A08     		lsr	r2, r3, #2
 1206              	.L135:
 1207 008c E260     		str	r2, [r4, #12]
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     }
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* CECCLK clock frequency */
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 1208              		.loc 1 1131 0
 1209 008e 2A6B     		ldr	r2, [r5, #48]
 1210 0090 5606     		lsl	r6, r2, #25
 1211 0092 01D4     		bmi	.L115
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* CEC Clock is HSI/244 */
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 1212              		.loc 1 1134 0
 1213 0094 3C4A     		ldr	r2, .L140+24
 1214 0096 01E0     		b	.L136
 1215              	.L115:
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* CECC Clock is LSE Osc. */
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 1216              		.loc 1 1139 0
 1217 0098 8022     		mov	r2, #128
 1218 009a 1202     		lsl	r2, r2, #8
 1219              	.L136:
 1220 009c 2261     		str	r2, [r4, #16]
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* I2C1CLK clock frequency */
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 1221              		.loc 1 1143 0
 1222 009e 2A6B     		ldr	r2, [r5, #48]
 1223 00a0 D606     		lsl	r6, r2, #27
 1224 00a2 02D4     		bmi	.L117
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* I2C1 Clock is HSI Osc. */
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 1225              		.loc 1 1146 0
 1226 00a4 344A     		ldr	r2, .L140+8
 1227 00a6 6261     		str	r2, [r4, #20]
 1228 00a8 00E0     		b	.L118
 1229              	.L117:
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* I2C1 Clock is System Clock */
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1230              		.loc 1 1151 0
 1231 00aa 6161     		str	r1, [r4, #20]
 1232              	.L118:
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART1CLK clock frequency */
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 1233              		.loc 1 1155 0
 1234 00ac 2F6B     		ldr	r7, [r5, #48]
 1235 00ae 0322     		mov	r2, #3
 1236 00b0 2F4E     		ldr	r6, .L140
 1237 00b2 1742     		tst	r7, r2
 1238 00b4 01D1     		bne	.L119
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is PCLK */
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1239              		.loc 1 1158 0
 1240 00b6 A361     		str	r3, [r4, #24]
 1241 00b8 12E0     		b	.L120
 1242              	.L119:
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 1243              		.loc 1 1160 0
 1244 00ba 376B     		ldr	r7, [r6, #48]
 1245 00bc 1740     		and	r7, r2
 1246 00be 012F     		cmp	r7, #1
 1247 00c0 01D1     		bne	.L121
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is System Clock */
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1248              		.loc 1 1163 0
 1249 00c2 A161     		str	r1, [r4, #24]
 1250 00c4 0CE0     		b	.L120
 1251              	.L121:
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 1252              		.loc 1 1165 0
 1253 00c6 376B     		ldr	r7, [r6, #48]
 1254 00c8 1740     		and	r7, r2
 1255 00ca 022F     		cmp	r7, #2
 1256 00cc 02D1     		bne	.L122
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is LSE Osc. */
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 1257              		.loc 1 1168 0
 1258 00ce 8022     		mov	r2, #128
 1259 00d0 1202     		lsl	r2, r2, #8
 1260 00d2 04E0     		b	.L137
 1261              	.L122:
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 1262              		.loc 1 1170 0
 1263 00d4 366B     		ldr	r6, [r6, #48]
 1264 00d6 3240     		and	r2, r6
 1265 00d8 032A     		cmp	r2, #3
 1266 00da 01D1     		bne	.L120
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is HSI Osc. */
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 1267              		.loc 1 1173 0
 1268 00dc 264A     		ldr	r2, .L140+8
 1269              	.L137:
 1270 00de A261     		str	r2, [r4, #24]
 1271              	.L120:
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART2CLK clock frequency */
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 1272              		.loc 1 1177 0
 1273 00e0 C022     		mov	r2, #192
 1274 00e2 2F6B     		ldr	r7, [r5, #48]
 1275 00e4 9202     		lsl	r2, r2, #10
 1276 00e6 224E     		ldr	r6, .L140
 1277 00e8 1742     		tst	r7, r2
 1278 00ea 01D1     		bne	.L123
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is PCLK */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1279              		.loc 1 1180 0
 1280 00ec E361     		str	r3, [r4, #28]
 1281 00ee 18E0     		b	.L124
 1282              	.L123:
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 1283              		.loc 1 1182 0
 1284 00f0 376B     		ldr	r7, [r6, #48]
 1285 00f2 1740     		and	r7, r2
 1286 00f4 BC46     		mov	ip, r7
 1287 00f6 8027     		mov	r7, #128
 1288 00f8 7F02     		lsl	r7, r7, #9
 1289 00fa BC45     		cmp	ip, r7
 1290 00fc 01D1     		bne	.L125
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is System Clock */
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1291              		.loc 1 1185 0
 1292 00fe E161     		str	r1, [r4, #28]
 1293 0100 0FE0     		b	.L124
 1294              	.L125:
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 1295              		.loc 1 1187 0
 1296 0102 376B     		ldr	r7, [r6, #48]
 1297 0104 1740     		and	r7, r2
 1298 0106 BC46     		mov	ip, r7
 1299 0108 8027     		mov	r7, #128
 1300 010a BF02     		lsl	r7, r7, #10
 1301 010c BC45     		cmp	ip, r7
 1302 010e 02D1     		bne	.L126
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is LSE Osc. */
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 1303              		.loc 1 1190 0
 1304 0110 8022     		mov	r2, #128
 1305 0112 1202     		lsl	r2, r2, #8
 1306 0114 04E0     		b	.L138
 1307              	.L126:
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 1308              		.loc 1 1192 0
 1309 0116 366B     		ldr	r6, [r6, #48]
 1310 0118 1640     		and	r6, r2
 1311 011a 9642     		cmp	r6, r2
 1312 011c 01D1     		bne	.L124
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is HSI Osc. */
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 1313              		.loc 1 1195 0
 1314 011e 164A     		ldr	r2, .L140+8
 1315              	.L138:
 1316 0120 E261     		str	r2, [r4, #28]
 1317              	.L124:
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART3CLK clock frequency */
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 1318              		.loc 1 1199 0
 1319 0122 C022     		mov	r2, #192
 1320 0124 2F6B     		ldr	r7, [r5, #48]
 1321 0126 1203     		lsl	r2, r2, #12
 1322 0128 114E     		ldr	r6, .L140
 1323 012a 1742     		tst	r7, r2
 1324 012c 00D1     		bne	.L127
 1325 012e 15E0     		b	.L139
 1326              	.L127:
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is PCLK */
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 1327              		.loc 1 1204 0
 1328 0130 376B     		ldr	r7, [r6, #48]
 1329 0132 8023     		mov	r3, #128
 1330 0134 1740     		and	r7, r2
 1331 0136 DB02     		lsl	r3, r3, #11
 1332 0138 9F42     		cmp	r7, r3
 1333 013a 01D1     		bne	.L129
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is System Clock */
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1334              		.loc 1 1207 0
 1335 013c 2162     		str	r1, [r4, #32]
 1336 013e 0EE0     		b	.L128
 1337              	.L129:
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 1338              		.loc 1 1209 0
 1339 0140 316B     		ldr	r1, [r6, #48]
 1340 0142 8023     		mov	r3, #128
 1341 0144 1140     		and	r1, r2
 1342 0146 1B03     		lsl	r3, r3, #12
 1343 0148 9942     		cmp	r1, r3
 1344 014a 02D1     		bne	.L130
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is LSE Osc. */
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 1345              		.loc 1 1212 0
 1346 014c 8023     		mov	r3, #128
 1347 014e 1B02     		lsl	r3, r3, #8
 1348 0150 04E0     		b	.L139
 1349              	.L130:
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 1350              		.loc 1 1214 0
 1351 0152 336B     		ldr	r3, [r6, #48]
 1352 0154 1340     		and	r3, r2
 1353 0156 9342     		cmp	r3, r2
 1354 0158 01D1     		bne	.L128
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is HSI Osc. */
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 1355              		.loc 1 1217 0
 1356 015a 074B     		ldr	r3, .L140+8
 1357              	.L139:
 1358 015c 2362     		str	r3, [r4, #32]
 1359              	.L128:
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USBCLK clock frequency */
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 1360              		.loc 1 1221 0
 1361 015e 2B6B     		ldr	r3, [r5, #48]
 1362 0160 1A06     		lsl	r2, r3, #24
 1363 0162 02D4     		bmi	.L131
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USB Clock is HSI48 */
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 1364              		.loc 1 1224 0
 1365 0164 054B     		ldr	r3, .L140+12
 1366 0166 6362     		str	r3, [r4, #36]
 1367 0168 00E0     		b	.L102
 1368              	.L131:
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USB Clock is PLL clock */
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USBCLK_Frequency = pllclk;
 1369              		.loc 1 1229 0
 1370 016a 6062     		str	r0, [r4, #36]
 1371              	.L102:
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }   
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1372              		.loc 1 1231 0
 1373              		@ sp needed for prologue
 1374              	.LVL86:
 1375 016c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1376              	.L141:
 1377 016e C046     		.align	2
 1378              	.L140:
 1379 0170 00100240 		.word	1073876992
 1380 0174 00093D00 		.word	4000000
 1381 0178 00127A00 		.word	8000000
 1382 017c 006CDC02 		.word	48000000
 1383 0180 00000000 		.word	.LANCHOR0
 1384 0184 809FD500 		.word	14000000
 1385 0188 12800000 		.word	32786
 1386              		.cfi_endproc
 1387              	.LFE59:
 1389              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1390              		.align	1
 1391              		.global	RCC_RTCCLKConfig
 1392              		.code	16
 1393              		.thumb_func
 1395              	RCC_RTCCLKConfig:
 1396              	.LFB60:
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              #####Peripheral clocks configuration functions #####
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================  
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The RTC clock which is derived from the LSE, LSI or  HSE_Div32 (HSE
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              divided by 32).
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              except internal SRAM, Flash and SWD. Before to start using a peripheral you
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd(),
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) To reset the peripherals configuration (to the default state after device reset)
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              RCC_APB1PeriphResetCmd() functions.
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the RTC
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is reset using RCC_BackupResetCmd function, or by a Power On Reset (POR)
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Div32: HSE divided by 32 selected as RTC clock
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *       
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 2MHz (when using HSE as
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RTC clock source).
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                          
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1397              		.loc 1 1286 0
 1398              		.cfi_startproc
 1399              	.LVL87:
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Select the RTC clock source */
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1400              		.loc 1 1291 0
 1401 0000 024B     		ldr	r3, .L143
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1402              		.loc 1 1292 0
 1403              		@ sp needed for prologue
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1404              		.loc 1 1291 0
 1405 0002 1A6A     		ldr	r2, [r3, #32]
 1406 0004 1043     		orr	r0, r2
 1407              	.LVL88:
 1408 0006 1862     		str	r0, [r3, #32]
 1409              		.loc 1 1292 0
 1410 0008 7047     		bx	lr
 1411              	.L144:
 1412 000a C046     		.align	2
 1413              	.L143:
 1414 000c 00100240 		.word	1073876992
 1415              		.cfi_endproc
 1416              	.LFE60:
 1418              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1419              		.align	1
 1420              		.global	RCC_RTCCLKCmd
 1421              		.code	16
 1422              		.thumb_func
 1424              	RCC_RTCCLKCmd:
 1425              	.LFB61:
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the RTC clock.
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1426              		.loc 1 1303 0
 1427              		.cfi_startproc
 1428              	.LVL89:
 1429 0000 064B     		ldr	r3, .L149
 1430 0002 00B5     		push	{lr}
 1431              	.LCFI10:
 1432              		.cfi_def_cfa_offset 4
 1433              		.cfi_offset 14, -4
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_RTCEN;
 1434              		.loc 1 1309 0
 1435 0004 196A     		ldr	r1, [r3, #32]
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1436              		.loc 1 1307 0
 1437 0006 0028     		cmp	r0, #0
 1438 0008 03D0     		beq	.L146
 1439              		.loc 1 1309 0
 1440 000a 8022     		mov	r2, #128
 1441 000c 1202     		lsl	r2, r2, #8
 1442 000e 0A43     		orr	r2, r1
 1443 0010 01E0     		b	.L148
 1444              	.L146:
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_RTCEN;
 1445              		.loc 1 1313 0
 1446 0012 034A     		ldr	r2, .L149+4
 1447 0014 0A40     		and	r2, r1
 1448              	.L148:
 1449 0016 1A62     		str	r2, [r3, #32]
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1450              		.loc 1 1315 0
 1451              		@ sp needed for prologue
 1452 0018 00BD     		pop	{pc}
 1453              	.L150:
 1454 001a C046     		.align	2
 1455              	.L149:
 1456 001c 00100240 		.word	1073876992
 1457 0020 FF7FFFFF 		.word	-32769
 1458              		.cfi_endproc
 1459              	.LFE61:
 1461              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1462              		.align	1
 1463              		.global	RCC_BackupResetCmd
 1464              		.code	16
 1465              		.thumb_func
 1467              	RCC_BackupResetCmd:
 1468              	.LFB62:
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and the RTC clock source selection in RCC_BDCR register.
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1469              		.loc 1 1326 0
 1470              		.cfi_startproc
 1471              	.LVL90:
 1472 0000 064B     		ldr	r3, .L155
 1473 0002 00B5     		push	{lr}
 1474              	.LCFI11:
 1475              		.cfi_def_cfa_offset 4
 1476              		.cfi_offset 14, -4
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_BDRST;
 1477              		.loc 1 1332 0
 1478 0004 196A     		ldr	r1, [r3, #32]
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1479              		.loc 1 1330 0
 1480 0006 0028     		cmp	r0, #0
 1481 0008 03D0     		beq	.L152
 1482              		.loc 1 1332 0
 1483 000a 8022     		mov	r2, #128
 1484 000c 5202     		lsl	r2, r2, #9
 1485 000e 0A43     		orr	r2, r1
 1486 0010 01E0     		b	.L154
 1487              	.L152:
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_BDRST;
 1488              		.loc 1 1336 0
 1489 0012 034A     		ldr	r2, .L155+4
 1490 0014 0A40     		and	r2, r1
 1491              	.L154:
 1492 0016 1A62     		str	r2, [r3, #32]
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1493              		.loc 1 1338 0
 1494              		@ sp needed for prologue
 1495 0018 00BD     		pop	{pc}
 1496              	.L156:
 1497 001a C046     		.align	2
 1498              	.L155:
 1499 001c 00100240 		.word	1073876992
 1500 0020 FFFFFEFF 		.word	-65537
 1501              		.cfi_endproc
 1502              	.LFE62:
 1504              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1505              		.align	1
 1506              		.global	RCC_AHBPeriphClockCmd
 1507              		.code	16
 1508              		.thumb_func
 1510              	RCC_AHBPeriphClockCmd:
 1511              	.LFB63:
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.    
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock, applicable only for STM32F072 devices  
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_CRC:   CRC clock
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_FLITF: (has effect only when the Flash memory is in power down m
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_SRAM:  SRAM clock
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA2:  DMA2 clock  
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1512              		.loc 1 1364 0
 1513              		.cfi_startproc
 1514              	.LVL91:
 1515 0000 054B     		ldr	r3, .L160
 1516 0002 00B5     		push	{lr}
 1517              	.LCFI12:
 1518              		.cfi_def_cfa_offset 4
 1519              		.cfi_offset 14, -4
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1520              		.loc 1 1371 0
 1521 0004 5A69     		ldr	r2, [r3, #20]
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1522              		.loc 1 1369 0
 1523 0006 0029     		cmp	r1, #0
 1524 0008 02D0     		beq	.L158
 1525              		.loc 1 1371 0
 1526 000a 1043     		orr	r0, r2
 1527              	.LVL92:
 1528 000c 5861     		str	r0, [r3, #20]
 1529 000e 01E0     		b	.L157
 1530              	.LVL93:
 1531              	.L158:
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1532              		.loc 1 1375 0
 1533 0010 8243     		bic	r2, r0
 1534 0012 5A61     		str	r2, [r3, #20]
 1535              	.LVL94:
 1536              	.L157:
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1537              		.loc 1 1377 0
 1538              		@ sp needed for prologue
 1539 0014 00BD     		pop	{pc}
 1540              	.L161:
 1541 0016 C046     		.align	2
 1542              	.L160:
 1543 0018 00100240 		.word	1073876992
 1544              		.cfi_endproc
 1545              	.LFE63:
 1547              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1548              		.align	1
 1549              		.global	RCC_APB2PeriphClockCmd
 1550              		.code	16
 1551              		.thumb_func
 1553              	RCC_APB2PeriphClockCmd:
 1554              	.LFB64:
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART6: USART6 clock  
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART7: USART7 clock
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART8: USART8 clock   
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:   ADC1 clock
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:   TIM1 clock
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:   SPI1 clock
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1: USART1 clock   
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:  TIM15 clock
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:  TIM16 clock
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:  TIM17 clock
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1555              		.loc 1 1403 0
 1556              		.cfi_startproc
 1557              	.LVL95:
 1558 0000 054B     		ldr	r3, .L165
 1559 0002 00B5     		push	{lr}
 1560              	.LCFI13:
 1561              		.cfi_def_cfa_offset 4
 1562              		.cfi_offset 14, -4
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1563              		.loc 1 1410 0
 1564 0004 9A69     		ldr	r2, [r3, #24]
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1565              		.loc 1 1408 0
 1566 0006 0029     		cmp	r1, #0
 1567 0008 02D0     		beq	.L163
 1568              		.loc 1 1410 0
 1569 000a 1043     		orr	r0, r2
 1570              	.LVL96:
 1571 000c 9861     		str	r0, [r3, #24]
 1572 000e 01E0     		b	.L162
 1573              	.LVL97:
 1574              	.L163:
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1575              		.loc 1 1414 0
 1576 0010 8243     		bic	r2, r0
 1577 0012 9A61     		str	r2, [r3, #24]
 1578              	.LVL98:
 1579              	.L162:
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1580              		.loc 1 1416 0
 1581              		@ sp needed for prologue
 1582 0014 00BD     		pop	{pc}
 1583              	.L166:
 1584 0016 C046     		.align	2
 1585              	.L165:
 1586 0018 00100240 		.word	1073876992
 1587              		.cfi_endproc
 1588              	.LFE64:
 1590              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1591              		.align	1
 1592              		.global	RCC_APB1PeriphClockCmd
 1593              		.code	16
 1594              		.thumb_func
 1596              	RCC_APB1PeriphClockCmd:
 1597              	.LFB65:
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:   TIM2 clock, applicable only for STM32F051 and STM32F072 d
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:   TIM3 clock
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:   TIM6 clock
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:   TIM7 clock, applicable only for STM32F072 devices   
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:  TIM14 clock
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:   WWDG clock
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:   SPI2 clock
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2: USART2 clock
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART3: USART3 clock, applicable only for STM32F072 and STM32F091
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART4: USART4 clock, applicable only for STM32F072 and STM32F091
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART5: USART5 clock, applicable only for STM32F091 devices      
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:   I2C1 clock
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:   I2C2 clock
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USB:    USB clock, applicable only for STM32F042 and STM32F072 de
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CAN:    CAN clock, applicable only for STM32F042 and STM32F072 de
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CRS:    CRS clock , applicable only for STM32F042 and STM32F072 d
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:    PWR clock
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:    DAC clock, applicable only for STM32F051 and STM32F072 de
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and S
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1598              		.loc 1 1449 0
 1599              		.cfi_startproc
 1600              	.LVL99:
 1601 0000 054B     		ldr	r3, .L170
 1602 0002 00B5     		push	{lr}
 1603              	.LCFI14:
 1604              		.cfi_def_cfa_offset 4
 1605              		.cfi_offset 14, -4
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1606              		.loc 1 1456 0
 1607 0004 DA69     		ldr	r2, [r3, #28]
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1608              		.loc 1 1454 0
 1609 0006 0029     		cmp	r1, #0
 1610 0008 02D0     		beq	.L168
 1611              		.loc 1 1456 0
 1612 000a 1043     		orr	r0, r2
 1613              	.LVL100:
 1614 000c D861     		str	r0, [r3, #28]
 1615 000e 01E0     		b	.L167
 1616              	.LVL101:
 1617              	.L168:
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1618              		.loc 1 1460 0
 1619 0010 8243     		bic	r2, r0
 1620 0012 DA61     		str	r2, [r3, #28]
 1621              	.LVL102:
 1622              	.L167:
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1623              		.loc 1 1462 0
 1624              		@ sp needed for prologue
 1625 0014 00BD     		pop	{pc}
 1626              	.L171:
 1627 0016 C046     		.align	2
 1628              	.L170:
 1629 0018 00100240 		.word	1073876992
 1630              		.cfi_endproc
 1631              	.LFE65:
 1633              		.section	.text.RCC_AHBPeriphResetCmd,"ax",%progbits
 1634              		.align	1
 1635              		.global	RCC_AHBPeriphResetCmd
 1636              		.code	16
 1637              		.thumb_func
 1639              	RCC_AHBPeriphResetCmd:
 1640              	.LFB66:
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock, applicable only for STM32F072 devices  
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1641              		.loc 1 1480 0
 1642              		.cfi_startproc
 1643              	.LVL103:
 1644 0000 054B     		ldr	r3, .L175
 1645 0002 00B5     		push	{lr}
 1646              	.LCFI15:
 1647              		.cfi_def_cfa_offset 4
 1648              		.cfi_offset 14, -4
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
 1649              		.loc 1 1487 0
 1650 0004 9A6A     		ldr	r2, [r3, #40]
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1651              		.loc 1 1485 0
 1652 0006 0029     		cmp	r1, #0
 1653 0008 02D0     		beq	.L173
 1654              		.loc 1 1487 0
 1655 000a 1043     		orr	r0, r2
 1656              	.LVL104:
 1657 000c 9862     		str	r0, [r3, #40]
 1658 000e 01E0     		b	.L172
 1659              	.LVL105:
 1660              	.L173:
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
 1661              		.loc 1 1491 0
 1662 0010 8243     		bic	r2, r0
 1663 0012 9A62     		str	r2, [r3, #40]
 1664              	.LVL106:
 1665              	.L172:
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1666              		.loc 1 1493 0
 1667              		@ sp needed for prologue
 1668 0014 00BD     		pop	{pc}
 1669              	.L176:
 1670 0016 C046     		.align	2
 1671              	.L175:
 1672 0018 00100240 		.word	1073876992
 1673              		.cfi_endproc
 1674              	.LFE66:
 1676              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1677              		.align	1
 1678              		.global	RCC_APB2PeriphResetCmd
 1679              		.code	16
 1680              		.thumb_func
 1682              	RCC_APB2PeriphResetCmd:
 1683              	.LFB67:
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART6: USART6 clock  
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART7: USART7 clock
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART8: USART8 clock   
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:   ADC1 clock
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:   TIM1 clock
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:   SPI1 clock
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1: USART1 clock
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:  TIM15 clock
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:  TIM16 clock
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:  TIM17 clock
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1684              		.loc 1 1516 0
 1685              		.cfi_startproc
 1686              	.LVL107:
 1687 0000 054B     		ldr	r3, .L180
 1688 0002 00B5     		push	{lr}
 1689              	.LCFI16:
 1690              		.cfi_def_cfa_offset 4
 1691              		.cfi_offset 14, -4
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1692              		.loc 1 1523 0
 1693 0004 DA68     		ldr	r2, [r3, #12]
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1694              		.loc 1 1521 0
 1695 0006 0029     		cmp	r1, #0
 1696 0008 02D0     		beq	.L178
 1697              		.loc 1 1523 0
 1698 000a 1043     		orr	r0, r2
 1699              	.LVL108:
 1700 000c D860     		str	r0, [r3, #12]
 1701 000e 01E0     		b	.L177
 1702              	.LVL109:
 1703              	.L178:
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1704              		.loc 1 1527 0
 1705 0010 8243     		bic	r2, r0
 1706 0012 DA60     		str	r2, [r3, #12]
 1707              	.LVL110:
 1708              	.L177:
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1709              		.loc 1 1529 0
 1710              		@ sp needed for prologue
 1711 0014 00BD     		pop	{pc}
 1712              	.L181:
 1713 0016 C046     		.align	2
 1714              	.L180:
 1715 0018 00100240 		.word	1073876992
 1716              		.cfi_endproc
 1717              	.LFE67:
 1719              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1720              		.align	1
 1721              		.global	RCC_APB1PeriphResetCmd
 1722              		.code	16
 1723              		.thumb_func
 1725              	RCC_APB1PeriphResetCmd:
 1726              	.LFB68:
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:   TIM2 clock, applicable only for STM32F051 and STM32F072 d
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:   TIM3 clock
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:   TIM6 clock
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:   TIM7 clock, applicable only for STM32F072 devices   
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:  TIM14 clock
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:   WWDG clock
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:   SPI2 clock
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2: USART2 clock
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART3: USART3 clock, applicable only for STM32F072 and STM32F091
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART4: USART4 clock, applicable only for STM32F072 and STM32F091
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART5: USART5 clock, applicable only for STM32F091 devices      
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:   I2C1 clock
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:   I2C2 clock
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USB:    USB clock, applicable only for STM32F042 and STM32F072 de
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CAN:    CAN clock, applicable only for STM32F042 and STM32F072 de
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CRS:    CRS clock , applicable only for STM32F042 and STM32F072 d
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:    PWR clock
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:    DAC clock, applicable only for STM32F051 and STM32F072 de
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and S
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1727              		.loc 1 1559 0
 1728              		.cfi_startproc
 1729              	.LVL111:
 1730 0000 054B     		ldr	r3, .L185
 1731 0002 00B5     		push	{lr}
 1732              	.LCFI17:
 1733              		.cfi_def_cfa_offset 4
 1734              		.cfi_offset 14, -4
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1735              		.loc 1 1566 0
 1736 0004 1A69     		ldr	r2, [r3, #16]
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1737              		.loc 1 1564 0
 1738 0006 0029     		cmp	r1, #0
 1739 0008 02D0     		beq	.L183
 1740              		.loc 1 1566 0
 1741 000a 1043     		orr	r0, r2
 1742              	.LVL112:
 1743 000c 1861     		str	r0, [r3, #16]
 1744 000e 01E0     		b	.L182
 1745              	.LVL113:
 1746              	.L183:
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1747              		.loc 1 1570 0
 1748 0010 8243     		bic	r2, r0
 1749 0012 1A61     		str	r2, [r3, #16]
 1750              	.LVL114:
 1751              	.L182:
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1752              		.loc 1 1572 0
 1753              		@ sp needed for prologue
 1754 0014 00BD     		pop	{pc}
 1755              	.L186:
 1756 0016 C046     		.align	2
 1757              	.L185:
 1758 0018 00100240 		.word	1073876992
 1759              		.cfi_endproc
 1760              	.LFE68:
 1762              		.section	.text.RCC_ITConfig,"ax",%progbits
 1763              		.align	1
 1764              		.global	RCC_ITConfig
 1765              		.code	16
 1766              		.thumb_func
 1768              	RCC_ITConfig:
 1769              	.LFB69:
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              ##### Interrupts and flags management functions #####
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         automatically generated. The NMI will be executed indefinitely, and 
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         since NMI has higher priority than any other IRQ (and main program)
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the application will be stacked in the NMI ISR unless the CSS interrupt
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         pending bit is cleared.
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_LSIRDY: LSI ready interrupt
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_LSERDY: LSE ready interrupt
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSIRDY: HSI ready interrupt
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSERDY: HSE ready interrupt
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_PLLRDY: PLL ready interrupt
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1770              		.loc 1 1611 0
 1771              		.cfi_startproc
 1772              	.LVL115:
 1773 0000 00B5     		push	{lr}
 1774              	.LCFI18:
 1775              		.cfi_def_cfa_offset 4
 1776              		.cfi_offset 14, -4
 1777 0002 054B     		ldr	r3, .L190
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 1778              		.loc 1 1619 0
 1779 0004 1A78     		ldrb	r2, [r3]
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1780              		.loc 1 1616 0
 1781 0006 0029     		cmp	r1, #0
 1782 0008 02D0     		beq	.L188
 1783              		.loc 1 1619 0
 1784 000a 1043     		orr	r0, r2
 1785              	.LVL116:
 1786 000c 1870     		strb	r0, [r3]
 1787 000e 01E0     		b	.L187
 1788              	.LVL117:
 1789              	.L188:
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 1790              		.loc 1 1624 0
 1791 0010 8243     		bic	r2, r0
 1792 0012 1A70     		strb	r2, [r3]
 1793              	.LVL118:
 1794              	.L187:
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1795              		.loc 1 1626 0
 1796              		@ sp needed for prologue
 1797 0014 00BD     		pop	{pc}
 1798              	.L191:
 1799 0016 C046     		.align	2
 1800              	.L190:
 1801 0018 09100240 		.word	1073877001
 1802              		.cfi_endproc
 1803              	.LFE69:
 1805              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1806              		.align	1
 1807              		.global	RCC_GetFlagStatus
 1808              		.code	16
 1809              		.thumb_func
 1811              	RCC_GetFlagStatus:
 1812              	.LFB70:
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready  
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PLLRDY: PLL clock ready
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_OBLRST: Option Byte Loader (OBL) reset 
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PINRST: Pin reset
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_V18PWRRSTF:  V1.8 power domain reset  
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PORRST: POR/PDR reset
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_SFTRST: Software reset
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LPWRRST: Low Power reset
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI48RDY: HSI48 oscillator clock ready, applicable only for STM32F072
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1813              		.loc 1 1650 0
 1814              		.cfi_startproc
 1815              	.LVL119:
 1816 0000 00B5     		push	{lr}
 1817              	.LCFI19:
 1818              		.cfi_def_cfa_offset 4
 1819              		.cfi_offset 14, -4
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0;
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t statusreg = 0;
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   FlagStatus bitstatus = RESET;
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get the RCC register index */
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1820              		.loc 1 1659 0
 1821 0002 4109     		lsr	r1, r0, #5
 1822              	.LVL120:
 1823 0004 094A     		ldr	r2, .L197
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (tmp == 0)               /* The flag to check is in CR register */
 1824              		.loc 1 1661 0
 1825 0006 01D1     		bne	.L193
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CR;
 1826              		.loc 1 1663 0
 1827 0008 1368     		ldr	r3, [r2]
 1828              	.LVL121:
 1829 000a 08E0     		b	.L194
 1830              	.LVL122:
 1831              	.L193:
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == 1)          /* The flag to check is in BDCR register */
 1832              		.loc 1 1665 0
 1833 000c 0129     		cmp	r1, #1
 1834 000e 01D1     		bne	.L195
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->BDCR;
 1835              		.loc 1 1667 0
 1836 0010 136A     		ldr	r3, [r2, #32]
 1837              	.LVL123:
 1838 0012 04E0     		b	.L194
 1839              	.LVL124:
 1840              	.L195:
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in CSR register */
 1841              		.loc 1 1669 0
 1842 0014 0229     		cmp	r1, #2
 1843 0016 01D1     		bne	.L196
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CSR;
 1844              		.loc 1 1671 0
 1845 0018 536A     		ldr	r3, [r2, #36]
 1846              	.LVL125:
 1847 001a 00E0     		b	.L194
 1848              	.LVL126:
 1849              	.L196:
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else                        /* The flag to check is in CR2 register */
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CR2;
 1850              		.loc 1 1675 0
 1851 001c 536B     		ldr	r3, [r2, #52]
 1852              	.LVL127:
 1853              	.L194:
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }    
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get the flag position */
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1854              		.loc 1 1681 0
 1855 001e 1F22     		mov	r2, #31
 1856 0020 1040     		and	r0, r2
 1857              	.LVL128:
 1858 0022 C340     		lsr	r3, r3, r0
 1859              	.LVL129:
 1860 0024 181C     		mov	r0, r3
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = SET;
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = RESET;
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Return the flag status */
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return bitstatus;
 1861              		.loc 1 1690 0
 1862 0026 0122     		mov	r2, #1
 1863 0028 1040     		and	r0, r2
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1864              		.loc 1 1691 0
 1865              		@ sp needed for prologue
 1866 002a 00BD     		pop	{pc}
 1867              	.L198:
 1868              		.align	2
 1869              	.L197:
 1870 002c 00100240 		.word	1073876992
 1871              		.cfi_endproc
 1872              	.LFE70:
 1874              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1875              		.align	1
 1876              		.global	RCC_WaitForHSEStartUp
 1877              		.code	16
 1878              		.thumb_func
 1880              	RCC_WaitForHSEStartUp:
 1881              	.LFB35:
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1882              		.loc 1 228 0
 1883              		.cfi_startproc
 1884 0000 07B5     		push	{r0, r1, r2, lr}
 1885              	.LCFI20:
 1886              		.cfi_def_cfa_offset 16
 1887              		.cfi_offset 0, -16
 1888              		.cfi_offset 1, -12
 1889              		.cfi_offset 2, -8
 1890              		.cfi_offset 14, -4
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 1891              		.loc 1 229 0
 1892 0002 0023     		mov	r3, #0
 1893 0004 0193     		str	r3, [sp, #4]
 1894              	.LVL130:
 1895              	.L201:
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 1896              		.loc 1 236 0 discriminator 1
 1897 0006 1120     		mov	r0, #17
 1898 0008 FFF7FEFF 		bl	RCC_GetFlagStatus
 1899              	.LVL131:
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     StartUpCounter++;  
 1900              		.loc 1 237 0 discriminator 1
 1901 000c 019B     		ldr	r3, [sp, #4]
 1902 000e 0133     		add	r3, r3, #1
 1903              	.LVL132:
 1904 0010 0193     		str	r3, [sp, #4]
 1905              	.LVL133:
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1906              		.loc 1 238 0 discriminator 1
 1907 0012 019A     		ldr	r2, [sp, #4]
 1908 0014 A023     		mov	r3, #160
 1909              	.LVL134:
 1910 0016 DB01     		lsl	r3, r3, #7
 1911 0018 9A42     		cmp	r2, r3
 1912 001a 01D0     		beq	.L200
 1913 001c 0028     		cmp	r0, #0
 1914 001e F2D0     		beq	.L201
 1915              	.L200:
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 1916              		.loc 1 240 0
 1917 0020 1120     		mov	r0, #17
 1918              	.LVL135:
 1919 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1920              	.LVL136:
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1921              		.loc 1 249 0
 1922              		@ sp needed for prologue
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return (status);
 1923              		.loc 1 248 0
 1924 0026 431E     		sub	r3, r0, #1
 1925 0028 9841     		sbc	r0, r0, r3
 1926              	.LVL137:
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1927              		.loc 1 249 0
 1928 002a 0EBD     		pop	{r1, r2, r3, pc}
 1929              		.cfi_endproc
 1930              	.LFE35:
 1932              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1933              		.align	1
 1934              		.global	RCC_ClearFlag
 1935              		.code	16
 1936              		.thumb_func
 1938              	RCC_ClearFlag:
 1939              	.LFB71:
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         The reset flags are: RCC_FLAG_OBLRST, RCC_FLAG_PINRST, RCC_FLAG_V18PWRRSTF,
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST,
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RCC_FLAG_LPWRRST.
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClearFlag(void)
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1940              		.loc 1 1702 0
 1941              		.cfi_startproc
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1942              		.loc 1 1704 0
 1943 0000 034B     		ldr	r3, .L207
 1944 0002 8022     		mov	r2, #128
 1945 0004 596A     		ldr	r1, [r3, #36]
 1946 0006 5204     		lsl	r2, r2, #17
 1947 0008 0A43     		orr	r2, r1
 1948 000a 5A62     		str	r2, [r3, #36]
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1949              		.loc 1 1705 0
 1950              		@ sp needed for prologue
 1951 000c 7047     		bx	lr
 1952              	.L208:
 1953 000e C046     		.align	2
 1954              	.L207:
 1955 0010 00100240 		.word	1073876992
 1956              		.cfi_endproc
 1957              	.LFE71:
 1959              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1960              		.align	1
 1961              		.global	RCC_GetITStatus
 1962              		.code	16
 1963              		.thumb_func
 1965              	RCC_GetITStatus:
 1966              	.LFB72:
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices 
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1967              		.loc 1 1722 0
 1968              		.cfi_startproc
 1969              	.LVL138:
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ITStatus bitstatus = RESET;
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1970              		.loc 1 1729 0
 1971 0000 024B     		ldr	r3, .L210
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = SET;
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = RESET;
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Return the RCC_IT status */
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return  bitstatus;
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1972              		.loc 1 1739 0
 1973              		@ sp needed for prologue
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1974              		.loc 1 1729 0
 1975 0002 9B68     		ldr	r3, [r3, #8]
 1976              	.LVL139:
 1977 0004 1840     		and	r0, r3
 1978              	.LVL140:
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return  bitstatus;
 1979              		.loc 1 1738 0
 1980 0006 431E     		sub	r3, r0, #1
 1981 0008 9841     		sbc	r0, r0, r3
 1982              		.loc 1 1739 0
 1983 000a 7047     		bx	lr
 1984              	.L211:
 1985              		.align	2
 1986              	.L210:
 1987 000c 00100240 		.word	1073876992
 1988              		.cfi_endproc
 1989              	.LFE72:
 1991              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1992              		.align	1
 1993              		.global	RCC_ClearITPendingBit
 1994              		.code	16
 1995              		.thumb_func
 1997              	RCC_ClearITPendingBit:
 1998              	.LFB73:
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices 
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1999              		.loc 1 1756 0
 2000              		.cfi_startproc
 2001              	.LVL141:
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****      pending bits */
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 2002              		.loc 1 1762 0
 2003 0000 014B     		ldr	r3, .L213
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2004              		.loc 1 1763 0
 2005              		@ sp needed for prologue
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 2006              		.loc 1 1762 0
 2007 0002 1870     		strb	r0, [r3]
 2008              		.loc 1 1763 0
 2009 0004 7047     		bx	lr
 2010              	.L214:
 2011 0006 C046     		.align	2
 2012              	.L213:
 2013 0008 0A100240 		.word	1073877002
 2014              		.cfi_endproc
 2015              	.LFE73:
 2017              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2018              		.set	.LANCHOR0,. + 0
 2021              	APBAHBPrescTable:
 2022 0000 00       		.byte	0
 2023 0001 00       		.byte	0
 2024 0002 00       		.byte	0
 2025 0003 00       		.byte	0
 2026 0004 01       		.byte	1
 2027 0005 02       		.byte	2
 2028 0006 03       		.byte	3
 2029 0007 04       		.byte	4
 2030 0008 01       		.byte	1
 2031 0009 02       		.byte	2
 2032 000a 03       		.byte	3
 2033 000b 04       		.byte	4
 2034 000c 06       		.byte	6
 2035 000d 07       		.byte	7
 2036 000e 08       		.byte	8
 2037 000f 09       		.byte	9
 2038              		.text
 2039              	.Letext0:
 2040              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2041              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 2042              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_rcc.c
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:18     .text.RCC_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:23     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:81     .text.RCC_DeInit:00000048 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:91     .text.RCC_HSEConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:96     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:114    .text.RCC_HSEConfig:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:119    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:124    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:153    .text.RCC_AdjustHSICalibrationValue:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:158    .text.RCC_HSICmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:163    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:194    .text.RCC_HSICmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:199    .text.RCC_AdjustHSI14CalibrationValue:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:204    .text.RCC_AdjustHSI14CalibrationValue:00000000 RCC_AdjustHSI14CalibrationValue
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:233    .text.RCC_AdjustHSI14CalibrationValue:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:238    .text.RCC_HSI14Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:243    .text.RCC_HSI14Cmd:00000000 RCC_HSI14Cmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:274    .text.RCC_HSI14Cmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:279    .text.RCC_HSI14ADCRequestCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:284    .text.RCC_HSI14ADCRequestCmd:00000000 RCC_HSI14ADCRequestCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:315    .text.RCC_HSI14ADCRequestCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:320    .text.RCC_LSEConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:325    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:354    .text.RCC_LSEConfig:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:359    .text.RCC_LSEDriveConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:364    .text.RCC_LSEDriveConfig:00000000 RCC_LSEDriveConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:388    .text.RCC_LSEDriveConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:393    .text.RCC_LSICmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:398    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:429    .text.RCC_LSICmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:434    .text.RCC_PLLConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:439    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:471    .text.RCC_PLLConfig:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:477    .text.RCC_PLLCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:482    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:514    .text.RCC_PLLCmd:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:520    .text.RCC_HSI48Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:525    .text.RCC_HSI48Cmd:00000000 RCC_HSI48Cmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:557    .text.RCC_HSI48Cmd:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:563    .text.RCC_PREDIV1Config:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:568    .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:595    .text.RCC_PREDIV1Config:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:600    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:605    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:637    .text.RCC_ClockSecuritySystemCmd:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:643    .text.RCC_MCOConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:648    .text.RCC_MCOConfig:00000000 RCC_MCOConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:679    .text.RCC_MCOConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:684    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:689    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:716    .text.RCC_SYSCLKConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:721    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:726    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:743    .text.RCC_GetSYSCLKSource:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:748    .text.RCC_HCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:753    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:780    .text.RCC_HCLKConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:785    .text.RCC_PCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:790    .text.RCC_PCLKConfig:00000000 RCC_PCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:817    .text.RCC_PCLKConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:823    .text.RCC_ADCCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:828    .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:865    .text.RCC_ADCCLKConfig:00000024 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:872    .text.RCC_CECCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:877    .text.RCC_CECCLKConfig:00000000 RCC_CECCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:901    .text.RCC_CECCLKConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:906    .text.RCC_I2CCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:911    .text.RCC_I2CCLKConfig:00000000 RCC_I2CCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:935    .text.RCC_I2CCLKConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:940    .text.RCC_USARTCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:945    .text.RCC_USARTCLKConfig:00000000 RCC_USARTCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1000   .text.RCC_USARTCLKConfig:0000002c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1007   .text.RCC_USBCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1012   .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1036   .text.RCC_USBCLKConfig:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1042   .text.RCC_GetClocksFreq:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1047   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1074   .text.RCC_GetClocksFreq:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1379   .text.RCC_GetClocksFreq:00000170 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1390   .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1395   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1414   .text.RCC_RTCCLKConfig:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1419   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1424   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1456   .text.RCC_RTCCLKCmd:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1462   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1467   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1499   .text.RCC_BackupResetCmd:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1505   .text.RCC_AHBPeriphClockCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1510   .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1543   .text.RCC_AHBPeriphClockCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1548   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1553   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1586   .text.RCC_APB2PeriphClockCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1591   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1596   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1629   .text.RCC_APB1PeriphClockCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1634   .text.RCC_AHBPeriphResetCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1639   .text.RCC_AHBPeriphResetCmd:00000000 RCC_AHBPeriphResetCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1672   .text.RCC_AHBPeriphResetCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1677   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1682   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1715   .text.RCC_APB2PeriphResetCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1720   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1725   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1758   .text.RCC_APB1PeriphResetCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1763   .text.RCC_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1768   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1801   .text.RCC_ITConfig:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1806   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1811   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1870   .text.RCC_GetFlagStatus:0000002c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1875   .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1880   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1933   .text.RCC_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1938   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1955   .text.RCC_ClearFlag:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1960   .text.RCC_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1965   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1987   .text.RCC_GetITStatus:0000000c $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1992   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1997   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:2013   .text.RCC_ClearITPendingBit:00000008 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:2021   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1087   .text.RCC_GetClocksFreq:0000001d $d
C:\Users\THANGN~1\AppData\Local\Temp\cchk6Dks.s:1087   .text.RCC_GetClocksFreq:0000001e $t
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_rcc.h.74.e35d75e46f79d72edc3a48b80dff955b

UNDEFINED SYMBOLS
__aeabi_uidiv
__gnu_thumb1_case_uqi
