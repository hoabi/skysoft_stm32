   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USART_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	USART_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	USART_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @file    stm32f0xx_usart.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          transmitter (USART):
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Initialization and Configuration
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + STOP Mode
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + AutoBaudRate
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Data transfers
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Multi-Processor Communication
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + LIN mode
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Half-duplex mode
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Smartcard mode
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + IrDA mode
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + RS485 mode  
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + DMA transfers management
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Interrupts and flags management
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @verbatim
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### How to use this driver #####
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE)
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE)
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART2 and USART3.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) According to the USART mode, enable the GPIO clocks using 
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             RCC_AHBPeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             or and SCLK). 
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Peripheral's alternate function: 
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the desired pin in alternate function by:
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Call GPIO_Init() function.        
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             flow control and Mode(Receiver/Transmitter) using the SPI_Init()
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.  
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) For synchronous mode, enable the clock and program the polarity,
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             phase and last bit using the USART_ClockInit() function.  
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             USART_ITConfig() if you need to use interrupt mode.   
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) When using the DMA mode: 
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the DMA using DMA_Init() function.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Active the needed channel Request using USART_DMACmd() function.   
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the USART using the USART_Cmd() function.   
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode.   
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             for more details.
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @attention
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may not use this file except in compliance with the License.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may obtain a copy of the License at:
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * See the License for the specific language governing permissions and
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * limitations under the License.
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_usart.h"
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_rcc.h"
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART 
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief USART driver modules
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private define ------------------------------------------------------------*/
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint32_t)0xFFFFE6F3)) */
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR1_CLEAR_MASK            ((uint32_t)(USART_CR1_M | USART_CR1_PCE | \
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_RE))
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint32_t)0xFFFFF0FF)) */
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint32_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint32_t)0xFFFFFCFF)) */
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR3_CLEAR_MASK            ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART Interrupts mask */
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define IT_MASK                   ((uint32_t)0x000000FF)
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Private_Functions
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           ##### Initialization and Configuration functions #####
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         This subsection provides a set of functions allowing to initialize the USART 
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         in asynchronous and in synchronous modes.
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the asynchronous mode only these parameters can be configured: 
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Baud Rate.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Word Length.
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Stop Bit.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Parity: If the parity is enabled, then the MSB bit of the data written
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                in the data register is transmitted but is changed by the parity bit.
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                Depending on the frame length defined by the M bit (8-bits or 9-bits),
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                the possible USART frame formats are as listed in the following table:
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+     
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------------------|---------------------------------------|             
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+            
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Hardware flow control.
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Receiver/transmitter modes.
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART_Init() function follows the USART  asynchronous configuration 
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          procedure(details for the procedure are available in reference manual.
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the synchronous mode in addition to the asynchronous mode parameters
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             these parameters should be also configured:
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART Clock Enabled.
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART polarity.
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART phase.
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART LastBit.
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] These parameters can be configured using the USART_ClockInit() function.
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices.  
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
  26              		.loc 1 176 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 08B5     		push	{r3, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
  34              		.loc 1 180 0
  35 0002 2C4B     		ldr	r3, .L12
  36 0004 9842     		cmp	r0, r3
  37 0006 07D1     		bne	.L2
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  38              		.loc 1 182 0
  39 0008 8020     		mov	r0, #128
  40              	.LVL1:
  41 000a C001     		lsl	r0, r0, #7
  42 000c 0121     		mov	r1, #1
  43 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  44              	.LVL2:
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  45              		.loc 1 183 0
  46 0012 8020     		mov	r0, #128
  47 0014 C001     		lsl	r0, r0, #7
  48 0016 48E0     		b	.L10
  49              	.LVL3:
  50              	.L2:
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART2)
  51              		.loc 1 185 0
  52 0018 274B     		ldr	r3, .L12+4
  53 001a 9842     		cmp	r0, r3
  54 001c 07D1     		bne	.L4
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  55              		.loc 1 187 0
  56 001e 8020     		mov	r0, #128
  57              	.LVL4:
  58 0020 8002     		lsl	r0, r0, #10
  59 0022 0121     		mov	r1, #1
  60 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  61              	.LVL5:
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  62              		.loc 1 188 0
  63 0028 8020     		mov	r0, #128
  64 002a 8002     		lsl	r0, r0, #10
  65 002c 1FE0     		b	.L11
  66              	.LVL6:
  67              	.L4:
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART3)
  68              		.loc 1 190 0
  69 002e 234B     		ldr	r3, .L12+8
  70 0030 9842     		cmp	r0, r3
  71 0032 07D1     		bne	.L5
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  72              		.loc 1 192 0
  73 0034 8020     		mov	r0, #128
  74              	.LVL7:
  75 0036 C002     		lsl	r0, r0, #11
  76 0038 0121     		mov	r1, #1
  77 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  78              	.LVL8:
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  79              		.loc 1 193 0
  80 003e 8020     		mov	r0, #128
  81 0040 C002     		lsl	r0, r0, #11
  82 0042 14E0     		b	.L11
  83              	.LVL9:
  84              	.L5:
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     else if (USARTx == USART4)
  85              		.loc 1 195 0
  86 0044 1E4B     		ldr	r3, .L12+12
  87 0046 9842     		cmp	r0, r3
  88 0048 07D1     		bne	.L6
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, ENABLE);
  89              		.loc 1 197 0
  90 004a 8020     		mov	r0, #128
  91              	.LVL10:
  92 004c 0003     		lsl	r0, r0, #12
  93 004e 0121     		mov	r1, #1
  94 0050 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  95              	.LVL11:
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, DISABLE);
  96              		.loc 1 198 0
  97 0054 8020     		mov	r0, #128
  98 0056 0003     		lsl	r0, r0, #12
  99 0058 09E0     		b	.L11
 100              	.LVL12:
 101              	.L6:
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART5)
 102              		.loc 1 200 0
 103 005a 1A4B     		ldr	r3, .L12+16
 104 005c 9842     		cmp	r0, r3
 105 005e 0AD1     		bne	.L7
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, ENABLE);
 106              		.loc 1 202 0
 107 0060 8020     		mov	r0, #128
 108              	.LVL13:
 109 0062 4003     		lsl	r0, r0, #13
 110 0064 0121     		mov	r1, #1
 111 0066 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 112              	.LVL14:
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, DISABLE);
 113              		.loc 1 203 0
 114 006a 8020     		mov	r0, #128
 115 006c 4003     		lsl	r0, r0, #13
 116              	.L11:
 117 006e 0021     		mov	r1, #0
 118 0070 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 119              	.LVL15:
 120 0074 1CE0     		b	.L1
 121              	.LVL16:
 122              	.L7:
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     else if (USARTx == USART6)
 123              		.loc 1 205 0
 124 0076 144B     		ldr	r3, .L12+20
 125 0078 9842     		cmp	r0, r3
 126 007a 05D1     		bne	.L8
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 127              		.loc 1 207 0
 128 007c 2020     		mov	r0, #32
 129              	.LVL17:
 130 007e 0121     		mov	r1, #1
 131 0080 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 132              	.LVL18:
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 133              		.loc 1 208 0
 134 0084 2020     		mov	r0, #32
 135 0086 10E0     		b	.L10
 136              	.LVL19:
 137              	.L8:
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART7)
 138              		.loc 1 210 0
 139 0088 104B     		ldr	r3, .L12+24
 140 008a 9842     		cmp	r0, r3
 141 008c 05D1     		bne	.L9
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, ENABLE);
 142              		.loc 1 212 0
 143 008e 4020     		mov	r0, #64
 144              	.LVL20:
 145 0090 0121     		mov	r1, #1
 146 0092 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 147              	.LVL21:
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, DISABLE);
 148              		.loc 1 213 0
 149 0096 4020     		mov	r0, #64
 150 0098 07E0     		b	.L10
 151              	.LVL22:
 152              	.L9:
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else 
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     if  (USARTx == USART8)
 153              		.loc 1 217 0
 154 009a 0D4B     		ldr	r3, .L12+28
 155 009c 9842     		cmp	r0, r3
 156 009e 07D1     		bne	.L1
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     {
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, ENABLE);
 157              		.loc 1 219 0
 158 00a0 8020     		mov	r0, #128
 159              	.LVL23:
 160 00a2 0121     		mov	r1, #1
 161 00a4 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 162              	.LVL24:
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, DISABLE);
 163              		.loc 1 220 0
 164 00a8 8020     		mov	r0, #128
 165              	.L10:
 166 00aa 0021     		mov	r1, #0
 167 00ac FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 168              	.LVL25:
 169              	.L1:
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     }
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 170              		.loc 1 223 0
 171              		@ sp needed for prologue
 172 00b0 08BD     		pop	{r3, pc}
 173              	.L13:
 174 00b2 C046     		.align	2
 175              	.L12:
 176 00b4 00380140 		.word	1073821696
 177 00b8 00440040 		.word	1073759232
 178 00bc 00480040 		.word	1073760256
 179 00c0 004C0040 		.word	1073761280
 180 00c4 00500040 		.word	1073762304
 181 00c8 00140140 		.word	1073812480
 182 00cc 00180140 		.word	1073813504
 183 00d0 001C0140 		.word	1073814528
 184              		.cfi_endproc
 185              	.LFE33:
 187              		.global	__aeabi_uidiv
 188              		.global	__aeabi_uidivmod
 189              		.section	.text.USART_Init,"ax",%progbits
 190              		.align	1
 191              		.global	USART_Init
 192              		.code	16
 193              		.thumb_func
 195              	USART_Init:
 196              	.LFB34:
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         parameters in the USART_InitStruct .
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.    
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 197              		.loc 1 237 0
 198              		.cfi_startproc
 199              	.LVL26:
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Disable USART */
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 200              		.loc 1 251 0
 201 0000 0368     		ldr	r3, [r0]
 202 0002 0122     		mov	r2, #1
 203 0004 9343     		bic	r3, r2
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 204              		.loc 1 237 0
 205 0006 F0B5     		push	{r4, r5, r6, r7, lr}
 206              	.LCFI1:
 207              		.cfi_def_cfa_offset 20
 208              		.cfi_offset 4, -20
 209              		.cfi_offset 5, -16
 210              		.cfi_offset 6, -12
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213              		.loc 1 251 0
 214 0008 0360     		str	r3, [r0]
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART CR2 Configuration -----------------------*/
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 215              		.loc 1 254 0
 216 000a 4268     		ldr	r2, [r0, #4]
 217              	.LVL27:
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear STOP[13:12] bits */
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 218              		.loc 1 256 0
 219 000c 264B     		ldr	r3, .L27
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 220              		.loc 1 237 0
 221 000e 0E1C     		mov	r6, r1
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 222              		.loc 1 260 0
 223 0010 8968     		ldr	r1, [r1, #8]
 224              	.LVL28:
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 225              		.loc 1 256 0
 226 0012 1340     		and	r3, r2
 227              	.LVL29:
 228              		.loc 1 260 0
 229 0014 0B43     		orr	r3, r1
 230              	.LVL30:
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 231              		.loc 1 263 0
 232 0016 4360     		str	r3, [r0, #4]
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART CR1 Configuration -----------------------*/
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR1;
 233              		.loc 1 266 0
 234 0018 0268     		ldr	r2, [r0]
 235              	.LVL31:
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 236              		.loc 1 268 0
 237 001a 244B     		ldr	r3, .L27+4
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the M bits according to USART_WordLength value */
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 238              		.loc 1 274 0
 239 001c 7168     		ldr	r1, [r6, #4]
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 240              		.loc 1 268 0
 241 001e 1A40     		and	r2, r3
 242              	.LVL32:
 243              		.loc 1 274 0
 244 0020 F368     		ldr	r3, [r6, #12]
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 245              		.loc 1 237 0
 246 0022 8DB0     		sub	sp, sp, #52
 247              	.LCFI2:
 248              		.cfi_def_cfa_offset 72
 249              		.loc 1 274 0
 250 0024 0B43     		orr	r3, r1
 251 0026 3169     		ldr	r1, [r6, #16]
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 252              		.loc 1 237 0
 253 0028 041C     		mov	r4, r0
 254              		.loc 1 274 0
 255 002a 0B43     		orr	r3, r1
 256 002c 1343     		orr	r3, r2
 257              	.LVL33:
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USART_InitStruct->USART_Mode;
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR1 */
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 = tmpreg;
 258              		.loc 1 278 0
 259 002e 0360     		str	r3, [r0]
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART CR3 Configuration -----------------------*/  
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR3;
 260              		.loc 1 281 0
 261 0030 8268     		ldr	r2, [r0, #8]
 262              	.LVL34:
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CTSE and RTSE bits */
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 263              		.loc 1 283 0
 264 0032 1F4B     		ldr	r3, .L27+8
 265 0034 1340     		and	r3, r2
 266              	.LVL35:
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 267              		.loc 1 287 0
 268 0036 7269     		ldr	r2, [r6, #20]
 269 0038 1343     		orr	r3, r2
 270              	.LVL36:
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR3 */
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 = tmpreg;
 271              		.loc 1 290 0
 272 003a 8360     		str	r3, [r0, #8]
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART BRR Configuration -----------------------*/
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 273              		.loc 1 294 0
 274 003c 02A8     		add	r0, sp, #8
 275              	.LVL37:
 276 003e FFF7FEFF 		bl	RCC_GetClocksFreq
 277              	.LVL38:
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
 278              		.loc 1 296 0
 279 0042 1C4B     		ldr	r3, .L27+12
 280 0044 9C42     		cmp	r4, r3
 281 0046 01D1     		bne	.L15
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 282              		.loc 1 298 0
 283 0048 089F     		ldr	r7, [sp, #32]
 284              	.LVL39:
 285 004a 0AE0     		b	.L16
 286              	.LVL40:
 287              	.L15:
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART2)
 288              		.loc 1 300 0
 289 004c 1A4B     		ldr	r3, .L27+16
 290 004e 9C42     		cmp	r4, r3
 291 0050 01D1     		bne	.L17
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 292              		.loc 1 302 0
 293 0052 099F     		ldr	r7, [sp, #36]
 294              	.LVL41:
 295 0054 05E0     		b	.L16
 296              	.LVL42:
 297              	.L17:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    else if (USARTx == USART3)
 298              		.loc 1 304 0
 299 0056 194B     		ldr	r3, .L27+20
 300 0058 9C42     		cmp	r4, r3
 301 005a 01D1     		bne	.L18
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 302              		.loc 1 306 0
 303 005c 0A9F     		ldr	r7, [sp, #40]
 304              	.LVL43:
 305 005e 00E0     		b	.L16
 306              	.LVL44:
 307              	.L18:
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK_Frequency;
 308              		.loc 1 310 0
 309 0060 049F     		ldr	r7, [sp, #16]
 310              	.LVL45:
 311              	.L16:
 312 0062 3168     		ldr	r1, [r6]
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Determine the integer part */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 313              		.loc 1 314 0
 314 0064 2368     		ldr	r3, [r4]
 315 0066 0191     		str	r1, [sp, #4]
 316 0068 1A04     		lsl	r2, r3, #16
 317 006a 02D5     		bpl	.L19
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* (divider * 10) computing in case Oversampling mode is 8 Samples */
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 318              		.loc 1 317 0
 319 006c 7F00     		lsl	r7, r7, #1
 320              	.LVL46:
 321 006e 381C     		mov	r0, r7
 322 0070 01E0     		b	.L26
 323              	.LVL47:
 324              	.L19:
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* (divider * 10) computing in case Oversampling mode is 16 Samples */
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 325              		.loc 1 323 0
 326 0072 0199     		ldr	r1, [sp, #4]
 327 0074 381C     		mov	r0, r7
 328              	.LVL48:
 329              	.L26:
 330 0076 FFF7FEFF 		bl	__aeabi_uidiv
 331              	.LVL49:
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 332              		.loc 1 324 0
 333 007a 0199     		ldr	r1, [sp, #4]
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 334              		.loc 1 323 0
 335 007c 051C     		mov	r5, r0
 336              	.LVL50:
 337              		.loc 1 324 0
 338 007e 381C     		mov	r0, r7
 339              	.LVL51:
 340 0080 FFF7FEFF 		bl	__aeabi_uidivmod
 341              	.LVL52:
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* round the divider : if fractional part i greater than 0.5 increment divider */
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 342              		.loc 1 328 0
 343 0084 3268     		ldr	r2, [r6]
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider++;
 344              		.loc 1 330 0
 345 0086 0023     		mov	r3, #0
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 346              		.loc 1 328 0
 347 0088 5208     		lsr	r2, r2, #1
 348              		.loc 1 330 0
 349 008a 9142     		cmp	r1, r2
 350 008c 5B41     		adc	r3, r3, r3
 351 008e ED18     		add	r5, r5, r3
 352              	.LVL53:
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   } 
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Implement the divider in case Oversampling mode is 8 Samples */
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 353              		.loc 1 334 0
 354 0090 2368     		ldr	r3, [r4]
 355 0092 1904     		lsl	r1, r3, #16
 356 0094 04D5     		bpl	.L22
 357              	.LVL54:
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* get the LSB of divider and shift it to the right by 1 bit */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg = (divider & (uint16_t)0x000F) >> 1;
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* update the divider value */
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 358              		.loc 1 340 0
 359 0096 0A4A     		ldr	r2, .L27+24
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg = (divider & (uint16_t)0x000F) >> 1;
 360              		.loc 1 337 0
 361 0098 2B07     		lsl	r3, r5, #28
 362 009a 5B0F     		lsr	r3, r3, #29
 363              	.LVL55:
 364              		.loc 1 340 0
 365 009c 1540     		and	r5, r2
 366              	.LVL56:
 367 009e 1D43     		orr	r5, r3
 368              	.LVL57:
 369              	.L22:
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART BRR */
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->BRR = (uint16_t)divider;
 370              		.loc 1 344 0
 371 00a0 A581     		strh	r5, [r4, #12]
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 372              		.loc 1 345 0
 373 00a2 0DB0     		add	sp, sp, #52
 374              		@ sp needed for prologue
 375              	.LVL58:
 376              	.LVL59:
 377              	.LVL60:
 378 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 379              	.L28:
 380 00a6 C046     		.align	2
 381              	.L27:
 382 00a8 FFCFFFFF 		.word	-12289
 383 00ac F3E9FFFF 		.word	-5645
 384 00b0 FFFCFFFF 		.word	-769
 385 00b4 00380140 		.word	1073821696
 386 00b8 00440040 		.word	1073759232
 387 00bc 00480040 		.word	1073760256
 388 00c0 F0FF0000 		.word	65520
 389              		.cfi_endproc
 390              	.LFE34:
 392              		.section	.text.USART_StructInit,"ax",%progbits
 393              		.align	1
 394              		.global	USART_StructInit
 395              		.code	16
 396              		.thumb_func
 398              	USART_StructInit:
 399              	.LFB35:
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         which will be initialized.
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 400              		.loc 1 354 0
 401              		.cfi_startproc
 402              	.LVL61:
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_InitStruct members default value */
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 403              		.loc 1 356 0
 404 0000 9623     		mov	r3, #150
 405 0002 9B01     		lsl	r3, r3, #6
 406 0004 0360     		str	r3, [r0]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 407              		.loc 1 360 0
 408 0006 0C22     		mov	r2, #12
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 409              		.loc 1 357 0
 410 0008 0023     		mov	r3, #0
 411 000a 4360     		str	r3, [r0, #4]
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 412              		.loc 1 358 0
 413 000c 8360     		str	r3, [r0, #8]
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 414              		.loc 1 359 0
 415 000e C360     		str	r3, [r0, #12]
 416              		.loc 1 360 0
 417 0010 0261     		str	r2, [r0, #16]
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 418              		.loc 1 361 0
 419 0012 4361     		str	r3, [r0, #20]
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 420              		.loc 1 362 0
 421              		@ sp needed for prologue
 422 0014 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE35:
 426              		.section	.text.USART_ClockInit,"ax",%progbits
 427              		.align	1
 428              		.global	USART_ClockInit
 429              		.code	16
 430              		.thumb_func
 432              	USART_ClockInit:
 433              	.LFB36:
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct.
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         structure that contains the configuration information for the specified 
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         USART peripheral.  
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 434              		.loc 1 377 0
 435              		.cfi_startproc
 436              	.LVL62:
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t tmpreg = 0;
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 437              		.loc 1 386 0
 438 0000 4268     		ldr	r2, [r0, #4]
 439              	.LVL63:
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 440              		.loc 1 388 0
 441 0002 064B     		ldr	r3, .L31
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 442              		.loc 1 377 0
 443 0004 10B5     		push	{r4, lr}
 444              	.LCFI3:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 4, -8
 447              		.cfi_offset 14, -4
 448              		.loc 1 388 0
 449 0006 1A40     		and	r2, r3
 450              	.LVL64:
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 451              		.loc 1 394 0
 452 0008 0C68     		ldr	r4, [r1]
 453 000a 4B68     		ldr	r3, [r1, #4]
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 454              		.loc 1 398 0
 455              		@ sp needed for prologue
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 456              		.loc 1 394 0
 457 000c 2343     		orr	r3, r4
 458 000e 8C68     		ldr	r4, [r1, #8]
 459 0010 C968     		ldr	r1, [r1, #12]
 460              	.LVL65:
 461 0012 2343     		orr	r3, r4
 462 0014 0B43     		orr	r3, r1
 463 0016 1343     		orr	r3, r2
 464              	.LVL66:
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 465              		.loc 1 397 0
 466 0018 4360     		str	r3, [r0, #4]
 467              		.loc 1 398 0
 468 001a 10BD     		pop	{r4, pc}
 469              	.L32:
 470              		.align	2
 471              	.L31:
 472 001c FFF0FFFF 		.word	-3841
 473              		.cfi_endproc
 474              	.LFE36:
 476              		.section	.text.USART_ClockStructInit,"ax",%progbits
 477              		.align	1
 478              		.global	USART_ClockStructInit
 479              		.code	16
 480              		.thumb_func
 482              	USART_ClockStructInit:
 483              	.LFB37:
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         structure which will be initialized.
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 484              		.loc 1 407 0
 485              		.cfi_startproc
 486              	.LVL67:
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_ClockInitStruct members default value */
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 487              		.loc 1 409 0
 488 0000 0023     		mov	r3, #0
 489 0002 0360     		str	r3, [r0]
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 490              		.loc 1 410 0
 491 0004 4360     		str	r3, [r0, #4]
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 492              		.loc 1 411 0
 493 0006 8360     		str	r3, [r0, #8]
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 494              		.loc 1 412 0
 495 0008 C360     		str	r3, [r0, #12]
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 496              		.loc 1 413 0
 497              		@ sp needed for prologue
 498 000a 7047     		bx	lr
 499              		.cfi_endproc
 500              	.LFE37:
 502              		.section	.text.USART_Cmd,"ax",%progbits
 503              		.align	1
 504              		.global	USART_Cmd
 505              		.code	16
 506              		.thumb_func
 508              	USART_Cmd:
 509              	.LFB38:
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.    
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 510              		.loc 1 426 0
 511              		.cfi_startproc
 512              	.LVL68:
 513 0000 00B5     		push	{lr}
 514              	.LCFI4:
 515              		.cfi_def_cfa_offset 4
 516              		.cfi_offset 14, -4
 517 0002 0123     		mov	r3, #1
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 518              		.loc 1 434 0
 519 0004 0268     		ldr	r2, [r0]
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 520              		.loc 1 431 0
 521 0006 0029     		cmp	r1, #0
 522 0008 01D0     		beq	.L35
 523              		.loc 1 434 0
 524 000a 1343     		orr	r3, r2
 525 000c 01E0     		b	.L37
 526              	.L35:
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 527              		.loc 1 439 0
 528 000e 9A43     		bic	r2, r3
 529 0010 131C     		mov	r3, r2
 530              	.L37:
 531 0012 0360     		str	r3, [r0]
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 532              		.loc 1 441 0
 533              		@ sp needed for prologue
 534 0014 00BD     		pop	{pc}
 535              		.cfi_endproc
 536              	.LFE38:
 538              		.section	.text.USART_DirectionModeCmd,"ax",%progbits
 539              		.align	1
 540              		.global	USART_DirectionModeCmd
 541              		.code	16
 542              		.thumb_func
 544              	USART_DirectionModeCmd:
 545              	.LFB39:
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's transmitter or receiver.
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Direction: specifies the USART direction.
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Mode_Tx: USART Transmitter
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Mode_Rx: USART Receiver
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART transfer direction.
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState Ne
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 546              		.loc 1 458 0
 547              		.cfi_startproc
 548              	.LVL69:
 549 0000 00B5     		push	{lr}
 550              	.LCFI5:
 551              		.cfi_def_cfa_offset 4
 552              		.cfi_offset 14, -4
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_DirectionMode));
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART's transfer interface by setting the TE and/or RE bits 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR1 register */
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_DirectionMode;
 553              		.loc 1 468 0
 554 0002 0368     		ldr	r3, [r0]
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 555              		.loc 1 464 0
 556 0004 002A     		cmp	r2, #0
 557 0006 02D0     		beq	.L39
 558              		.loc 1 468 0
 559 0008 1943     		orr	r1, r3
 560              	.LVL70:
 561 000a 0160     		str	r1, [r0]
 562 000c 01E0     		b	.L38
 563              	.LVL71:
 564              	.L39:
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART's transfer interface by clearing the TE and/or RE bits
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR3 register */
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 565              		.loc 1 474 0
 566 000e 8B43     		bic	r3, r1
 567 0010 0360     		str	r3, [r0]
 568              	.LVL72:
 569              	.L38:
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 570              		.loc 1 476 0
 571              		@ sp needed for prologue
 572 0012 00BD     		pop	{pc}
 573              		.cfi_endproc
 574              	.LFE39:
 576              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 577              		.align	1
 578              		.global	USART_OverSampling8Cmd
 579              		.code	16
 580              		.thumb_func
 582              	USART_OverSampling8Cmd:
 583              	.LFB40:
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         in order to have correct baudrate Divider value.
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 584              		.loc 1 491 0
 585              		.cfi_startproc
 586              	.LVL73:
 587 0000 00B5     		push	{lr}
 588              	.LCFI6:
 589              		.cfi_def_cfa_offset 4
 590              		.cfi_offset 14, -4
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 591              		.loc 1 499 0
 592 0002 0268     		ldr	r2, [r0]
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 593              		.loc 1 496 0
 594 0004 0029     		cmp	r1, #0
 595 0006 03D0     		beq	.L42
 596              		.loc 1 499 0
 597 0008 8023     		mov	r3, #128
 598 000a 1B02     		lsl	r3, r3, #8
 599 000c 1343     		orr	r3, r2
 600 000e 01E0     		b	.L44
 601              	.L42:
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 602              		.loc 1 504 0
 603 0010 014B     		ldr	r3, .L45
 604 0012 1340     		and	r3, r2
 605              	.L44:
 606 0014 0360     		str	r3, [r0]
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }  
 607              		.loc 1 506 0
 608              		@ sp needed for prologue
 609 0016 00BD     		pop	{pc}
 610              	.L46:
 611              		.align	2
 612              	.L45:
 613 0018 FF7FFFFF 		.word	-32769
 614              		.cfi_endproc
 615              	.LFE40:
 617              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 618              		.align	1
 619              		.global	USART_OneBitMethodCmd
 620              		.code	16
 621              		.thumb_func
 623              	USART_OneBitMethodCmd:
 624              	.LFB41:
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 625              		.loc 1 520 0
 626              		.cfi_startproc
 627              	.LVL74:
 628 0000 00B5     		push	{lr}
 629              	.LCFI7:
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 14, -4
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 632              		.loc 1 528 0
 633 0002 8268     		ldr	r2, [r0, #8]
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 634              		.loc 1 525 0
 635 0004 0029     		cmp	r1, #0
 636 0006 03D0     		beq	.L48
 637              		.loc 1 528 0
 638 0008 8023     		mov	r3, #128
 639 000a 1B01     		lsl	r3, r3, #4
 640 000c 1343     		orr	r3, r2
 641 000e 01E0     		b	.L50
 642              	.L48:
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 643              		.loc 1 533 0
 644 0010 014B     		ldr	r3, .L51
 645 0012 1340     		and	r3, r2
 646              	.L50:
 647 0014 8360     		str	r3, [r0, #8]
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 648              		.loc 1 535 0
 649              		@ sp needed for prologue
 650 0016 00BD     		pop	{pc}
 651              	.L52:
 652              		.align	2
 653              	.L51:
 654 0018 FFF7FFFF 		.word	-2049
 655              		.cfi_endproc
 656              	.LFE41:
 658              		.section	.text.USART_MSBFirstCmd,"ax",%progbits
 659              		.align	1
 660              		.global	USART_MSBFirstCmd
 661              		.code	16
 662              		.thumb_func
 664              	USART_MSBFirstCmd:
 665              	.LFB42:
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's most significant bit first 
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART most significant bit first
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 666              		.loc 1 551 0
 667              		.cfi_startproc
 668              	.LVL75:
 669 0000 00B5     		push	{lr}
 670              	.LCFI8:
 671              		.cfi_def_cfa_offset 4
 672              		.cfi_offset 14, -4
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the most significant bit first transmitted/received following the 
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by setting the MSBFIRST bit in the CR2 register */
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_MSBFIRST;
 673              		.loc 1 560 0
 674 0002 4268     		ldr	r2, [r0, #4]
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 675              		.loc 1 556 0
 676 0004 0029     		cmp	r1, #0
 677 0006 03D0     		beq	.L54
 678              		.loc 1 560 0
 679 0008 8023     		mov	r3, #128
 680 000a 1B03     		lsl	r3, r3, #12
 681 000c 1343     		orr	r3, r2
 682 000e 01E0     		b	.L56
 683              	.L54:
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the most significant bit first transmitted/received following the 
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by clearing the MSBFIRST bit in the CR2 register */
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 684              		.loc 1 566 0
 685 0010 014B     		ldr	r3, .L57
 686 0012 1340     		and	r3, r2
 687              	.L56:
 688 0014 4360     		str	r3, [r0, #4]
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 689              		.loc 1 568 0
 690              		@ sp needed for prologue
 691 0016 00BD     		pop	{pc}
 692              	.L58:
 693              		.align	2
 694              	.L57:
 695 0018 FFFFF7FF 		.word	-524289
 696              		.cfi_endproc
 697              	.LFE42:
 699              		.section	.text.USART_DataInvCmd,"ax",%progbits
 700              		.align	1
 701              		.global	USART_DataInvCmd
 702              		.code	16
 703              		.thumb_func
 705              	USART_DataInvCmd:
 706              	.LFB43:
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the binary data inversion.
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new defined levels for the USART data.
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be:
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg ENABLE: Logical data from the data register are send/received in negative
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                          logic (1=L, 0=H). The parity bit is also inverted.
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg DISABLE: Logical data from the data register are send/received in positive
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                          logic (1=H, 0=L) 
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 707              		.loc 1 586 0
 708              		.cfi_startproc
 709              	.LVL76:
 710 0000 00B5     		push	{lr}
 711              	.LCFI9:
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 14, -4
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the binary data inversion feature by setting the DATAINV bit in 
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_DATAINV;
 714              		.loc 1 595 0
 715 0002 4268     		ldr	r2, [r0, #4]
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 716              		.loc 1 591 0
 717 0004 0029     		cmp	r1, #0
 718 0006 03D0     		beq	.L60
 719              		.loc 1 595 0
 720 0008 8023     		mov	r3, #128
 721 000a DB02     		lsl	r3, r3, #11
 722 000c 1343     		orr	r3, r2
 723 000e 01E0     		b	.L62
 724              	.L60:
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the binary data inversion feature by clearing the DATAINV bit in 
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 725              		.loc 1 601 0
 726 0010 014B     		ldr	r3, .L63
 727 0012 1340     		and	r3, r2
 728              	.L62:
 729 0014 4360     		str	r3, [r0, #4]
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 730              		.loc 1 603 0
 731              		@ sp needed for prologue
 732 0016 00BD     		pop	{pc}
 733              	.L64:
 734              		.align	2
 735              	.L63:
 736 0018 FFFFFBFF 		.word	-262145
 737              		.cfi_endproc
 738              	.LFE43:
 740              		.section	.text.USART_InvPinCmd,"ax",%progbits
 741              		.align	1
 742              		.global	USART_InvPinCmd
 743              		.code	16
 744              		.thumb_func
 746              	USART_InvPinCmd:
 747              	.LFB44:
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Pin(s) active level inversion.
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InvPin: specifies the USART pin(s) to invert.
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_InvPin_Tx: USART Tx pin active level inversion.
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_InvPin_Rx: USART Rx pin active level inversion.
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new active level status for the USART pin(s).
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be:
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg ENABLE: pin(s) signal values are inverted (Vdd =0, Gnd =1).
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 748              		.loc 1 623 0
 749              		.cfi_startproc
 750              	.LVL77:
 751 0000 00B5     		push	{lr}
 752              	.LCFI10:
 753              		.cfi_def_cfa_offset 4
 754              		.cfi_offset 14, -4
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the active level inversion for selected pins by setting the TXINV 
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        and/or RXINV bits in the USART CR2 register */
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_InvPin;
 755              		.loc 1 633 0
 756 0002 4368     		ldr	r3, [r0, #4]
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 757              		.loc 1 629 0
 758 0004 002A     		cmp	r2, #0
 759 0006 02D0     		beq	.L66
 760              		.loc 1 633 0
 761 0008 1943     		orr	r1, r3
 762              	.LVL78:
 763 000a 4160     		str	r1, [r0, #4]
 764 000c 01E0     		b	.L65
 765              	.LVL79:
 766              	.L66:
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the active level inversion for selected requests by clearing the 
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        TXINV and/or RXINV bits in the USART CR2 register */
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~USART_InvPin;
 767              		.loc 1 639 0
 768 000e 8B43     		bic	r3, r1
 769 0010 4360     		str	r3, [r0, #4]
 770              	.LVL80:
 771              	.L65:
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 772              		.loc 1 641 0
 773              		@ sp needed for prologue
 774 0012 00BD     		pop	{pc}
 775              		.cfi_endproc
 776              	.LFE44:
 778              		.section	.text.USART_SWAPPinCmd,"ax",%progbits
 779              		.align	1
 780              		.global	USART_SWAPPinCmd
 781              		.code	16
 782              		.thumb_func
 784              	USART_SWAPPinCmd:
 785              	.LFB45:
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the swap Tx/Rx pins.
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx TX/RX pins pinout.
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be:
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg ENABLE: The TX and RX pins functions are swapped.
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg DISABLE: TX/RX pins are used as defined in standard pinout
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 786              		.loc 1 657 0
 787              		.cfi_startproc
 788              	.LVL81:
 789 0000 00B5     		push	{lr}
 790              	.LCFI11:
 791              		.cfi_def_cfa_offset 4
 792              		.cfi_offset 14, -4
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_SWAP;
 793              		.loc 1 665 0
 794 0002 4268     		ldr	r2, [r0, #4]
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 795              		.loc 1 662 0
 796 0004 0029     		cmp	r1, #0
 797 0006 03D0     		beq	.L69
 798              		.loc 1 665 0
 799 0008 8023     		mov	r3, #128
 800 000a 1B02     		lsl	r3, r3, #8
 801 000c 1343     		orr	r3, r2
 802 000e 01E0     		b	.L71
 803              	.L69:
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 804              		.loc 1 670 0
 805 0010 014B     		ldr	r3, .L72
 806 0012 1340     		and	r3, r2
 807              	.L71:
 808 0014 4360     		str	r3, [r0, #4]
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 809              		.loc 1 672 0
 810              		@ sp needed for prologue
 811 0016 00BD     		pop	{pc}
 812              	.L73:
 813              		.align	2
 814              	.L72:
 815 0018 FF7FFFFF 		.word	-32769
 816              		.cfi_endproc
 817              	.LFE45:
 819              		.section	.text.USART_ReceiverTimeOutCmd,"ax",%progbits
 820              		.align	1
 821              		.global	USART_ReceiverTimeOutCmd
 822              		.code	16
 823              		.thumb_func
 825              	USART_ReceiverTimeOutCmd:
 826              	.LFB46:
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the receiver Time Out feature.
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx receiver Time Out.
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 827              		.loc 1 684 0
 828              		.cfi_startproc
 829              	.LVL82:
 830 0000 00B5     		push	{lr}
 831              	.LCFI12:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 14, -4
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_RTOEN;
 834              		.loc 1 693 0
 835 0002 4268     		ldr	r2, [r0, #4]
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 836              		.loc 1 689 0
 837 0004 0029     		cmp	r1, #0
 838 0006 03D0     		beq	.L75
 839              		.loc 1 693 0
 840 0008 8023     		mov	r3, #128
 841 000a 1B04     		lsl	r3, r3, #16
 842 000c 1343     		orr	r3, r2
 843 000e 01E0     		b	.L77
 844              	.L75:
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 845              		.loc 1 699 0
 846 0010 014B     		ldr	r3, .L78
 847 0012 1340     		and	r3, r2
 848              	.L77:
 849 0014 4360     		str	r3, [r0, #4]
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 850              		.loc 1 701 0
 851              		@ sp needed for prologue
 852 0016 00BD     		pop	{pc}
 853              	.L79:
 854              		.align	2
 855              	.L78:
 856 0018 FFFF7FFF 		.word	-8388609
 857              		.cfi_endproc
 858              	.LFE46:
 860              		.section	.text.USART_SetReceiverTimeOut,"ax",%progbits
 861              		.align	1
 862              		.global	USART_SetReceiverTimeOut
 863              		.code	16
 864              		.thumb_func
 866              	USART_SetReceiverTimeOut:
 867              	.LFB47:
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the receiver Time Out value.
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.   
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 868              		.loc 1 712 0
 869              		.cfi_startproc
 870              	.LVL83:
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 871              		.loc 1 719 0
 872 0000 4369     		ldr	r3, [r0, #20]
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= USART_ReceiverTimeOut;
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 873              		.loc 1 723 0
 874              		@ sp needed for prologue
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 875              		.loc 1 719 0
 876 0002 1B0E     		lsr	r3, r3, #24
 877 0004 1B06     		lsl	r3, r3, #24
 878 0006 4361     		str	r3, [r0, #20]
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= USART_ReceiverTimeOut;
 879              		.loc 1 722 0
 880 0008 4369     		ldr	r3, [r0, #20]
 881 000a 1943     		orr	r1, r3
 882              	.LVL84:
 883 000c 4161     		str	r1, [r0, #20]
 884              		.loc 1 723 0
 885 000e 7047     		bx	lr
 886              		.cfi_endproc
 887              	.LFE47:
 889              		.section	.text.USART_SetPrescaler,"ax",%progbits
 890              		.align	1
 891              		.global	USART_SetPrescaler
 892              		.code	16
 893              		.thumb_func
 895              	USART_SetPrescaler:
 896              	.LFB48:
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the system clock prescaler.
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.    
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.    
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** { 
 897              		.loc 1 736 0
 898              		.cfi_startproc
 899              	.LVL85:
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART prescaler */
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 900              		.loc 1 741 0
 901 0000 038A     		ldrh	r3, [r0, #16]
 902 0002 FF22     		mov	r2, #255
 903 0004 9343     		bic	r3, r2
 904 0006 0382     		strh	r3, [r0, #16]
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART prescaler */
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 905              		.loc 1 743 0
 906 0008 038A     		ldrh	r3, [r0, #16]
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 907              		.loc 1 744 0
 908              		@ sp needed for prologue
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 909              		.loc 1 743 0
 910 000a 1943     		orr	r1, r3
 911              	.LVL86:
 912 000c 0182     		strh	r1, [r0, #16]
 913              		.loc 1 744 0
 914 000e 7047     		bx	lr
 915              		.cfi_endproc
 916              	.LFE48:
 918              		.section	.text.USART_STOPModeCmd,"ax",%progbits
 919              		.align	1
 920              		.global	USART_STOPModeCmd
 921              		.code	16
 922              		.thumb_func
 924              	USART_STOPModeCmd:
 925              	.LFB49:
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group2 STOP Mode functions
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   STOP Mode functions
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### STOP Mode functions #####
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          WakeUp from STOP mode.
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART is able to WakeUp from Stop Mode if USART clock is set to HSI
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          or LSI.
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The WakeUp source is configured by calling USART_StopModeWakeUpSourceConfig()
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function.
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] After configuring the source of WakeUp and before entering in Stop Mode 
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_STOPModeCmd() function should be called to allow USART WakeUp.
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                            
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral in STOP Mode.
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3  to select the USART peripheral.
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices.  
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.   
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral state in stop mode.
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called when USART clock is set to HSI or LSE. 
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 926              		.loc 1 785 0
 927              		.cfi_startproc
 928              	.LVL87:
 929 0000 00B5     		push	{lr}
 930              	.LCFI13:
 931              		.cfi_def_cfa_offset 4
 932              		.cfi_offset 14, -4
 933 0002 0223     		mov	r3, #2
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UESM;
 934              		.loc 1 794 0
 935 0004 0268     		ldr	r2, [r0]
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 936              		.loc 1 790 0
 937 0006 0029     		cmp	r1, #0
 938 0008 01D0     		beq	.L83
 939              		.loc 1 794 0
 940 000a 1343     		orr	r3, r2
 941 000c 01E0     		b	.L85
 942              	.L83:
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 943              		.loc 1 800 0
 944 000e 9A43     		bic	r2, r3
 945 0010 131C     		mov	r3, r2
 946              	.L85:
 947 0012 0360     		str	r3, [r0]
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 948              		.loc 1 802 0
 949              		@ sp needed for prologue
 950 0014 00BD     		pop	{pc}
 951              		.cfi_endproc
 952              	.LFE49:
 954              		.section	.text.USART_StopModeWakeUpSourceConfig,"ax",%progbits
 955              		.align	1
 956              		.global	USART_StopModeWakeUpSourceConfig
 957              		.code	16
 958              		.thumb_func
 960              	USART_StopModeWakeUpSourceConfig:
 961              	.LFB50:
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method form stop mode.
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.   
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.     
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the selected USART wakeup method.
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUpSource_AddressMatch: WUF active on address match.
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUpSource_StartBit: WUF active on Start bit detection.
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUpSource_RXNE: WUF active on RXNE.
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.   
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 962              		.loc 1 819 0
 963              		.cfi_startproc
 964              	.LVL88:
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 965              		.loc 1 824 0
 966 0000 8268     		ldr	r2, [r0, #8]
 967 0002 034B     		ldr	r3, .L87
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_WakeUpSource;
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 968              		.loc 1 826 0
 969              		@ sp needed for prologue
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 970              		.loc 1 824 0
 971 0004 1340     		and	r3, r2
 972 0006 8360     		str	r3, [r0, #8]
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_WakeUpSource;
 973              		.loc 1 825 0
 974 0008 8368     		ldr	r3, [r0, #8]
 975 000a 1943     		orr	r1, r3
 976              	.LVL89:
 977 000c 8160     		str	r1, [r0, #8]
 978              		.loc 1 826 0
 979 000e 7047     		bx	lr
 980              	.L88:
 981              		.align	2
 982              	.L87:
 983 0010 FFFFCFFF 		.word	-3145729
 984              		.cfi_endproc
 985              	.LFE50:
 987              		.section	.text.USART_AutoBaudRateCmd,"ax",%progbits
 988              		.align	1
 989              		.global	USART_AutoBaudRateCmd
 990              		.code	16
 991              		.thumb_func
 993              	USART_AutoBaudRateCmd:
 994              	.LFB51:
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group3 AutoBaudRate functions
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   AutoBaudRate functions 
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### AutoBaudRate functions #####
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the AutoBaudRate detections.
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Before Enabling AutoBaudRate detection using USART_AutoBaudRateCmd ()
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The character patterns used to calculate baudrate must be chosen by calling 
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_AutoBaudRateConfig() function. These function take as parameter :
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_StartBit : any character starting with a bit 1.
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_FallingEdge : any character starting with a 10xx bit pattern. 
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                           
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] At any later time, another request for AutoBaudRate detection can be performed
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          using USART_RequestCmd() function.
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The AutoBaudRate detection is monitored by the status of ABRF flag which indicate
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          that the AutoBaudRate detection is completed. In addition to ABRF flag, the ABRE flag
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          indicate that this procedure is completed without success. USART_GetFlagStatus () 
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function should be used to monitor the status of these flags.  
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Auto Baud Rate.
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx auto baud rate.
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 995              		.loc 1 871 0
 996              		.cfi_startproc
 997              	.LVL90:
 998 0000 00B5     		push	{lr}
 999              	.LCFI14:
 1000              		.cfi_def_cfa_offset 4
 1001              		.cfi_offset 14, -4
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_ABREN;
 1002              		.loc 1 880 0
 1003 0002 4268     		ldr	r2, [r0, #4]
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1004              		.loc 1 876 0
 1005 0004 0029     		cmp	r1, #0
 1006 0006 03D0     		beq	.L90
 1007              		.loc 1 880 0
 1008 0008 8023     		mov	r3, #128
 1009 000a 5B03     		lsl	r3, r3, #13
 1010 000c 1343     		orr	r3, r2
 1011 000e 01E0     		b	.L92
 1012              	.L90:
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 1013              		.loc 1 886 0
 1014 0010 014B     		ldr	r3, .L93
 1015 0012 1340     		and	r3, r2
 1016              	.L92:
 1017 0014 4360     		str	r3, [r0, #4]
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1018              		.loc 1 888 0
 1019              		@ sp needed for prologue
 1020 0016 00BD     		pop	{pc}
 1021              	.L94:
 1022              		.align	2
 1023              	.L93:
 1024 0018 FFFFEFFF 		.word	-1048577
 1025              		.cfi_endproc
 1026              	.LFE51:
 1028              		.section	.text.USART_AutoBaudRateConfig,"ax",%progbits
 1029              		.align	1
 1030              		.global	USART_AutoBaudRateConfig
 1031              		.code	16
 1032              		.thumb_func
 1034              	USART_AutoBaudRateConfig:
 1035              	.LFB52:
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART auto baud rate method.
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoBaudRate: specifies the selected USART auto baud rate method.
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AutoBaudRate_StartBit: Start Bit duration measurement.
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AutoBaudRate_FallingEdge: Falling edge to falling edge measurement.
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1036              		.loc 1 903 0
 1037              		.cfi_startproc
 1038              	.LVL91:
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 1039              		.loc 1 908 0
 1040 0000 4268     		ldr	r2, [r0, #4]
 1041 0002 034B     		ldr	r3, .L96
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AutoBaudRate;
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1042              		.loc 1 910 0
 1043              		@ sp needed for prologue
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 1044              		.loc 1 908 0
 1045 0004 1340     		and	r3, r2
 1046 0006 4360     		str	r3, [r0, #4]
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AutoBaudRate;
 1047              		.loc 1 909 0
 1048 0008 4368     		ldr	r3, [r0, #4]
 1049 000a 1943     		orr	r1, r3
 1050              	.LVL92:
 1051 000c 4160     		str	r1, [r0, #4]
 1052              		.loc 1 910 0
 1053 000e 7047     		bx	lr
 1054              	.L97:
 1055              		.align	2
 1056              	.L96:
 1057 0010 FFFF9FFF 		.word	-6291457
 1058              		.cfi_endproc
 1059              	.LFE52:
 1061              		.section	.text.USART_SendData,"ax",%progbits
 1062              		.align	1
 1063              		.global	USART_SendData
 1064              		.code	16
 1065              		.thumb_func
 1067              	USART_SendData:
 1068              	.LFB53:
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group4 Data transfers functions
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Data transfers functions 
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                     ##### Data transfers functions #####
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART data transfers.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] During an USART reception, data shifts in least significant bit first 
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          through the RX pin. When a transmission is taking place, a write instruction to 
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_TDR register stores the data in the shift register.
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The read access of the USART_RDR register can be done using 
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_ReceiveData() function and returns the RDR value.
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Whereas a write access to the USART_TDR can be done using USART_SendData()
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function and stores the written data into TDR.
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  Data: the data to transmit.
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1069              		.loc 1 948 0
 1070              		.cfi_startproc
 1071              	.LVL93:
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Transmit Data */
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->TDR = (Data & (uint16_t)0x01FF);
 1072              		.loc 1 954 0
 1073 0000 C905     		lsl	r1, r1, #23
 1074              	.LVL94:
 1075 0002 C90D     		lsr	r1, r1, #23
 1076 0004 0185     		strh	r1, [r0, #40]
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1077              		.loc 1 955 0
 1078              		@ sp needed for prologue
 1079 0006 7047     		bx	lr
 1080              		.cfi_endproc
 1081              	.LFE53:
 1083              		.section	.text.USART_ReceiveData,"ax",%progbits
 1084              		.align	1
 1085              		.global	USART_ReceiveData
 1086              		.code	16
 1087              		.thumb_func
 1089              	USART_ReceiveData:
 1090              	.LFB54:
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The received data.
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1091              		.loc 1 966 0
 1092              		.cfi_startproc
 1093              	.LVL95:
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Receive Data */
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 1094              		.loc 1 971 0
 1095 0000 808C     		ldrh	r0, [r0, #36]
 1096              	.LVL96:
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1097              		.loc 1 972 0
 1098              		@ sp needed for prologue
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 1099              		.loc 1 971 0
 1100 0002 C005     		lsl	r0, r0, #23
 1101 0004 C00D     		lsr	r0, r0, #23
 1102              		.loc 1 972 0
 1103 0006 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE54:
 1107              		.section	.text.USART_SetAddress,"ax",%progbits
 1108              		.align	1
 1109              		.global	USART_SetAddress
 1110              		.code	16
 1111              		.thumb_func
 1113              	USART_SetAddress:
 1114              	.LFB55:
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group5 MultiProcessor Communication functions
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              ##### Multi-Processor Communication functions #####
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          multiprocessor communication.
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] For instance one of the USARTs can be the master, its TX output is
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          connected to the RX input of the other USART. The others are slaves,
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          their respective TX outputs are logically ANDed together and connected 
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          to the RX input of the master. USART multiprocessor communication is 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          possible through the following procedure:
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, 
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the wake up methode (USART_WakeUp_IdleLine or 
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              USART_WakeUp_AddressMark) using USART_WakeUpConfig() function only 
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              for the slaves.
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() 
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART Slave exit from mute mode when receive the wake up condition.
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the address of the USART node.
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1115              		.loc 1 1018 0
 1116              		.cfi_startproc
 1117              	.LVL97:
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART address */
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 1118              		.loc 1 1023 0
 1119 0000 4368     		ldr	r3, [r0, #4]
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART address node */
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 1120              		.loc 1 1025 0
 1121 0002 0906     		lsl	r1, r1, #24
 1122              	.LVL98:
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 1123              		.loc 1 1023 0
 1124 0004 1B02     		lsl	r3, r3, #8
 1125 0006 1B0A     		lsr	r3, r3, #8
 1126 0008 4360     		str	r3, [r0, #4]
 1127              		.loc 1 1025 0
 1128 000a 4368     		ldr	r3, [r0, #4]
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1129              		.loc 1 1026 0
 1130              		@ sp needed for prologue
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 1131              		.loc 1 1025 0
 1132 000c 1943     		orr	r1, r3
 1133 000e 4160     		str	r1, [r0, #4]
 1134              		.loc 1 1026 0
 1135 0010 7047     		bx	lr
 1136              		.cfi_endproc
 1137              	.LFE55:
 1139              		.section	.text.USART_MuteModeCmd,"ax",%progbits
 1140              		.align	1
 1141              		.global	USART_MuteModeCmd
 1142              		.code	16
 1143              		.thumb_func
 1145              	USART_MuteModeCmd:
 1146              	.LFB56:
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's mute mode.
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1147              		.loc 1 1039 0
 1148              		.cfi_startproc
 1149              	.LVL99:
 1150 0000 00B5     		push	{lr}
 1151              	.LCFI15:
 1152              		.cfi_def_cfa_offset 4
 1153              		.cfi_offset 14, -4
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART mute mode by setting the MME bit in the CR1 register */
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_MME;
 1154              		.loc 1 1047 0
 1155 0002 0268     		ldr	r2, [r0]
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1156              		.loc 1 1044 0
 1157 0004 0029     		cmp	r1, #0
 1158 0006 03D0     		beq	.L102
 1159              		.loc 1 1047 0
 1160 0008 8023     		mov	r3, #128
 1161 000a 9B01     		lsl	r3, r3, #6
 1162 000c 1343     		orr	r3, r2
 1163 000e 01E0     		b	.L104
 1164              	.L102:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 1165              		.loc 1 1052 0
 1166 0010 014B     		ldr	r3, .L105
 1167 0012 1340     		and	r3, r2
 1168              	.L104:
 1169 0014 0360     		str	r3, [r0]
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1170              		.loc 1 1054 0
 1171              		@ sp needed for prologue
 1172 0016 00BD     		pop	{pc}
 1173              	.L106:
 1174              		.align	2
 1175              	.L105:
 1176 0018 FFDFFFFF 		.word	-8193
 1177              		.cfi_endproc
 1178              	.LFE56:
 1180              		.section	.text.USART_MuteModeWakeUpConfig,"ax",%progbits
 1181              		.align	1
 1182              		.global	USART_MuteModeWakeUpConfig
 1183              		.code	16
 1184              		.thumb_func
 1186              	USART_MuteModeWakeUpConfig:
 1187              	.LFB57:
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method from mute mode.
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1188              		.loc 1 1069 0
 1189              		.cfi_startproc
 1190              	.LVL100:
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 1191              		.loc 1 1074 0
 1192 0000 0268     		ldr	r2, [r0]
 1193 0002 034B     		ldr	r3, .L108
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1194              		.loc 1 1076 0
 1195              		@ sp needed for prologue
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 1196              		.loc 1 1074 0
 1197 0004 1340     		and	r3, r2
 1198 0006 0360     		str	r3, [r0]
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1199              		.loc 1 1075 0
 1200 0008 0368     		ldr	r3, [r0]
 1201 000a 1943     		orr	r1, r3
 1202              	.LVL101:
 1203 000c 0160     		str	r1, [r0]
 1204              		.loc 1 1076 0
 1205 000e 7047     		bx	lr
 1206              	.L109:
 1207              		.align	2
 1208              	.L108:
 1209 0010 FFF7FFFF 		.word	-2049
 1210              		.cfi_endproc
 1211              	.LFE57:
 1213              		.section	.text.USART_AddressDetectionConfig,"ax",%progbits
 1214              		.align	1
 1215              		.global	USART_AddressDetectionConfig
 1216              		.code	16
 1217              		.thumb_func
 1219              	USART_AddressDetectionConfig:
 1220              	.LFB58:
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configure the the USART Address detection length.
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AddressLength: specifies the USART address length detection.
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AddressLength_4b: 4-bit address length detection 
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AddressLength_7b: 7-bit address length detection 
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1221              		.loc 1 1091 0
 1222              		.cfi_startproc
 1223              	.LVL102:
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 1224              		.loc 1 1096 0
 1225 0000 4368     		ldr	r3, [r0, #4]
 1226 0002 1022     		mov	r2, #16
 1227 0004 9343     		bic	r3, r2
 1228 0006 4360     		str	r3, [r0, #4]
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AddressLength;
 1229              		.loc 1 1097 0
 1230 0008 4368     		ldr	r3, [r0, #4]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1231              		.loc 1 1098 0
 1232              		@ sp needed for prologue
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AddressLength;
 1233              		.loc 1 1097 0
 1234 000a 1943     		orr	r1, r3
 1235              	.LVL103:
 1236 000c 4160     		str	r1, [r0, #4]
 1237              		.loc 1 1098 0
 1238 000e 7047     		bx	lr
 1239              		.cfi_endproc
 1240              	.LFE58:
 1242              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1243              		.align	1
 1244              		.global	USART_LINBreakDetectLengthConfig
 1245              		.code	16
 1246              		.thumb_func
 1248              	USART_LINBreakDetectLengthConfig:
 1249              	.LFB59:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group6 LIN mode functions
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   LIN mode functions 
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### LIN mode functions #####
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART 
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          LIN Mode communication.
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In LIN mode, 8-bit data format with 1 stop bit is required in accordance 
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          with the LIN standard.
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Only this LIN Feature is supported by the USART IP:
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) LIN Master Synchronous Break send capability and LIN slave break 
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection capability :  13-bit break generation and 10/11 bit break 
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection.
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master transmitter communication is possible through the 
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Send the break character using USART_SendBreak() function.
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master receiver communication is possible through the 
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the break detection length 
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_LINBreakDetectLengthConfig() function.
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In LIN mode, the following bits must be kept cleared:
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) CLKEN in the USART_CR2 register.
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1250              		.loc 1 1157 0
 1251              		.cfi_startproc
 1252              	.LVL104:
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 1253              		.loc 1 1162 0
 1254 0000 4368     		ldr	r3, [r0, #4]
 1255 0002 2022     		mov	r2, #32
 1256 0004 9343     		bic	r3, r2
 1257 0006 4360     		str	r3, [r0, #4]
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1258              		.loc 1 1163 0
 1259 0008 4368     		ldr	r3, [r0, #4]
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1260              		.loc 1 1164 0
 1261              		@ sp needed for prologue
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1262              		.loc 1 1163 0
 1263 000a 1943     		orr	r1, r3
 1264              	.LVL105:
 1265 000c 4160     		str	r1, [r0, #4]
 1266              		.loc 1 1164 0
 1267 000e 7047     		bx	lr
 1268              		.cfi_endproc
 1269              	.LFE59:
 1271              		.section	.text.USART_LINCmd,"ax",%progbits
 1272              		.align	1
 1273              		.global	USART_LINCmd
 1274              		.code	16
 1275              		.thumb_func
 1277              	USART_LINCmd:
 1278              	.LFB60:
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1279              		.loc 1 1177 0
 1280              		.cfi_startproc
 1281              	.LVL106:
 1282 0000 00B5     		push	{lr}
 1283              	.LCFI16:
 1284              		.cfi_def_cfa_offset 4
 1285              		.cfi_offset 14, -4
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1286              		.loc 1 1185 0
 1287 0002 4268     		ldr	r2, [r0, #4]
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1288              		.loc 1 1182 0
 1289 0004 0029     		cmp	r1, #0
 1290 0006 03D0     		beq	.L113
 1291              		.loc 1 1185 0
 1292 0008 8023     		mov	r3, #128
 1293 000a DB01     		lsl	r3, r3, #7
 1294 000c 1343     		orr	r3, r2
 1295 000e 01E0     		b	.L115
 1296              	.L113:
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 1297              		.loc 1 1190 0
 1298 0010 014B     		ldr	r3, .L116
 1299 0012 1340     		and	r3, r2
 1300              	.L115:
 1301 0014 4360     		str	r3, [r0, #4]
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1302              		.loc 1 1192 0
 1303              		@ sp needed for prologue
 1304 0016 00BD     		pop	{pc}
 1305              	.L117:
 1306              		.align	2
 1307              	.L116:
 1308 0018 FFBFFFFF 		.word	-16385
 1309              		.cfi_endproc
 1310              	.LFE60:
 1312              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1313              		.align	1
 1314              		.global	USART_HalfDuplexCmd
 1315              		.code	16
 1316              		.thumb_func
 1318              	USART_HalfDuplexCmd:
 1319              	.LFB61:
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group7 Halfduplex mode function
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Half-duplex mode function 
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                    ##### Half-duplex mode function #####
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Half-duplex communication.
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART can be configured to follow a single-wire half-duplex protocol 
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          where the TX and RX lines are internally connected.
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART Half duplex communication is possible through the following procedure:
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              or Mode receiver and hardware flow control values using the USART_Init()
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- The RX pin is no longer used.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In Half-duplex mode the following bits must be kept cleared:
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN and CLKEN bits in the USART_CR2 register.
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) SCEN and IREN bits in the USART_CR3 register.
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.    
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART Communication.
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1320              		.loc 1 1236 0
 1321              		.cfi_startproc
 1322              	.LVL107:
 1323 0000 00B5     		push	{lr}
 1324              	.LCFI17:
 1325              		.cfi_def_cfa_offset 4
 1326              		.cfi_offset 14, -4
 1327 0002 0823     		mov	r3, #8
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1328              		.loc 1 1244 0
 1329 0004 8268     		ldr	r2, [r0, #8]
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1330              		.loc 1 1241 0
 1331 0006 0029     		cmp	r1, #0
 1332 0008 01D0     		beq	.L119
 1333              		.loc 1 1244 0
 1334 000a 1343     		orr	r3, r2
 1335 000c 01E0     		b	.L121
 1336              	.L119:
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 1337              		.loc 1 1249 0
 1338 000e 9A43     		bic	r2, r3
 1339 0010 131C     		mov	r3, r2
 1340              	.L121:
 1341 0012 8360     		str	r3, [r0, #8]
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1342              		.loc 1 1251 0
 1343              		@ sp needed for prologue
 1344 0014 00BD     		pop	{pc}
 1345              		.cfi_endproc
 1346              	.LFE61:
 1348              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1349              		.align	1
 1350              		.global	USART_SetGuardTime
 1351              		.code	16
 1352              		.thumb_func
 1354              	USART_SetGuardTime:
 1355              	.LFB62:
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group8 Smartcard mode functions
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Smartcard mode functions 
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                      ##### Smartcard mode functions #####
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcard communication.
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The Smartcard interface is designed to support asynchronous protocol 
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcards as defined in the ISO 7816-3 standard. The USART can provide 
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          a clock to the smartcard through the SCLK output. In smartcard mode, 
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          SCLK is not associated to the communication but is simply derived from 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the internal peripheral input clock through a 5-bit prescaler.
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Smartcard communication is possible through the following procedure:
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Prsecaler using the USART_SetPrescaler() 
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() 
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the USART clock using the USART_ClockInit() function as following:
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Clock enabled.
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPOL Low.
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPHA on first edge.
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Last Bit Clock Enabled.
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Smartcard interface using the USART_Init() function as 
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              following:
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Word Length = 9 Bits.
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) 1.5 Stop Bit.
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Even parity.
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) BaudRate = 12096 baud.
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Hardware flow control disabled (RTS and CTS signals).
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Tx and Rx enabled
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Optionally you can enable the parity error interrupt using 
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_ITConfig() function.
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard interface using the USART_SmartCardCmd() function.
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) It is also possible to choose 0.5 stop bit for receiving but it is 
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              recommended to use 1.5 stop bits for both transmitting and receiving 
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              to avoid switching between the two configurations.
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) In smartcard mode, the following bits must be kept cleared:
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN bit in the USART_CR2 register.
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) HDSEL and IREN bits in the USART_CR3 register.
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified USART guard time.
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1356              		.loc 1 1319 0
 1357              		.cfi_startproc
 1358              	.LVL108:
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART Guard time */
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1359              		.loc 1 1324 0
 1360 0000 038A     		ldrh	r3, [r0, #16]
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART guard time */
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1361              		.loc 1 1326 0
 1362 0002 0902     		lsl	r1, r1, #8
 1363              	.LVL109:
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1364              		.loc 1 1324 0
 1365 0004 DBB2     		uxtb	r3, r3
 1366 0006 0382     		strh	r3, [r0, #16]
 1367              		.loc 1 1326 0
 1368 0008 038A     		ldrh	r3, [r0, #16]
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1369              		.loc 1 1327 0
 1370              		@ sp needed for prologue
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1371              		.loc 1 1326 0
 1372 000a 1943     		orr	r1, r3
 1373 000c 0182     		strh	r1, [r0, #16]
 1374              		.loc 1 1327 0
 1375 000e 7047     		bx	lr
 1376              		.cfi_endproc
 1377              	.LFE62:
 1379              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1380              		.align	1
 1381              		.global	USART_SmartCardCmd
 1382              		.code	16
 1383              		.thumb_func
 1385              	USART_SmartCardCmd:
 1386              	.LFB63:
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1387              		.loc 1 1340 0
 1388              		.cfi_startproc
 1389              	.LVL110:
 1390 0000 00B5     		push	{lr}
 1391              	.LCFI18:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 14, -4
 1394 0002 2023     		mov	r3, #32
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1395              		.loc 1 1347 0
 1396 0004 8268     		ldr	r2, [r0, #8]
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1397              		.loc 1 1344 0
 1398 0006 0029     		cmp	r1, #0
 1399 0008 01D0     		beq	.L124
 1400              		.loc 1 1347 0
 1401 000a 1343     		orr	r3, r2
 1402 000c 01E0     		b	.L126
 1403              	.L124:
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 1404              		.loc 1 1352 0
 1405 000e 9A43     		bic	r2, r3
 1406 0010 131C     		mov	r3, r2
 1407              	.L126:
 1408 0012 8360     		str	r3, [r0, #8]
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1409              		.loc 1 1354 0
 1410              		@ sp needed for prologue
 1411 0014 00BD     		pop	{pc}
 1412              		.cfi_endproc
 1413              	.LFE63:
 1415              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1416              		.align	1
 1417              		.global	USART_SmartCardNACKCmd
 1418              		.code	16
 1419              		.thumb_func
 1421              	USART_SmartCardNACKCmd:
 1422              	.LFB64:
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables NACK transmission.
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1423              		.loc 1 1367 0
 1424              		.cfi_startproc
 1425              	.LVL111:
 1426 0000 00B5     		push	{lr}
 1427              	.LCFI19:
 1428              		.cfi_def_cfa_offset 4
 1429              		.cfi_offset 14, -4
 1430 0002 1023     		mov	r3, #16
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx)); 
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1431              		.loc 1 1374 0
 1432 0004 8268     		ldr	r2, [r0, #8]
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1433              		.loc 1 1371 0
 1434 0006 0029     		cmp	r1, #0
 1435 0008 01D0     		beq	.L128
 1436              		.loc 1 1374 0
 1437 000a 1343     		orr	r3, r2
 1438 000c 01E0     		b	.L130
 1439              	.L128:
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 1440              		.loc 1 1379 0
 1441 000e 9A43     		bic	r2, r3
 1442 0010 131C     		mov	r3, r2
 1443              	.L130:
 1444 0012 8360     		str	r3, [r0, #8]
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1445              		.loc 1 1381 0
 1446              		@ sp needed for prologue
 1447 0014 00BD     		pop	{pc}
 1448              		.cfi_endproc
 1449              	.LFE64:
 1451              		.section	.text.USART_SetAutoRetryCount,"ax",%progbits
 1452              		.align	1
 1453              		.global	USART_SetAutoRetryCount
 1454              		.code	16
 1455              		.thumb_func
 1457              	USART_SetAutoRetryCount:
 1458              	.LFB65:
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card number of retries in transmit and receive.
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 3  to select the USART peripheral.
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoCount: specifies the Smart Card auto retry count.
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1459              		.loc 1 1393 0
 1460              		.cfi_startproc
 1461              	.LVL112:
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART auto retry count */
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 1462              		.loc 1 1398 0
 1463 0000 8268     		ldr	r2, [r0, #8]
 1464 0002 044B     		ldr	r3, .L132
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART auto retry count*/
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 1465              		.loc 1 1400 0
 1466 0004 4904     		lsl	r1, r1, #17
 1467              	.LVL113:
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 1468              		.loc 1 1398 0
 1469 0006 1340     		and	r3, r2
 1470 0008 8360     		str	r3, [r0, #8]
 1471              		.loc 1 1400 0
 1472 000a 8368     		ldr	r3, [r0, #8]
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1473              		.loc 1 1401 0
 1474              		@ sp needed for prologue
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 1475              		.loc 1 1400 0
 1476 000c 1943     		orr	r1, r3
 1477 000e 8160     		str	r1, [r0, #8]
 1478              		.loc 1 1401 0
 1479 0010 7047     		bx	lr
 1480              	.L133:
 1481 0012 C046     		.align	2
 1482              	.L132:
 1483 0014 FFFFF1FF 		.word	-917505
 1484              		.cfi_endproc
 1485              	.LFE65:
 1487              		.section	.text.USART_SetBlockLength,"ax",%progbits
 1488              		.align	1
 1489              		.global	USART_SetBlockLength
 1490              		.code	16
 1491              		.thumb_func
 1493              	USART_SetBlockLength:
 1494              	.LFB66:
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card Block length.
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 3  to select the USART peripheral.
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_BlockLength: specifies the Smart Card block length.
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1495              		.loc 1 1413 0
 1496              		.cfi_startproc
 1497              	.LVL114:
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the Smart card block length */
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 1498              		.loc 1 1418 0
 1499 0000 4369     		ldr	r3, [r0, #20]
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the Smart Card block length */
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 1500              		.loc 1 1420 0
 1501 0002 0906     		lsl	r1, r1, #24
 1502              	.LVL115:
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 1503              		.loc 1 1418 0
 1504 0004 1B02     		lsl	r3, r3, #8
 1505 0006 1B0A     		lsr	r3, r3, #8
 1506 0008 4361     		str	r3, [r0, #20]
 1507              		.loc 1 1420 0
 1508 000a 4369     		ldr	r3, [r0, #20]
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1509              		.loc 1 1421 0
 1510              		@ sp needed for prologue
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 1511              		.loc 1 1420 0
 1512 000c 1943     		orr	r1, r3
 1513 000e 4161     		str	r1, [r0, #20]
 1514              		.loc 1 1421 0
 1515 0010 7047     		bx	lr
 1516              		.cfi_endproc
 1517              	.LFE66:
 1519              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1520              		.align	1
 1521              		.global	USART_IrDAConfig
 1522              		.code	16
 1523              		.thumb_func
 1525              	USART_IrDAConfig:
 1526              	.LFB67:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group9 IrDA mode functions
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   IrDA mode functions 
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### IrDA mode functions #####
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          IrDA communication.
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA is a half duplex communication protocol. If the Transmitter is busy, 
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          any data on the IrDA receive line will be ignored by the IrDA decoder 
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          and if the Receiver is busy, data on the TX from the USART to IrDA will 
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          not be encoded by IrDA. While receiving data, transmission should be 
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          avoided as the data to be transmitted could be corrupted.
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA communication is possible through the following procedure:
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA pulse width by configuring the prescaler using  
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_SetPrescaler() function.
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal 
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              mode using the USART_IrDAConfig() function.
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the IrDA using the USART_IrDACmd() function.
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.         
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) A pulse of width less than two and greater than one PSC period(s) may or 
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         may not be rejected.
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) The receiver set up time should be managed by software. The IrDA physical 
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         layer specification specifies a minimum of 10 ms delay between 
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         transmission and reception (IrDA is a half duplex protocol).
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) In IrDA mode, the following bits must be kept cleared:
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1527              		.loc 1 1478 0
 1528              		.cfi_startproc
 1529              	.LVL116:
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 1530              		.loc 1 1483 0
 1531 0000 8368     		ldr	r3, [r0, #8]
 1532 0002 0422     		mov	r2, #4
 1533 0004 9343     		bic	r3, r2
 1534 0006 8360     		str	r3, [r0, #8]
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1535              		.loc 1 1484 0
 1536 0008 8368     		ldr	r3, [r0, #8]
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1537              		.loc 1 1485 0
 1538              		@ sp needed for prologue
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1539              		.loc 1 1484 0
 1540 000a 1943     		orr	r1, r3
 1541              	.LVL117:
 1542 000c 8160     		str	r1, [r0, #8]
 1543              		.loc 1 1485 0
 1544 000e 7047     		bx	lr
 1545              		.cfi_endproc
 1546              	.LFE67:
 1548              		.section	.text.USART_IrDACmd,"ax",%progbits
 1549              		.align	1
 1550              		.global	USART_IrDACmd
 1551              		.code	16
 1552              		.thumb_func
 1554              	USART_IrDACmd:
 1555              	.LFB68:
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1556              		.loc 1 1498 0
 1557              		.cfi_startproc
 1558              	.LVL118:
 1559 0000 00B5     		push	{lr}
 1560              	.LCFI20:
 1561              		.cfi_def_cfa_offset 4
 1562              		.cfi_offset 14, -4
 1563 0002 0223     		mov	r3, #2
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1564              		.loc 1 1506 0
 1565 0004 8268     		ldr	r2, [r0, #8]
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1566              		.loc 1 1503 0
 1567 0006 0029     		cmp	r1, #0
 1568 0008 01D0     		beq	.L137
 1569              		.loc 1 1506 0
 1570 000a 1343     		orr	r3, r2
 1571 000c 01E0     		b	.L139
 1572              	.L137:
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 1573              		.loc 1 1511 0
 1574 000e 9A43     		bic	r2, r3
 1575 0010 131C     		mov	r3, r2
 1576              	.L139:
 1577 0012 8360     		str	r3, [r0, #8]
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1578              		.loc 1 1513 0
 1579              		@ sp needed for prologue
 1580 0014 00BD     		pop	{pc}
 1581              		.cfi_endproc
 1582              	.LFE68:
 1584              		.section	.text.USART_DECmd,"ax",%progbits
 1585              		.align	1
 1586              		.global	USART_DECmd
 1587              		.code	16
 1588              		.thumb_func
 1590              	USART_DECmd:
 1591              	.LFB69:
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group10 RS485 mode function
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief  RS485 mode function 
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim  
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### RS485 mode functions #####
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          RS485 flow control.
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] RS485 flow control (Driver enable feature) handling is possible through
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the following procedure:
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Driver Enable using the USART_DECmd() function.
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable polarity using the USART_DEPolarityConfig()
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable assertion time using USART_SetDEAssertionTime() 
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function and deassertion time using the USART_SetDEDeassertionTime()
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.    
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       -@-  
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        (+@) The assertion and dessertion times are expressed in sample time units (1/8 or 
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             1/16 bit time, depending on the oversampling rate).
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DE functionality.
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the driver enable mode.
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1592              		.loc 1 1558 0
 1593              		.cfi_startproc
 1594              	.LVL119:
 1595 0000 00B5     		push	{lr}
 1596              	.LCFI21:
 1597              		.cfi_def_cfa_offset 4
 1598              		.cfi_offset 14, -4
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DE functionality by setting the DEM bit in the CR3 register */
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_DEM;
 1599              		.loc 1 1565 0
 1600 0002 8268     		ldr	r2, [r0, #8]
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1601              		.loc 1 1562 0
 1602 0004 0029     		cmp	r1, #0
 1603 0006 03D0     		beq	.L141
 1604              		.loc 1 1565 0
 1605 0008 8023     		mov	r3, #128
 1606 000a DB01     		lsl	r3, r3, #7
 1607 000c 1343     		orr	r3, r2
 1608 000e 01E0     		b	.L143
 1609              	.L141:
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 1610              		.loc 1 1570 0
 1611 0010 014B     		ldr	r3, .L144
 1612 0012 1340     		and	r3, r2
 1613              	.L143:
 1614 0014 8360     		str	r3, [r0, #8]
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1615              		.loc 1 1572 0
 1616              		@ sp needed for prologue
 1617 0016 00BD     		pop	{pc}
 1618              	.L145:
 1619              		.align	2
 1620              	.L144:
 1621 0018 FFBFFFFF 		.word	-16385
 1622              		.cfi_endproc
 1623              	.LFE69:
 1625              		.section	.text.USART_DEPolarityConfig,"ax",%progbits
 1626              		.align	1
 1627              		.global	USART_DEPolarityConfig
 1628              		.code	16
 1629              		.thumb_func
 1631              	USART_DEPolarityConfig:
 1632              	.LFB70:
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's DE polarity
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DEPolarity: specifies the DE polarity.
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DEPolarity_Low
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DEPolarity_High
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1633              		.loc 1 1587 0
 1634              		.cfi_startproc
 1635              	.LVL120:
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 1636              		.loc 1 1592 0
 1637 0000 8268     		ldr	r2, [r0, #8]
 1638 0002 034B     		ldr	r3, .L147
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DEPolarity;
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1639              		.loc 1 1594 0
 1640              		@ sp needed for prologue
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 1641              		.loc 1 1592 0
 1642 0004 1340     		and	r3, r2
 1643 0006 8360     		str	r3, [r0, #8]
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DEPolarity;
 1644              		.loc 1 1593 0
 1645 0008 8368     		ldr	r3, [r0, #8]
 1646 000a 1943     		orr	r1, r3
 1647              	.LVL121:
 1648 000c 8160     		str	r1, [r0, #8]
 1649              		.loc 1 1594 0
 1650 000e 7047     		bx	lr
 1651              	.L148:
 1652              		.align	2
 1653              	.L147:
 1654 0010 FF7FFFFF 		.word	-32769
 1655              		.cfi_endproc
 1656              	.LFE70:
 1658              		.section	.text.USART_SetDEAssertionTime,"ax",%progbits
 1659              		.align	1
 1660              		.global	USART_SetDEAssertionTime
 1661              		.code	16
 1662              		.thumb_func
 1664              	USART_SetDEAssertionTime:
 1665              	.LFB71:
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE assertion time
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DEAssertionTime: specifies the time between the activation of
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         the DE signal and the beginning of the start bit
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1666              		.loc 1 1607 0
 1667              		.cfi_startproc
 1668              	.LVL122:
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE assertion time */
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 1669              		.loc 1 1613 0
 1670 0000 0268     		ldr	r2, [r0]
 1671 0002 044B     		ldr	r3, .L150
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE assertion time */
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 1672              		.loc 1 1615 0
 1673 0004 4905     		lsl	r1, r1, #21
 1674              	.LVL123:
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 1675              		.loc 1 1613 0
 1676 0006 1340     		and	r3, r2
 1677 0008 0360     		str	r3, [r0]
 1678              		.loc 1 1615 0
 1679 000a 0368     		ldr	r3, [r0]
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1680              		.loc 1 1616 0
 1681              		@ sp needed for prologue
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 1682              		.loc 1 1615 0
 1683 000c 1943     		orr	r1, r3
 1684 000e 0160     		str	r1, [r0]
 1685              		.loc 1 1616 0
 1686 0010 7047     		bx	lr
 1687              	.L151:
 1688 0012 C046     		.align	2
 1689              	.L150:
 1690 0014 FFFF1FFC 		.word	-65011713
 1691              		.cfi_endproc
 1692              	.LFE71:
 1694              		.section	.text.USART_SetDEDeassertionTime,"ax",%progbits
 1695              		.align	1
 1696              		.global	USART_SetDEDeassertionTime
 1697              		.code	16
 1698              		.thumb_func
 1700              	USART_SetDEDeassertionTime:
 1701              	.LFB72:
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE deassertion time
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DeassertionTime: specifies the time between the middle of the last 
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         stop bit in a transmitted message and the de-activation of the DE signal
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1702              		.loc 1 1629 0
 1703              		.cfi_startproc
 1704              	.LVL124:
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE deassertion time */
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 1705              		.loc 1 1635 0
 1706 0000 0268     		ldr	r2, [r0]
 1707 0002 044B     		ldr	r3, .L153
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE deassertion time */
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 1708              		.loc 1 1637 0
 1709 0004 0904     		lsl	r1, r1, #16
 1710              	.LVL125:
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 1711              		.loc 1 1635 0
 1712 0006 1340     		and	r3, r2
 1713 0008 0360     		str	r3, [r0]
 1714              		.loc 1 1637 0
 1715 000a 0368     		ldr	r3, [r0]
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1716              		.loc 1 1638 0
 1717              		@ sp needed for prologue
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 1718              		.loc 1 1637 0
 1719 000c 1943     		orr	r1, r3
 1720 000e 0160     		str	r1, [r0]
 1721              		.loc 1 1638 0
 1722 0010 7047     		bx	lr
 1723              	.L154:
 1724 0012 C046     		.align	2
 1725              	.L153:
 1726 0014 FFFFE0FF 		.word	-2031617
 1727              		.cfi_endproc
 1728              	.LFE72:
 1730              		.section	.text.USART_DMACmd,"ax",%progbits
 1731              		.align	1
 1732              		.global	USART_DMACmd
 1733              		.code	16
 1734              		.thumb_func
 1736              	USART_DMACmd:
 1737              	.LFB73:
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group11 DMA transfers management functions
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   DMA transfers management functions
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                ##### DMA transfers management functions #####
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This section provides two functions that can be used only in DMA mode.
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In DMA Mode, the USART communication can be managed by 2 DMA Channel 
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          requests:
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following function:
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, 
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              FunctionalState NewState).
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1738              		.loc 1 1678 0
 1739              		.cfi_startproc
 1740              	.LVL126:
 1741 0000 00B5     		push	{lr}
 1742              	.LCFI22:
 1743              		.cfi_def_cfa_offset 4
 1744              		.cfi_offset 14, -4
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1745              		.loc 1 1688 0
 1746 0002 8368     		ldr	r3, [r0, #8]
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1747              		.loc 1 1684 0
 1748 0004 002A     		cmp	r2, #0
 1749 0006 02D0     		beq	.L156
 1750              		.loc 1 1688 0
 1751 0008 1943     		orr	r1, r3
 1752              	.LVL127:
 1753 000a 8160     		str	r1, [r0, #8]
 1754 000c 01E0     		b	.L155
 1755              	.LVL128:
 1756              	.L156:
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 1757              		.loc 1 1694 0
 1758 000e 8B43     		bic	r3, r1
 1759 0010 8360     		str	r3, [r0, #8]
 1760              	.LVL129:
 1761              	.L155:
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1762              		.loc 1 1696 0
 1763              		@ sp needed for prologue
 1764 0012 00BD     		pop	{pc}
 1765              		.cfi_endproc
 1766              	.LFE73:
 1768              		.section	.text.USART_DMAReceptionErrorConfig,"ax",%progbits
 1769              		.align	1
 1770              		.global	USART_DMAReceptionErrorConfig
 1771              		.code	16
 1772              		.thumb_func
 1774              	USART_DMAReceptionErrorConfig:
 1775              	.LFB74:
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface when reception error occurs.
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAOnError: specifies the DMA status in case of reception error.
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAOnError_Enable: DMA receive request enabled when the USART DMA  
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                          reception error is asserted.
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                           reception error is asserted.
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1776              		.loc 1 1713 0
 1777              		.cfi_startproc
 1778              	.LVL130:
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DMA Reception error detection bit */
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 1779              		.loc 1 1719 0
 1780 0000 8268     		ldr	r2, [r0, #8]
 1781 0002 034B     		ldr	r3, .L159
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DMA Reception error detection bit */
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DMAOnError;
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1782              		.loc 1 1722 0
 1783              		@ sp needed for prologue
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 1784              		.loc 1 1719 0
 1785 0004 1340     		and	r3, r2
 1786 0006 8360     		str	r3, [r0, #8]
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DMAOnError;
 1787              		.loc 1 1721 0
 1788 0008 8368     		ldr	r3, [r0, #8]
 1789 000a 1943     		orr	r1, r3
 1790              	.LVL131:
 1791 000c 8160     		str	r1, [r0, #8]
 1792              		.loc 1 1722 0
 1793 000e 7047     		bx	lr
 1794              	.L160:
 1795              		.align	2
 1796              	.L159:
 1797 0010 FFDFFFFF 		.word	-8193
 1798              		.cfi_endproc
 1799              	.LFE74:
 1801              		.section	.text.USART_ITConfig,"ax",%progbits
 1802              		.align	1
 1803              		.global	USART_ITConfig
 1804              		.code	16
 1805              		.thumb_func
 1807              	USART_ITConfig:
 1808              	.LFB75:
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group12 Interrupts and flags management functions
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             ##### Interrupts and flags management functions #####
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to configure the 
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART Interrupts sources, Requests and check or clear the flags or pending bits status. 
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The user should identify which mode will be used in his application to 
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          manage the communication: Polling mode, Interrupt mode.
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Polling Mode ***
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ====================
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Polling Mode, the SPI communication can be managed by these flags:
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_REACK: to indicate the status of the Receive Enable 
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TEACK: to indicate the status of the Transmit Enable 
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag.
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_WU: to indicate the status of the Wake up flag.
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RWU: to indicate the status of the Receive Wake up flag.
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_SBK: to indicate the status of the Send Break flag.
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CM: to indicate the status of the Character match flag.
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_BUSY: to indicate the status of the Busy flag.
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRF: to indicate the status of the Auto baud rate flag.
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRE: to indicate the status of the Auto baud rate error flag.
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_EOB: to indicate the status of the End of block flag.
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RTO: to indicate the status of the Receive time out flag.
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_nCTSS: to indicate the status of the Inverted nCTS input 
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              bit status.
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TXE: to indicate the status of the transmit buffer register.
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RXNE: to indicate the status of the receive buffer register.
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TC: to indicate the status of the transmit operation.
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_IDLE: to indicate the status of the Idle Line.
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CTS: to indicate the status of the nCTS input.
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_LBD: to indicate the status of the LIN break detection.
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_NE: to indicate if a noise error occur.
1765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_FE: to indicate if a frame error occur.
1766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_PE: to indicate if a parity error occur.
1767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ORE: to indicate if an Overrun error occur.
1768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Interrupt Mode ***
1773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ======================
1774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Interrupt Mode, the USART communication can be managed by 8 interrupt 
1775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          sources and 10 pending bits:
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Pending Bits:
1777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: to indicate the status of the Wake up interrupt.
1778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: to indicate the status of Character match interrupt.
1779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: to indicate the status of End of block interrupt.
1780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: to indicate the status of Receive time out interrupt.
1781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: to indicate the status of CTS change interrupt.
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: to indicate the status of LIN Break detection interrupt.
1783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: to indicate the status of Transmission complete interrupt.
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: to indicate the status of IDLE line detected interrupt.
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ORE: to indicate the status of OverRun Error interrupt.
1786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_NE: to indicate the status of Noise Error interrupt.
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_FE: to indicate the status of Framing Error interrupt.
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: to indicate the status of Parity Error interrupt.  
1789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Interrupt Source:
1791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: specifies the interrupt source for Wake up interrupt.
1792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: specifies the interrupt source for Character match 
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: specifies the interrupt source for End of block
1795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: specifies the interrupt source for Receive time-out
1797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: specifies the interrupt source for CTS change interrupt.
1799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: specifies the interrupt source for LIN Break 
1800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TXE: specifies the interrupt source for Tansmit Data 
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   Register empty interrupt.
1803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: specifies the interrupt source for Transmission 
1804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   complete interrupt.
1805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RXNE: specifies the interrupt source for Receive Data 
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   register not empty interrupt.
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: specifies the interrupt source for Idle line 
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: specifies the interrupt source for Parity Error interrupt.
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ERR: specifies the interrupt source for Error interrupt
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   (Frame error, noise error, overrun error)
1812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              -@@- Some parameters are coded in order to use them as interrupt 
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  source or as pending bits.
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState
1816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT).
1817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT).
1818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt, not available for  STM32F030 devices.
1832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt, not available for  STM32F030 devices.
1834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt, not available for  STM32F030 devi
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_IDLE:  Idle line detection interrupt.
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1809              		.loc 1 1848 0
 1810              		.cfi_startproc
 1811              	.LVL132:
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartreg = 0, itpos = 0, itmask = 0;
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartxbase = 0;
1851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1812              		.loc 1 1859 0
 1813 0000 8BB2     		uxth	r3, r1
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1814              		.loc 1 1848 0
 1815 0002 10B5     		push	{r4, lr}
 1816              	.LCFI23:
 1817              		.cfi_def_cfa_offset 8
 1818              		.cfi_offset 4, -8
 1819              		.cfi_offset 14, -4
1860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1820              		.loc 1 1862 0
 1821 0004 C9B2     		uxtb	r1, r1
 1822              	.LVL133:
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1823              		.loc 1 1863 0
 1824 0006 0124     		mov	r4, #1
 1825 0008 8C40     		lsl	r4, r4, r1
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1826              		.loc 1 1859 0
 1827 000a 1B0A     		lsr	r3, r3, #8
 1828              	.LVL134:
 1829              		.loc 1 1863 0
 1830 000c 211C     		mov	r1, r4
 1831              	.LVL135:
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x02) /* The IT is in CR2 register */
 1832              		.loc 1 1865 0
 1833 000e 022B     		cmp	r3, #2
 1834 0010 01D1     		bne	.L162
1866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x04;
 1835              		.loc 1 1867 0
 1836 0012 0430     		add	r0, r0, #4
 1837              	.LVL136:
 1838 0014 02E0     		b	.L163
 1839              	.LVL137:
 1840              	.L162:
1868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x03) /* The IT is in CR3 register */
 1841              		.loc 1 1869 0
 1842 0016 032B     		cmp	r3, #3
 1843 0018 00D1     		bne	.L163
1870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x08;
 1844              		.loc 1 1871 0
 1845 001a 0830     		add	r0, r0, #8
 1846              	.LVL138:
 1847              	.L163:
1872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT is in CR1 register */
1874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1848              		.loc 1 1878 0
 1849 001c 0368     		ldr	r3, [r0]
 1850              	.LVL139:
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1851              		.loc 1 1876 0
 1852 001e 002A     		cmp	r2, #0
 1853 0020 02D0     		beq	.L164
 1854              		.loc 1 1878 0
 1855 0022 1943     		orr	r1, r3
 1856              	.LVL140:
 1857 0024 0160     		str	r1, [r0]
 1858 0026 01E0     		b	.L161
 1859              	.LVL141:
 1860              	.L164:
1879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1861              		.loc 1 1882 0
 1862 0028 8B43     		bic	r3, r1
 1863 002a 0360     		str	r3, [r0]
 1864              	.LVL142:
 1865              	.L161:
1883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1866              		.loc 1 1884 0
 1867              		@ sp needed for prologue
 1868              	.LVL143:
 1869 002c 10BD     		pop	{r4, pc}
 1870              		.cfi_endproc
 1871              	.LFE75:
 1873              		.section	.text.USART_RequestCmd,"ax",%progbits
 1874              		.align	1
 1875              		.global	USART_RequestCmd
 1876              		.code	16
 1877              		.thumb_func
 1879              	USART_RequestCmd:
 1880              	.LFB76:
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables the specified USART's Request.
1888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Request: specifies the USART request.
1893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_TXFRQ: Transmit data flush ReQuest
1895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_RXFRQ: Receive data flush ReQuest
1896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_MMRQ: Mute Mode ReQuest
1897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_SBKRQ: Send Break ReQuest
1898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_ABRRQ: Auto Baud Rate ReQuest
1899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA interface when reception error occurs.
1900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
1904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1881              		.loc 1 1904 0
 1882              		.cfi_startproc
 1883              	.LVL144:
 1884 0000 00B5     		push	{lr}
 1885              	.LCFI24:
 1886              		.cfi_def_cfa_offset 4
 1887              		.cfi_offset 14, -4
1905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_REQUEST(USART_Request));
1908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       USARTx->RQR |= USART_Request;
 1888              		.loc 1 1914 0
 1889 0002 038B     		ldrh	r3, [r0, #24]
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1890              		.loc 1 1910 0
 1891 0004 002A     		cmp	r2, #0
 1892 0006 02D0     		beq	.L167
 1893              		.loc 1 1914 0
 1894 0008 1943     		orr	r1, r3
 1895              	.LVL145:
 1896 000a 0183     		strh	r1, [r0, #24]
 1897 000c 01E0     		b	.L166
 1898              	.LVL146:
 1899              	.L167:
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
1919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->RQR &= (uint32_t)~USART_Request;
 1900              		.loc 1 1920 0
 1901 000e 8B43     		bic	r3, r1
 1902 0010 0383     		strh	r3, [r0, #24]
 1903              	.LVL147:
 1904              	.L166:
1921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1905              		.loc 1 1922 0
 1906              		@ sp needed for prologue
 1907 0012 00BD     		pop	{pc}
 1908              		.cfi_endproc
 1909              	.LFE76:
 1911              		.section	.text.USART_OverrunDetectionConfig,"ax",%progbits
 1912              		.align	1
 1913              		.global	USART_OverrunDetectionConfig
 1914              		.code	16
 1915              		.thumb_func
 1917              	USART_OverrunDetectionConfig:
 1918              	.LFB77:
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Overrun detection.
1926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_OVRDetection: specifies the OVR detection status in case of OVR error.
1931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_OVRDetection_Enable: OVR error detection enabled when
1933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                            the USART OVR error is asserted.
1934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_OVRDetection_Disable: OVR error detection disabled when
1935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                             the USART OVR error is asserted.
1936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
1939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1919              		.loc 1 1939 0
 1920              		.cfi_startproc
 1921              	.LVL148:
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the OVR detection bit */
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 1922              		.loc 1 1945 0
 1923 0000 8268     		ldr	r2, [r0, #8]
 1924 0002 034B     		ldr	r3, .L170
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the OVR detection bit */
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_OVRDetection;
1948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1925              		.loc 1 1948 0
 1926              		@ sp needed for prologue
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 1927              		.loc 1 1945 0
 1928 0004 1340     		and	r3, r2
 1929 0006 8360     		str	r3, [r0, #8]
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_OVRDetection;
 1930              		.loc 1 1947 0
 1931 0008 8368     		ldr	r3, [r0, #8]
 1932 000a 1943     		orr	r1, r3
 1933              	.LVL149:
 1934 000c 8160     		str	r1, [r0, #8]
 1935              		.loc 1 1948 0
 1936 000e 7047     		bx	lr
 1937              	.L171:
 1938              		.align	2
 1939              	.L170:
 1940 0010 FFEFFFFF 		.word	-4097
 1941              		.cfi_endproc
 1942              	.LFE77:
 1944              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1945              		.align	1
 1946              		.global	USART_GetFlagStatus
 1947              		.code	16
 1948              		.thumb_func
 1950              	USART_GetFlagStatus:
 1951              	.LFB78:
1949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_REACK:  Receive Enable acknowledge flag.
1959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TEACK:  Transmit Enable acknowledge flag.
1960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_WU:  Wake up flag, not available for  STM32F030 devices.
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RWU:  Receive Wake up flag, not available for  STM32F030 devices.
1962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_SBK:  Send Break flag.
1963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CM:  Character match flag.
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_BUSY:  Busy flag.
1965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ABRF:  Auto baud rate flag.
1966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ABRE:  Auto baud rate error flag.
1967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_EOB:  End of block flag, not available for  STM32F030 devices.
1968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RTO:  Receive time out flag.
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_nCTSS:  Inverted nCTS input bit status.
1970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag.
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag, not available for  STM32F030 devices
1972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag.
1973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TC:  Transmission Complete flag.
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RXNE:  Receive data register not empty flag.
1975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_IDLE:  Idle Line detection flag.
1976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag.
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_NE:  Noise Error flag.
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_FE:  Framing Error flag.
1979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_PE:  Parity Error flag.
1980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1952              		.loc 1 1983 0
 1953              		.cfi_startproc
 1954              	.LVL150:
1984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   FlagStatus bitstatus = RESET;
1985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 1955              		.loc 1 1989 0
 1956 0000 C069     		ldr	r0, [r0, #28]
 1957              	.LVL151:
1990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
1992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
1996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;
1998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1958              		.loc 1 1998 0
 1959              		@ sp needed for prologue
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 1960              		.loc 1 1989 0
 1961 0002 0840     		and	r0, r1
 1962              	.LVL152:
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;
 1963              		.loc 1 1997 0
 1964 0004 431E     		sub	r3, r0, #1
 1965 0006 9841     		sbc	r0, r0, r3
 1966              		.loc 1 1998 0
 1967 0008 7047     		bx	lr
 1968              		.cfi_endproc
 1969              	.LFE78:
 1971              		.section	.text.USART_ClearFlag,"ax",%progbits
 1972              		.align	1
 1973              		.global	USART_ClearFlag
 1974              		.code	16
 1975              		.thumb_func
 1977              	USART_ClearFlag:
 1978              	.LFB79:
1999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
2000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
2001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
2002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
2004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
2005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
2006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
2007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_WU:  Wake up flag, not available for  STM32F030 devices.
2009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CM:  Character match flag.
2010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_EOB:  End of block flag, not available for  STM32F030 devices.
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RTO:  Receive time out flag.
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag.
2013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag, not available for  STM32F030 devices
2014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TC:  Transmission Complete flag.
2015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_IDLE:  IDLE line detected flag.
2016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag.
2017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_NE: Noise Error flag.
2018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_FE: Framing Error flag.
2019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Errorflag.
2020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   
2021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
2022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register
2023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
2024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC flag can be also cleared by software sequence: a read operation
2025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           to USART_SR register (USART_GetFlagStatus()) followed by a write 
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_TDR register (USART_SendData()).
2027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE flag is cleared by a write to the USART_TDR register (USART_SendData())
2028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           or by writing 1 to the TXFRQ in the register USART_RQR (USART_RequestCmd()).
2029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
2030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_RequestCmd()).
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
2032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
2033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1979              		.loc 1 2034 0
 1980              		.cfi_startproc
 1981              	.LVL153:
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
2036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
2037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
2038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      
2039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = USART_FLAG;
 1982              		.loc 1 2039 0
 1983 0000 0162     		str	r1, [r0, #32]
2040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1984              		.loc 1 2040 0
 1985              		@ sp needed for prologue
 1986 0002 7047     		bx	lr
 1987              		.cfi_endproc
 1988              	.LFE79:
 1990              		.section	.text.USART_GetITStatus,"ax",%progbits
 1991              		.align	1
 1992              		.global	USART_GetITStatus
 1993              		.code	16
 1994              		.thumb_func
 1996              	USART_GetITStatus:
 1997              	.LFB80:
2041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
2042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
2044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
2045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
2048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
2049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt, not available for  STM32F030 devices.
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
2052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt, not available for  STM32F030 devices.
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
2054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
2055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt, not available for  STM32F030 devi
2056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
2059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_IDLE:  Idle line detection interrupt.
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt.
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_NE:  Noise Error interrupt.
2062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_FE:  Framing Error interrupt.
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
2064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
2065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
2066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1998              		.loc 1 2067 0
 1999              		.cfi_startproc
 2000              	.LVL154:
2068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0, usartreg = 0;
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ITStatus bitstatus = RESET;
2070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
2072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
2077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = USART_IT & IT_MASK;
 2001              		.loc 1 2077 0
 2002 0000 CBB2     		uxtb	r3, r1
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2003              		.loc 1 2067 0
 2004 0002 10B5     		push	{r4, lr}
 2005              	.LCFI25:
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 4, -8
 2008              		.cfi_offset 14, -4
2078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 2009              		.loc 1 2078 0
 2010 0004 0124     		mov	r4, #1
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 2011              		.loc 1 2075 0
 2012 0006 8AB2     		uxth	r2, r1
 2013              		.loc 1 2078 0
 2014 0008 9C40     		lsl	r4, r4, r3
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 2015              		.loc 1 2075 0
 2016 000a 120A     		lsr	r2, r2, #8
 2017              	.LVL155:
 2018              		.loc 1 2078 0
 2019 000c 231C     		mov	r3, r4
 2020              	.LVL156:
2079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 2021              		.loc 1 2080 0
 2022 000e 012A     		cmp	r2, #1
 2023 0010 01D1     		bne	.L175
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR1;
 2024              		.loc 1 2082 0
 2025 0012 0268     		ldr	r2, [r0]
 2026              	.LVL157:
 2027 0014 04E0     		b	.L178
 2028              	.LVL158:
 2029              	.L175:
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 2030              		.loc 1 2084 0
 2031 0016 022A     		cmp	r2, #2
 2032 0018 01D1     		bne	.L177
2085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR2;
 2033              		.loc 1 2086 0
 2034 001a 4268     		ldr	r2, [r0, #4]
 2035              	.LVL159:
 2036 001c 00E0     		b	.L178
 2037              	.LVL160:
 2038              	.L177:
2087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT  is in CR3 register */
2089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR3;
 2039              		.loc 1 2090 0
 2040 001e 8268     		ldr	r2, [r0, #8]
 2041              	.LVL161:
 2042              	.L178:
 2043 0020 1340     		and	r3, r2
 2044              	.LVL162:
2091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 2045              		.loc 1 2093 0
 2046 0022 090C     		lsr	r1, r1, #16
 2047              	.LVL163:
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 2048              		.loc 1 2094 0
 2049 0024 0122     		mov	r2, #1
 2050 0026 8A40     		lsl	r2, r2, r1
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos &= USARTx->ISR;
 2051              		.loc 1 2095 0
 2052 0028 C069     		ldr	r0, [r0, #28]
 2053              	.LVL164:
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 2054              		.loc 1 2094 0
 2055 002a 111C     		mov	r1, r2
 2056              	.LVL165:
 2057              		.loc 1 2095 0
 2058 002c 0840     		and	r0, r1
 2059              	.LVL166:
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 2060              		.loc 1 2096 0
 2061 002e 5A1E     		sub	r2, r3, #1
 2062 0030 9341     		sbc	r3, r3, r2
 2063              	.LVL167:
 2064 0032 411E     		sub	r1, r0, #1
 2065 0034 8841     		sbc	r0, r0, r1
 2066              	.LVL168:
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
2101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
2103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;  
 2067              		.loc 1 2105 0
 2068 0036 1840     		and	r0, r3
2106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2069              		.loc 1 2106 0
 2070              		@ sp needed for prologue
 2071 0038 10BD     		pop	{r4, pc}
 2072              		.cfi_endproc
 2073              	.LFE80:
 2075              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 2076              		.align	1
 2077              		.global	USART_ClearITPendingBit
 2078              		.code	16
 2079              		.thumb_func
 2081              	USART_ClearITPendingBit:
 2082              	.LFB81:
2107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
2108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
2109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
2113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
2114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
2115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt, not available for  STM32F030 devices.
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt, not available for  STM32F030 devices.
2119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt, not available for  STM32F030 devi
2122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
2123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_IDLE:  IDLE line detected interrupt.
2124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt.
2125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_NE:  Noise Error interrupt.
2126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_FE:  Framing Error interrupt.
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
2128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
2130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register 
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC pending bit can be also cleared by software sequence: a read 
2133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_SR register (USART_GetITStatus()) followed by  
2134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           a write operation to USART_TDR register (USART_SendData()).
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE pending bit is cleared by a write to the USART_TDR register 
2136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
2139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
2140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2083              		.loc 1 2141 0
 2084              		.cfi_startproc
 2085              	.LVL169:
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0;
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
2144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
2146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 2086              		.loc 1 2147 0
 2087 0000 090C     		lsr	r1, r1, #16
 2088              	.LVL170:
2148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 2089              		.loc 1 2148 0
 2090 0002 0123     		mov	r3, #1
 2091 0004 8B40     		lsl	r3, r3, r1
 2092              	.LVL171:
2149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = (uint32_t)itmask;
 2093              		.loc 1 2149 0
 2094 0006 0362     		str	r3, [r0, #32]
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2095              		.loc 1 2150 0
 2096              		@ sp needed for prologue
 2097 0008 7047     		bx	lr
 2098              		.cfi_endproc
 2099              	.LFE81:
 2101              		.text
 2102              	.Letext0:
 2103              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2104              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 2105              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
 2106              		.file 5 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_usart.c
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:18     .text.USART_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:23     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:176    .text.USART_DeInit:000000b4 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:190    .text.USART_Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:195    .text.USART_Init:00000000 USART_Init
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:382    .text.USART_Init:000000a8 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:393    .text.USART_StructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:398    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:427    .text.USART_ClockInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:432    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:472    .text.USART_ClockInit:0000001c $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:477    .text.USART_ClockStructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:482    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:503    .text.USART_Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:508    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:539    .text.USART_DirectionModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:544    .text.USART_DirectionModeCmd:00000000 USART_DirectionModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:577    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:582    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:613    .text.USART_OverSampling8Cmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:618    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:623    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:654    .text.USART_OneBitMethodCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:659    .text.USART_MSBFirstCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:664    .text.USART_MSBFirstCmd:00000000 USART_MSBFirstCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:695    .text.USART_MSBFirstCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:700    .text.USART_DataInvCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:705    .text.USART_DataInvCmd:00000000 USART_DataInvCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:736    .text.USART_DataInvCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:741    .text.USART_InvPinCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:746    .text.USART_InvPinCmd:00000000 USART_InvPinCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:779    .text.USART_SWAPPinCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:784    .text.USART_SWAPPinCmd:00000000 USART_SWAPPinCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:815    .text.USART_SWAPPinCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:820    .text.USART_ReceiverTimeOutCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:825    .text.USART_ReceiverTimeOutCmd:00000000 USART_ReceiverTimeOutCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:856    .text.USART_ReceiverTimeOutCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:861    .text.USART_SetReceiverTimeOut:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:866    .text.USART_SetReceiverTimeOut:00000000 USART_SetReceiverTimeOut
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:890    .text.USART_SetPrescaler:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:895    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:919    .text.USART_STOPModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:924    .text.USART_STOPModeCmd:00000000 USART_STOPModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:955    .text.USART_StopModeWakeUpSourceConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:960    .text.USART_StopModeWakeUpSourceConfig:00000000 USART_StopModeWakeUpSourceConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:983    .text.USART_StopModeWakeUpSourceConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:988    .text.USART_AutoBaudRateCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:993    .text.USART_AutoBaudRateCmd:00000000 USART_AutoBaudRateCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1024   .text.USART_AutoBaudRateCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1029   .text.USART_AutoBaudRateConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1034   .text.USART_AutoBaudRateConfig:00000000 USART_AutoBaudRateConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1057   .text.USART_AutoBaudRateConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1062   .text.USART_SendData:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1067   .text.USART_SendData:00000000 USART_SendData
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1084   .text.USART_ReceiveData:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1089   .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1108   .text.USART_SetAddress:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1113   .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1140   .text.USART_MuteModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1145   .text.USART_MuteModeCmd:00000000 USART_MuteModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1176   .text.USART_MuteModeCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1181   .text.USART_MuteModeWakeUpConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1186   .text.USART_MuteModeWakeUpConfig:00000000 USART_MuteModeWakeUpConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1209   .text.USART_MuteModeWakeUpConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1214   .text.USART_AddressDetectionConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1219   .text.USART_AddressDetectionConfig:00000000 USART_AddressDetectionConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1243   .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1248   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1272   .text.USART_LINCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1277   .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1308   .text.USART_LINCmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1313   .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1318   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1349   .text.USART_SetGuardTime:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1354   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1380   .text.USART_SmartCardCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1385   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1416   .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1421   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1452   .text.USART_SetAutoRetryCount:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1457   .text.USART_SetAutoRetryCount:00000000 USART_SetAutoRetryCount
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1483   .text.USART_SetAutoRetryCount:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1488   .text.USART_SetBlockLength:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1493   .text.USART_SetBlockLength:00000000 USART_SetBlockLength
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1520   .text.USART_IrDAConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1525   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1549   .text.USART_IrDACmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1554   .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1585   .text.USART_DECmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1590   .text.USART_DECmd:00000000 USART_DECmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1621   .text.USART_DECmd:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1626   .text.USART_DEPolarityConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1631   .text.USART_DEPolarityConfig:00000000 USART_DEPolarityConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1654   .text.USART_DEPolarityConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1659   .text.USART_SetDEAssertionTime:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1664   .text.USART_SetDEAssertionTime:00000000 USART_SetDEAssertionTime
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1690   .text.USART_SetDEAssertionTime:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1695   .text.USART_SetDEDeassertionTime:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1700   .text.USART_SetDEDeassertionTime:00000000 USART_SetDEDeassertionTime
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1726   .text.USART_SetDEDeassertionTime:00000014 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1731   .text.USART_DMACmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1736   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1769   .text.USART_DMAReceptionErrorConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1774   .text.USART_DMAReceptionErrorConfig:00000000 USART_DMAReceptionErrorConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1797   .text.USART_DMAReceptionErrorConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1802   .text.USART_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1807   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1874   .text.USART_RequestCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1879   .text.USART_RequestCmd:00000000 USART_RequestCmd
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1912   .text.USART_OverrunDetectionConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1917   .text.USART_OverrunDetectionConfig:00000000 USART_OverrunDetectionConfig
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1940   .text.USART_OverrunDetectionConfig:00000010 $d
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1945   .text.USART_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1950   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1972   .text.USART_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1977   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1991   .text.USART_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:1996   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:2076   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\cc4WQGL9.s:2081   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_usart.h.110.6995e3c92210e6fb4aaf9b9da4f2c961

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
__aeabi_uidiv
__aeabi_uidivmod
RCC_GetClocksFreq
