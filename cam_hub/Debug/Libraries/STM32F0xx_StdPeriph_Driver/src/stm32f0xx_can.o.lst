   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CAN_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	CAN_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	CAN_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @file    stm32f0xx_can.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral and 
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          applicable only for STM32F072 devices :           
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Initialization and Configuration 
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + CAN Frames Transmission 
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + CAN Frames Reception    
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Operation modes switch  
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Error management          
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Interrupts and flags        
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   @verbatim
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================      
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                       ##### How to use this driver #####
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================                
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..]
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Enable the CAN controller interface clock using 
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN, ENABLE);      
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) CAN pins configuration:
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOx, ENABLE);   
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Connect the involved CAN pins to AF0 using the following function 
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              the function  GPIO_Init();
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Initialise and configure the CAN using CAN_Init() and 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         CAN_FilterInit() functions.   
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Transmit the desired CAN frame using CAN_Transmit() function.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Check the transmission of a CAN frame using CAN_TransmitStatus() function.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit() function.  
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Receive a CAN frame using CAN_Recieve() function.
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Release the receive FIFOs using CAN_FIFORelease() function.
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Return the number of pending received frames using CAN_MessagePending() function.          
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) To control CAN events you can use one of the following two methods:
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at initialization 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              phase and CAN_GetITStatus() function into interrupt routines to check 
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              if the event has occurred or not.
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              function. And after checking on an interrupt event you should clear it 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              using CAN_ClearITPendingBit() function.            
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                  
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   @endverbatim
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *       
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ******************************************************************************
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @attention
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * You may not use this file except in compliance with the License.
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * You may obtain a copy of the License at:
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * See the License for the specific language governing permissions and
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * limitations under the License.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ******************************************************************************
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Includes ------------------------------------------------------------------*/
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #include "stm32f0xx_can.h"
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #include "stm32f0xx_rcc.h"
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN 
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief CAN driver modules
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */ 
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private define ------------------------------------------------------------*/
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* CAN Master Control Register bits */
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* CAN Mailbox Transmit Request */
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* CAN Filter Master Register bits */
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Time out for INAK bit */
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x00FFFFFF)
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Time out for SLAK bit */
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x00FFFFFF)
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in TSR register */
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in RF1R register */
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in RF0R register */
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in MSR register */
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in ESR register */
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Mailboxes definition */
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private macro -------------------------------------------------------------*/
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private variables ---------------------------------------------------------*/
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private functions ---------------------------------------------------------*/
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Private_Functions
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    Initialization and Configuration functions 
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****               ##### Initialization and Configuration functions #####
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to: 
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              number of time quanta to perform resynchronization, the number of time 
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              quanta in Bit Segment 1 and 2 and many other modes. 
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Configure the CAN reception filter.                                      
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Select the start bank filter for slave CAN.
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Enable or disable the Debug Freeze mode for CAN.
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Enable or disable the CAN Time Trigger Operation communication mode.
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None.
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  26              		.loc 1 154 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 10B5     		push	{r4, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Enable CAN reset state */
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
  34              		.loc 1 159 0
  35 0002 8024     		mov	r4, #128
  36 0004 A404     		lsl	r4, r4, #18
  37 0006 201C     		mov	r0, r4
  38              	.LVL1:
  39 0008 0121     		mov	r1, #1
  40 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  41              	.LVL2:
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release CAN from reset state */
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
  42              		.loc 1 161 0
  43 000e 201C     		mov	r0, r4
  44 0010 0021     		mov	r1, #0
  45 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  46              	.LVL3:
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
  47              		.loc 1 162 0
  48              		@ sp needed for prologue
  49 0016 10BD     		pop	{r4, pc}
  50              		.cfi_endproc
  51              	.LFE33:
  53              		.section	.text.CAN_Init,"ax",%progbits
  54              		.align	1
  55              		.global	CAN_Init
  56              		.code	16
  57              		.thumb_func
  59              	CAN_Init:
  60              	.LFB34:
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         parameters in the CAN_InitStruct.
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         the configuration information for the CAN peripheral.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  61              		.loc 1 174 0
  62              		.cfi_startproc
  63              	.LVL4:
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t wait_ack = 0x00000000;
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Exit from sleep mode */
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
  64              		.loc 1 193 0
  65 0000 0268     		ldr	r2, [r0]
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  66              		.loc 1 174 0
  67 0002 031C     		mov	r3, r0
  68              		.loc 1 193 0
  69 0004 0220     		mov	r0, #2
  70              	.LVL5:
  71 0006 8243     		bic	r2, r0
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  72              		.loc 1 174 0
  73 0008 10B5     		push	{r4, lr}
  74              	.LCFI1:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 4, -8
  77              		.cfi_offset 14, -4
  78              		.loc 1 193 0
  79 000a 1A60     		str	r2, [r3]
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Request initialisation */
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
  80              		.loc 1 196 0
  81 000c 1A68     		ldr	r2, [r3]
  82 000e 0120     		mov	r0, #1
  83 0010 0243     		orr	r2, r0
  84 0012 1A60     		str	r2, [r3]
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Wait the acknowledge */
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
  85              		.loc 1 199 0
  86 0014 8022     		mov	r2, #128
  87 0016 5204     		lsl	r2, r2, #17
  88              	.LVL6:
  89              	.L4:
  90              		.loc 1 199 0 is_stmt 0 discriminator 1
  91 0018 5C68     		ldr	r4, [r3, #4]
  92 001a 0442     		tst	r4, r0
  93 001c 02D1     		bne	.L3
  94 001e 013A     		sub	r2, r2, #1
  95              		.loc 1 199 0 discriminator 2
  96 0020 002A     		cmp	r2, #0
  97 0022 F9D1     		bne	.L4
  98              	.L3:
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     wait_ack++;
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check acknowledge */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  99              		.loc 1 205 0 is_stmt 1
 100 0024 5C68     		ldr	r4, [r3, #4]
 101 0026 0122     		mov	r2, #1
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 102              		.loc 1 207 0
 103 0028 0020     		mov	r0, #0
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 104              		.loc 1 205 0
 105 002a 1442     		tst	r4, r2
 106 002c 5FD0     		beq	.L5
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else 
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the time triggered communication mode */
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 107              		.loc 1 212 0
 108 002e 8879     		ldrb	r0, [r1, #6]
 109 0030 8022     		mov	r2, #128
 110 0032 0128     		cmp	r0, #1
 111 0034 02D1     		bne	.L6
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 112              		.loc 1 214 0
 113 0036 1868     		ldr	r0, [r3]
 114 0038 0243     		orr	r2, r0
 115 003a 02E0     		b	.L27
 116              	.L6:
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 117              		.loc 1 218 0
 118 003c 1868     		ldr	r0, [r3]
 119 003e 9043     		bic	r0, r2
 120 0040 021C     		mov	r2, r0
 121              	.L27:
 122 0042 1A60     		str	r2, [r3]
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the automatic bus-off management */
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 123              		.loc 1 222 0
 124 0044 C879     		ldrb	r0, [r1, #7]
 125 0046 4022     		mov	r2, #64
 126 0048 0128     		cmp	r0, #1
 127 004a 02D1     		bne	.L8
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 128              		.loc 1 224 0
 129 004c 1868     		ldr	r0, [r3]
 130 004e 0243     		orr	r2, r0
 131 0050 02E0     		b	.L28
 132              	.L8:
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 133              		.loc 1 228 0
 134 0052 1868     		ldr	r0, [r3]
 135 0054 9043     		bic	r0, r2
 136 0056 021C     		mov	r2, r0
 137              	.L28:
 138 0058 1A60     		str	r2, [r3]
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the automatic wake-up mode */
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 139              		.loc 1 232 0
 140 005a 087A     		ldrb	r0, [r1, #8]
 141 005c 2022     		mov	r2, #32
 142 005e 0128     		cmp	r0, #1
 143 0060 02D1     		bne	.L10
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 144              		.loc 1 234 0
 145 0062 1868     		ldr	r0, [r3]
 146 0064 0243     		orr	r2, r0
 147 0066 02E0     		b	.L29
 148              	.L10:
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 149              		.loc 1 238 0
 150 0068 1868     		ldr	r0, [r3]
 151 006a 9043     		bic	r0, r2
 152 006c 021C     		mov	r2, r0
 153              	.L29:
 154 006e 1A60     		str	r2, [r3]
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the no automatic retransmission */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 155              		.loc 1 242 0
 156 0070 487A     		ldrb	r0, [r1, #9]
 157 0072 1022     		mov	r2, #16
 158 0074 0128     		cmp	r0, #1
 159 0076 02D1     		bne	.L12
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 160              		.loc 1 244 0
 161 0078 1868     		ldr	r0, [r3]
 162 007a 0243     		orr	r2, r0
 163 007c 02E0     		b	.L30
 164              	.L12:
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 165              		.loc 1 248 0
 166 007e 1868     		ldr	r0, [r3]
 167 0080 9043     		bic	r0, r2
 168 0082 021C     		mov	r2, r0
 169              	.L30:
 170 0084 1A60     		str	r2, [r3]
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the receive FIFO locked mode */
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 171              		.loc 1 252 0
 172 0086 887A     		ldrb	r0, [r1, #10]
 173 0088 0822     		mov	r2, #8
 174 008a 0128     		cmp	r0, #1
 175 008c 02D1     		bne	.L14
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 176              		.loc 1 254 0
 177 008e 1868     		ldr	r0, [r3]
 178 0090 0243     		orr	r2, r0
 179 0092 02E0     		b	.L31
 180              	.L14:
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 181              		.loc 1 258 0
 182 0094 1868     		ldr	r0, [r3]
 183 0096 9043     		bic	r0, r2
 184 0098 021C     		mov	r2, r0
 185              	.L31:
 186 009a 1A60     		str	r2, [r3]
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the transmit FIFO priority */
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 187              		.loc 1 262 0
 188 009c C87A     		ldrb	r0, [r1, #11]
 189 009e 0422     		mov	r2, #4
 190 00a0 0128     		cmp	r0, #1
 191 00a2 02D1     		bne	.L16
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 192              		.loc 1 264 0
 193 00a4 1868     		ldr	r0, [r3]
 194 00a6 0243     		orr	r2, r0
 195 00a8 02E0     		b	.L32
 196              	.L16:
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 197              		.loc 1 268 0
 198 00aa 1868     		ldr	r0, [r3]
 199 00ac 9043     		bic	r0, r2
 200 00ae 021C     		mov	r2, r0
 201              	.L32:
 202 00b0 1A60     		str	r2, [r3]
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the bit timing register */
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 203              		.loc 1 273 0
 204 00b2 C878     		ldrb	r0, [r1, #3]
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 205              		.loc 1 272 0
 206 00b4 8A78     		ldrb	r2, [r1, #2]
 207              		.loc 1 273 0
 208 00b6 0006     		lsl	r0, r0, #24
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 209              		.loc 1 272 0
 210 00b8 9207     		lsl	r2, r2, #30
 211 00ba 0243     		orr	r2, r0
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 212              		.loc 1 274 0
 213 00bc 0879     		ldrb	r0, [r1, #4]
 214 00be 0004     		lsl	r0, r0, #16
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 215              		.loc 1 273 0
 216 00c0 0243     		orr	r2, r0
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 217              		.loc 1 275 0
 218 00c2 4879     		ldrb	r0, [r1, #5]
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 219              		.loc 1 276 0
 220 00c4 0988     		ldrh	r1, [r1]
 221              	.LVL7:
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 222              		.loc 1 275 0
 223 00c6 0005     		lsl	r0, r0, #20
 224              		.loc 1 276 0
 225 00c8 0139     		sub	r1, r1, #1
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 226              		.loc 1 274 0
 227 00ca 0243     		orr	r2, r0
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 228              		.loc 1 275 0
 229 00cc 0A43     		orr	r2, r1
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 230              		.loc 1 272 0
 231 00ce DA61     		str	r2, [r3, #28]
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request leave initialisation */
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 232              		.loc 1 279 0
 233 00d0 1A68     		ldr	r2, [r3]
 234 00d2 0121     		mov	r1, #1
 235 00d4 8A43     		bic	r2, r1
 236 00d6 1A60     		str	r2, [r3]
 237              	.LVL8:
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* Wait the acknowledge */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    wait_ack = 0;
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 238              		.loc 1 284 0
 239 00d8 8022     		mov	r2, #128
 240 00da 5204     		lsl	r2, r2, #17
 241              	.LVL9:
 242              	.L19:
 243              		.loc 1 284 0 is_stmt 0 discriminator 1
 244 00dc 5868     		ldr	r0, [r3, #4]
 245 00de 0842     		tst	r0, r1
 246 00e0 02D0     		beq	.L18
 247 00e2 013A     		sub	r2, r2, #1
 248              		.loc 1 284 0 discriminator 2
 249 00e4 002A     		cmp	r2, #0
 250 00e6 F9D1     		bne	.L19
 251              	.L18:
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    {
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      wait_ack++;
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    }
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* ...and check acknowledged */
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 252              		.loc 1 290 0 is_stmt 1
 253 00e8 5B68     		ldr	r3, [r3, #4]
 254              	.LVL10:
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 255              		.loc 1 207 0
 256 00ea 0120     		mov	r0, #1
 257 00ec 9843     		bic	r0, r3
 258              	.L5:
 259              	.LVL11:
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* At this step, return the status of initialization */
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return InitStatus;
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 260              		.loc 1 302 0
 261              		@ sp needed for prologue
 262 00ee 10BD     		pop	{r4, pc}
 263              		.cfi_endproc
 264              	.LFE34:
 266              		.section	.text.CAN_FilterInit,"ax",%progbits
 267              		.align	1
 268              		.global	CAN_FilterInit
 269              		.code	16
 270              		.thumb_func
 272              	CAN_FilterInit:
 273              	.LFB35:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         contains the configuration information.
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 274              		.loc 1 312 0
 275              		.cfi_startproc
 276              	.LVL12:
 277 0000 70B5     		push	{r4, r5, r6, lr}
 278              	.LCFI2:
 279              		.cfi_def_cfa_offset 16
 280              		.cfi_offset 4, -16
 281              		.cfi_offset 5, -12
 282              		.cfi_offset 6, -8
 283              		.cfi_offset 14, -4
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 284              		.loc 1 321 0
 285 0002 0124     		mov	r4, #1
 286 0004 827A     		ldrb	r2, [r0, #10]
 287 0006 231C     		mov	r3, r4
 288 0008 9340     		lsl	r3, r3, r2
 289 000a 1A1C     		mov	r2, r3
 290              	.LVL13:
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialisation mode for the filter */
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 291              		.loc 1 324 0
 292 000c 8021     		mov	r1, #128
 293 000e 334B     		ldr	r3, .L42
 294 0010 8900     		lsl	r1, r1, #2
 295 0012 5D58     		ldr	r5, [r3, r1]
 296 0014 2C43     		orr	r4, r5
 297 0016 5C50     		str	r4, [r3, r1]
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter Deactivation */
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FA1R &= ~(uint32_t)filter_number_bit_pos;
 298              		.loc 1 327 0
 299 0018 8724     		mov	r4, #135
 300 001a A400     		lsl	r4, r4, #2
 301 001c 1D59     		ldr	r5, [r3, r4]
 302 001e D143     		mvn	r1, r2
 303 0020 0D40     		and	r5, r1
 304 0022 1D51     		str	r5, [r3, r4]
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter Scale */
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 305              		.loc 1 330 0
 306 0024 047B     		ldrb	r4, [r0, #12]
 307 0026 002C     		cmp	r4, #0
 308 0028 15D1     		bne	.L34
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 16-bit scale for the filter */
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FS1R &= ~(uint32_t)filter_number_bit_pos;
 309              		.loc 1 333 0
 310 002a 8324     		mov	r4, #131
 311 002c A400     		lsl	r4, r4, #2
 312 002e 1D59     		ldr	r5, [r3, r4]
 313 0030 0D40     		and	r5, r1
 314 0032 1D51     		str	r5, [r3, r4]
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 315              		.loc 1 337 0
 316 0034 847A     		ldrb	r4, [r0, #10]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 317              		.loc 1 338 0
 318 0036 C588     		ldrh	r5, [r0, #6]
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 319              		.loc 1 339 0
 320 0038 4688     		ldrh	r6, [r0, #2]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 321              		.loc 1 338 0
 322 003a 2D04     		lsl	r5, r5, #16
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 323              		.loc 1 337 0
 324 003c 4834     		add	r4, r4, #72
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 325              		.loc 1 338 0
 326 003e 3543     		orr	r5, r6
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 327              		.loc 1 337 0
 328 0040 E400     		lsl	r4, r4, #3
 329 0042 E550     		str	r5, [r4, r3]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 330              		.loc 1 344 0
 331 0044 8588     		ldrh	r5, [r0, #4]
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 332              		.loc 1 345 0
 333 0046 0688     		ldrh	r6, [r0]
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 334              		.loc 1 343 0
 335 0048 847A     		ldrb	r4, [r0, #10]
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 336              		.loc 1 344 0
 337 004a 2D04     		lsl	r5, r5, #16
 338 004c 3543     		orr	r5, r6
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 339              		.loc 1 343 0
 340 004e 244E     		ldr	r6, .L42+4
 341 0050 E400     		lsl	r4, r4, #3
 342 0052 A419     		add	r4, r4, r6
 343 0054 6560     		str	r5, [r4, #4]
 344              	.L34:
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 345              		.loc 1 348 0
 346 0056 047B     		ldrb	r4, [r0, #12]
 347 0058 012C     		cmp	r4, #1
 348 005a 15D1     		bne	.L35
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 32-bit scale for the filter */
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FS1R |= filter_number_bit_pos;
 349              		.loc 1 351 0
 350 005c 8324     		mov	r4, #131
 351 005e A400     		lsl	r4, r4, #2
 352 0060 1D59     		ldr	r5, [r3, r4]
 353 0062 1543     		orr	r5, r2
 354 0064 1D51     		str	r5, [r3, r4]
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 355              		.loc 1 353 0
 356 0066 847A     		ldrb	r4, [r0, #10]
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 357              		.loc 1 354 0
 358 0068 0588     		ldrh	r5, [r0]
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 359              		.loc 1 355 0
 360 006a 4688     		ldrh	r6, [r0, #2]
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 361              		.loc 1 354 0
 362 006c 2D04     		lsl	r5, r5, #16
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 363              		.loc 1 353 0
 364 006e 4834     		add	r4, r4, #72
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 365              		.loc 1 354 0
 366 0070 3543     		orr	r5, r6
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 367              		.loc 1 353 0
 368 0072 E400     		lsl	r4, r4, #3
 369 0074 1D51     		str	r5, [r3, r4]
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 370              		.loc 1 358 0
 371 0076 8588     		ldrh	r5, [r0, #4]
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 372              		.loc 1 359 0
 373 0078 C688     		ldrh	r6, [r0, #6]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 374              		.loc 1 357 0
 375 007a 847A     		ldrb	r4, [r0, #10]
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 376              		.loc 1 358 0
 377 007c 2D04     		lsl	r5, r5, #16
 378 007e 3543     		orr	r5, r6
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 379              		.loc 1 357 0
 380 0080 174E     		ldr	r6, .L42+4
 381 0082 E400     		lsl	r4, r4, #3
 382 0084 A419     		add	r4, r4, r6
 383 0086 6560     		str	r5, [r4, #4]
 384              	.L35:
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter Mode */
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 385              		.loc 1 363 0
 386 0088 C57A     		ldrb	r5, [r0, #11]
 387 008a 8124     		mov	r4, #129
 388 008c A400     		lsl	r4, r4, #2
 389 008e 002D     		cmp	r5, #0
 390 0090 02D1     		bne	.L36
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /*Id/Mask mode for the filter*/
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FM1R &= ~(uint32_t)filter_number_bit_pos;
 391              		.loc 1 366 0
 392 0092 1D59     		ldr	r5, [r3, r4]
 393 0094 0D40     		and	r5, r1
 394 0096 01E0     		b	.L41
 395              	.L36:
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /*Identifier list mode for the filter*/
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FM1R |= (uint32_t)filter_number_bit_pos;
 396              		.loc 1 371 0
 397 0098 1D59     		ldr	r5, [r3, r4]
 398 009a 1543     		orr	r5, r2
 399              	.L41:
 400 009c 1D51     		str	r5, [r3, r4]
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter FIFO assignment */
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 401              		.loc 1 375 0
 402 009e 0489     		ldrh	r4, [r0, #8]
 403 00a0 002C     		cmp	r4, #0
 404 00a2 05D1     		bne	.L38
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* FIFO 0 assignation for the filter */
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 405              		.loc 1 378 0
 406 00a4 8524     		mov	r4, #133
 407 00a6 A400     		lsl	r4, r4, #2
 408 00a8 1D59     		ldr	r5, [r3, r4]
 409 00aa 2940     		and	r1, r5
 410 00ac 1951     		str	r1, [r3, r4]
 411 00ae 06E0     		b	.L39
 412              	.L38:
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 413              		.loc 1 381 0
 414 00b0 012C     		cmp	r4, #1
 415 00b2 04D1     		bne	.L39
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* FIFO 1 assignation for the filter */
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FFA1R |= (uint32_t)filter_number_bit_pos;
 416              		.loc 1 384 0
 417 00b4 8521     		mov	r1, #133
 418 00b6 8900     		lsl	r1, r1, #2
 419 00b8 5C58     		ldr	r4, [r3, r1]
 420 00ba 1443     		orr	r4, r2
 421 00bc 5C50     		str	r4, [r3, r1]
 422              	.L39:
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter activation */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 423              		.loc 1 388 0
 424 00be 417B     		ldrb	r1, [r0, #13]
 425 00c0 0129     		cmp	r1, #1
 426 00c2 04D1     		bne	.L40
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FA1R |= filter_number_bit_pos;
 427              		.loc 1 390 0
 428 00c4 8721     		mov	r1, #135
 429 00c6 8900     		lsl	r1, r1, #2
 430 00c8 5858     		ldr	r0, [r3, r1]
 431              	.LVL14:
 432 00ca 0243     		orr	r2, r0
 433              	.LVL15:
 434 00cc 5A50     		str	r2, [r3, r1]
 435              	.L40:
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Leave the initialisation mode for the filter */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 436              		.loc 1 394 0
 437 00ce 8022     		mov	r2, #128
 438 00d0 9200     		lsl	r2, r2, #2
 439 00d2 9958     		ldr	r1, [r3, r2]
 440 00d4 0120     		mov	r0, #1
 441              	.LVL16:
 442 00d6 8143     		bic	r1, r0
 443 00d8 9950     		str	r1, [r3, r2]
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 444              		.loc 1 395 0
 445              		@ sp needed for prologue
 446 00da 70BD     		pop	{r4, r5, r6, pc}
 447              	.L43:
 448              		.align	2
 449              	.L42:
 450 00dc 00640040 		.word	1073767424
 451 00e0 40660040 		.word	1073768000
 452              		.cfi_endproc
 453              	.LFE35:
 455              		.section	.text.CAN_StructInit,"ax",%progbits
 456              		.align	1
 457              		.global	CAN_StructInit
 458              		.code	16
 459              		.thumb_func
 461              	CAN_StructInit:
 462              	.LFB36:
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 463              		.loc 1 403 0
 464              		.cfi_startproc
 465              	.LVL17:
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Reset CAN init structure parameters values */
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the time triggered communication mode */
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 466              		.loc 1 407 0
 467 0000 0023     		mov	r3, #0
 468 0002 8371     		strb	r3, [r0, #6]
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the automatic bus-off management */
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 469              		.loc 1 410 0
 470 0004 C371     		strb	r3, [r0, #7]
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the automatic wake-up mode */
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 471              		.loc 1 413 0
 472 0006 0372     		strb	r3, [r0, #8]
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the no automatic retransmission */
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 473              		.loc 1 416 0
 474 0008 4372     		strb	r3, [r0, #9]
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the receive FIFO locked mode */
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 475              		.loc 1 419 0
 476 000a 8372     		strb	r3, [r0, #10]
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the transmit FIFO priority */
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 477              		.loc 1 422 0
 478 000c C372     		strb	r3, [r0, #11]
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_Mode member */
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 479              		.loc 1 425 0
 480 000e 8370     		strb	r3, [r0, #2]
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_SJW member */
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 481              		.loc 1 428 0
 482 0010 C370     		strb	r3, [r0, #3]
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_BS1 member */
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 483              		.loc 1 431 0
 484 0012 0323     		mov	r3, #3
 485 0014 0371     		strb	r3, [r0, #4]
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_BS2 member */
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 486              		.loc 1 434 0
 487 0016 0223     		mov	r3, #2
 488 0018 4371     		strb	r3, [r0, #5]
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_Prescaler member */
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 489              		.loc 1 437 0
 490 001a 0123     		mov	r3, #1
 491 001c 0380     		strh	r3, [r0]
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 492              		.loc 1 438 0
 493              		@ sp needed for prologue
 494 001e 7047     		bx	lr
 495              		.cfi_endproc
 496              	.LFE36:
 498              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 499              		.align	1
 500              		.global	CAN_SlaveStartBank
 501              		.code	16
 502              		.thumb_func
 504              	CAN_SlaveStartBank:
 505              	.LFB37:
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 506              		.loc 1 446 0
 507              		.cfi_startproc
 508              	.LVL18:
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Enter Initialisation mode for the filter */
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 509              		.loc 1 451 0
 510 0000 094A     		ldr	r2, .L46
 511 0002 8023     		mov	r3, #128
 512 0004 9B00     		lsl	r3, r3, #2
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 513              		.loc 1 446 0
 514 0006 30B5     		push	{r4, r5, lr}
 515              	.LCFI3:
 516              		.cfi_def_cfa_offset 12
 517              		.cfi_offset 4, -12
 518              		.cfi_offset 5, -8
 519              		.cfi_offset 14, -4
 520              		.loc 1 451 0
 521 0008 D458     		ldr	r4, [r2, r3]
 522 000a 0121     		mov	r1, #1
 523 000c 0C43     		orr	r4, r1
 524 000e D450     		str	r4, [r2, r3]
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Select the start slave bank */
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= (uint32_t)0xFFFFC0F1 ;
 525              		.loc 1 454 0
 526 0010 D558     		ldr	r5, [r2, r3]
 527 0012 064C     		ldr	r4, .L46+4
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 528              		.loc 1 455 0
 529 0014 0002     		lsl	r0, r0, #8
 530              	.LVL19:
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= (uint32_t)0xFFFFC0F1 ;
 531              		.loc 1 454 0
 532 0016 2C40     		and	r4, r5
 533 0018 D450     		str	r4, [r2, r3]
 534              		.loc 1 455 0
 535 001a D458     		ldr	r4, [r2, r3]
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Leave Initialisation mode for the filter */
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 536              		.loc 1 459 0
 537              		@ sp needed for prologue
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 538              		.loc 1 455 0
 539 001c 2043     		orr	r0, r4
 540 001e D050     		str	r0, [r2, r3]
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 541              		.loc 1 458 0
 542 0020 D058     		ldr	r0, [r2, r3]
 543 0022 8843     		bic	r0, r1
 544 0024 D050     		str	r0, [r2, r3]
 545              		.loc 1 459 0
 546 0026 30BD     		pop	{r4, r5, pc}
 547              	.L47:
 548              		.align	2
 549              	.L46:
 550 0028 00640040 		.word	1073767424
 551 002c F1C0FFFF 		.word	-16143
 552              		.cfi_endproc
 553              	.LFE37:
 555              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 556              		.align	1
 557              		.global	CAN_DBGFreeze
 558              		.code	16
 559              		.thumb_func
 561              	CAN_DBGFreeze:
 562              	.LFB38:
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          or DISABLE (CAN is working during debug).
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 563              		.loc 1 471 0
 564              		.cfi_startproc
 565              	.LVL20:
 566 0000 00B5     		push	{lr}
 567              	.LCFI4:
 568              		.cfi_def_cfa_offset 4
 569              		.cfi_offset 14, -4
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Enable Debug Freeze  */
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= MCR_DBF;
 570              		.loc 1 479 0
 571 0002 0268     		ldr	r2, [r0]
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 572              		.loc 1 476 0
 573 0004 0029     		cmp	r1, #0
 574 0006 03D0     		beq	.L49
 575              		.loc 1 479 0
 576 0008 8023     		mov	r3, #128
 577 000a 5B02     		lsl	r3, r3, #9
 578 000c 1343     		orr	r3, r2
 579 000e 01E0     		b	.L51
 580              	.L49:
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Disable Debug Freeze */
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 581              		.loc 1 484 0
 582 0010 014B     		ldr	r3, .L52
 583 0012 1340     		and	r3, r2
 584              	.L51:
 585 0014 0360     		str	r3, [r0]
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 586              		.loc 1 486 0
 587              		@ sp needed for prologue
 588 0016 00BD     		pop	{pc}
 589              	.L53:
 590              		.align	2
 591              	.L52:
 592 0018 FFFFFEFF 		.word	-65537
 593              		.cfi_endproc
 594              	.LFE38:
 596              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 597              		.align	1
 598              		.global	CAN_TTComModeCmd
 599              		.code	16
 600              		.thumb_func
 602              	CAN_TTComModeCmd:
 603              	.LFB39:
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         sent over the CAN bus.  
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         in data byte 7. 
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 604              		.loc 1 500 0
 605              		.cfi_startproc
 606              	.LVL21:
 607 0000 C223     		mov	r3, #194
 608 0002 00B5     		push	{lr}
 609              	.LCFI5:
 610              		.cfi_def_cfa_offset 4
 611              		.cfi_offset 14, -4
 612 0004 8022     		mov	r2, #128
 613 0006 5B00     		lsl	r3, r3, #1
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 614              		.loc 1 504 0
 615 0008 0029     		cmp	r1, #0
 616 000a 11D0     		beq	.L55
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Enable the TTCM mode */
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 617              		.loc 1 507 0
 618 000c 0168     		ldr	r1, [r0]
 619              	.LVL22:
 620 000e 0A43     		orr	r2, r1
 621 0010 0260     		str	r2, [r0]
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set TGT bits */
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 622              		.loc 1 510 0
 623 0012 C158     		ldr	r1, [r0, r3]
 624 0014 8022     		mov	r2, #128
 625 0016 5200     		lsl	r2, r2, #1
 626 0018 1143     		orr	r1, r2
 627 001a C150     		str	r1, [r0, r3]
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 628              		.loc 1 511 0
 629 001c CA23     		mov	r3, #202
 630 001e 5B00     		lsl	r3, r3, #1
 631 0020 C158     		ldr	r1, [r0, r3]
 632 0022 1143     		orr	r1, r2
 633 0024 C150     		str	r1, [r0, r3]
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 634              		.loc 1 512 0
 635 0026 D223     		mov	r3, #210
 636 0028 5B00     		lsl	r3, r3, #1
 637 002a C158     		ldr	r1, [r0, r3]
 638 002c 0A43     		orr	r2, r1
 639 002e 0FE0     		b	.L57
 640              	.LVL23:
 641              	.L55:
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Disable the TTCM mode */
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 642              		.loc 1 517 0
 643 0030 0168     		ldr	r1, [r0]
 644              	.LVL24:
 645 0032 9143     		bic	r1, r2
 646 0034 0160     		str	r1, [r0]
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Reset TGT bits */
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 647              		.loc 1 520 0
 648 0036 C158     		ldr	r1, [r0, r3]
 649 0038 064A     		ldr	r2, .L58
 650 003a 1140     		and	r1, r2
 651 003c C150     		str	r1, [r0, r3]
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 652              		.loc 1 521 0
 653 003e CA23     		mov	r3, #202
 654 0040 5B00     		lsl	r3, r3, #1
 655 0042 C158     		ldr	r1, [r0, r3]
 656 0044 1140     		and	r1, r2
 657 0046 C150     		str	r1, [r0, r3]
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 658              		.loc 1 522 0
 659 0048 D223     		mov	r3, #210
 660 004a 5B00     		lsl	r3, r3, #1
 661 004c C158     		ldr	r1, [r0, r3]
 662 004e 0A40     		and	r2, r1
 663              	.L57:
 664 0050 C250     		str	r2, [r0, r3]
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 665              		.loc 1 524 0
 666              		@ sp needed for prologue
 667 0052 00BD     		pop	{pc}
 668              	.L59:
 669              		.align	2
 670              	.L58:
 671 0054 FFFEFFFF 		.word	-257
 672              		.cfi_endproc
 673              	.LFE39:
 675              		.section	.text.CAN_Transmit,"ax",%progbits
 676              		.align	1
 677              		.global	CAN_Transmit
 678              		.code	16
 679              		.thumb_func
 681              	CAN_Transmit:
 682              	.LFB40:
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ##### CAN Frames Transmission functions #####
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to 
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Check the transmission status of a CAN Frame.
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Cancel a transmit request.
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 683              		.loc 1 554 0
 684              		.cfi_startproc
 685              	.LVL25:
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t transmit_mailbox = 0;
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Select one empty transmit mailbox */
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 686              		.loc 1 563 0
 687 0000 8268     		ldr	r2, [r0, #8]
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 688              		.loc 1 554 0
 689 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 690              	.LCFI6:
 691              		.cfi_def_cfa_offset 20
 692              		.cfi_offset 4, -20
 693              		.cfi_offset 5, -16
 694              		.cfi_offset 6, -12
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 697              		.loc 1 554 0
 698 0004 031C     		mov	r3, r0
 699              		.loc 1 563 0
 700 0006 5001     		lsl	r0, r2, #5
 701 0008 45D4     		bmi	.L66
 702              	.LVL26:
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 0;
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 703              		.loc 1 567 0
 704 000a 9A68     		ldr	r2, [r3, #8]
 705 000c 1401     		lsl	r4, r2, #4
 706 000e 44D4     		bmi	.L67
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 1;
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 707              		.loc 1 571 0
 708 0010 9A68     		ldr	r2, [r3, #8]
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 2;
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 709              		.loc 1 577 0
 710 0012 0420     		mov	r0, #4
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 711              		.loc 1 571 0
 712 0014 D600     		lsl	r6, r2, #3
 713 0016 4FD5     		bpl	.L69
 714 0018 41E0     		b	.L68
 715              	.LVL27:
 716              	.L64:
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set up the Id */
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 717              		.loc 1 587 0
 718 001a 0F68     		ldr	r7, [r1]
 719 001c D658     		ldr	r6, [r2, r3]
 720 001e 7C05     		lsl	r4, r7, #21
 721 0020 2543     		orr	r5, r4
 722 0022 3543     		orr	r5, r6
 723 0024 07E0     		b	.L71
 724              	.L70:
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->RTR);
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 725              		.loc 1 593 0
 726 0026 D658     		ldr	r6, [r2, r3]
 727 0028 B446     		mov	ip, r6
 728 002a 4E68     		ldr	r6, [r1, #4]
 729 002c F700     		lsl	r7, r6, #3
 730 002e 3C43     		orr	r4, r7
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->IDE | \
 731              		.loc 1 594 0
 732 0030 6746     		mov	r7, ip
 733 0032 3C43     		orr	r4, r7
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 734              		.loc 1 593 0
 735 0034 2543     		orr	r5, r4
 736              	.L71:
 737 0036 D550     		str	r5, [r2, r3]
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->RTR);
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set up the DLC */
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 738              		.loc 1 599 0
 739 0038 8A7A     		ldrb	r2, [r1, #10]
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 740              		.loc 1 600 0
 741 003a 041C     		mov	r4, r0
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 742              		.loc 1 599 0
 743 003c 0F25     		mov	r5, #15
 744              		.loc 1 600 0
 745 003e 1834     		add	r4, r4, #24
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 746              		.loc 1 599 0
 747 0040 2A40     		and	r2, r5
 748              		.loc 1 600 0
 749 0042 2401     		lsl	r4, r4, #4
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 750              		.loc 1 599 0
 751 0044 8A72     		strb	r2, [r1, #10]
 752              		.loc 1 600 0
 753 0046 1A19     		add	r2, r3, r4
 754 0048 5668     		ldr	r6, [r2, #4]
 755 004a AE43     		bic	r6, r5
 756 004c 5660     		str	r6, [r2, #4]
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 757              		.loc 1 601 0
 758 004e 5568     		ldr	r5, [r2, #4]
 759 0050 8E7A     		ldrb	r6, [r1, #10]
 760 0052 3543     		orr	r5, r6
 761 0054 5560     		str	r5, [r2, #4]
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set up the data field */
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 762              		.loc 1 604 0
 763 0056 8D7B     		ldrb	r5, [r1, #14]
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 764              		.loc 1 605 0
 765 0058 4A7B     		ldrb	r2, [r1, #13]
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 766              		.loc 1 604 0
 767 005a 2D06     		lsl	r5, r5, #24
 768              		.loc 1 605 0
 769 005c 1204     		lsl	r2, r2, #16
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 770              		.loc 1 604 0
 771 005e 1543     		orr	r5, r2
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 772              		.loc 1 607 0
 773 0060 CA7A     		ldrb	r2, [r1, #11]
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 774              		.loc 1 605 0
 775 0062 1543     		orr	r5, r2
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 776              		.loc 1 606 0
 777 0064 0A7B     		ldrb	r2, [r1, #12]
 778 0066 1202     		lsl	r2, r2, #8
 779 0068 1543     		orr	r5, r2
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 780              		.loc 1 604 0
 781 006a 0201     		lsl	r2, r0, #4
 782 006c 9A18     		add	r2, r3, r2
 783 006e 8932     		add	r2, r2, #137
 784 0070 FF32     		add	r2, r2, #255
 785 0072 1560     		str	r5, [r2]
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 786              		.loc 1 608 0
 787 0074 8E7C     		ldrb	r6, [r1, #18]
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 788              		.loc 1 609 0
 789 0076 4D7C     		ldrb	r5, [r1, #17]
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 790              		.loc 1 608 0
 791 0078 3606     		lsl	r6, r6, #24
 792              		.loc 1 609 0
 793 007a 2D04     		lsl	r5, r5, #16
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 794              		.loc 1 608 0
 795 007c 2E43     		orr	r6, r5
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 796              		.loc 1 611 0
 797 007e CD7B     		ldrb	r5, [r1, #15]
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 798              		.loc 1 609 0
 799 0080 2E43     		orr	r6, r5
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 800              		.loc 1 610 0
 801 0082 0D7C     		ldrb	r5, [r1, #16]
 802 0084 311C     		mov	r1, r6
 803              	.LVL28:
 804 0086 2D02     		lsl	r5, r5, #8
 805 0088 2943     		orr	r1, r5
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 806              		.loc 1 608 0
 807 008a 5160     		str	r1, [r2, #4]
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request transmission */
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 808              		.loc 1 613 0
 809 008c E258     		ldr	r2, [r4, r3]
 810 008e 0121     		mov	r1, #1
 811 0090 0A43     		orr	r2, r1
 812 0092 E250     		str	r2, [r4, r3]
 813 0094 10E0     		b	.L69
 814              	.LVL29:
 815              	.L66:
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 0;
 816              		.loc 1 565 0
 817 0096 0020     		mov	r0, #0
 818 0098 02E0     		b	.L61
 819              	.L67:
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 1;
 820              		.loc 1 569 0
 821 009a 0120     		mov	r0, #1
 822 009c 00E0     		b	.L61
 823              	.L68:
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 2;
 824              		.loc 1 573 0
 825 009e 0220     		mov	r0, #2
 826              	.L61:
 827              	.LVL30:
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 828              		.loc 1 583 0
 829 00a0 021C     		mov	r2, r0
 830 00a2 1832     		add	r2, r2, #24
 831 00a4 1201     		lsl	r2, r2, #4
 832 00a6 D558     		ldr	r5, [r2, r3]
 833 00a8 0124     		mov	r4, #1
 834 00aa 2C40     		and	r4, r5
 835 00ac D450     		str	r4, [r2, r3]
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 836              		.loc 1 584 0
 837 00ae 0C7A     		ldrb	r4, [r1, #8]
 838 00b0 4D7A     		ldrb	r5, [r1, #9]
 839 00b2 002C     		cmp	r4, #0
 840 00b4 B1D0     		beq	.L64
 841 00b6 B6E7     		b	.L70
 842              	.LVL31:
 843              	.L69:
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return transmit_mailbox;
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 844              		.loc 1 616 0
 845              		@ sp needed for prologue
 846 00b8 F0BD     		pop	{r4, r5, r6, r7, pc}
 847              		.cfi_endproc
 848              	.LFE40:
 850              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 851              		.align	1
 852              		.global	CAN_TransmitStatus
 853              		.code	16
 854              		.thumb_func
 856              	CAN_TransmitStatus:
 857              	.LFB41:
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 858              		.loc 1 626 0
 859              		.cfi_startproc
 860              	.LVL32:
 861 0000 00B5     		push	{lr}
 862              	.LCFI7:
 863              		.cfi_def_cfa_offset 4
 864              		.cfi_offset 14, -4
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t state = 0;
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (TransmitMailbox)
 865              		.loc 1 633 0
 866 0002 0129     		cmp	r1, #1
 867 0004 07D0     		beq	.L75
 868 0006 0029     		cmp	r1, #0
 869 0008 02D0     		beq	.L74
 870 000a 0229     		cmp	r1, #2
 871 000c 19D1     		bne	.L86
 872 000e 05E0     		b	.L76
 873              	.L74:
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_0): 
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 874              		.loc 1 636 0
 875 0010 8268     		ldr	r2, [r0, #8]
 876 0012 0E4B     		ldr	r3, .L88
 877 0014 04E0     		b	.L87
 878              	.L75:
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_1): 
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 879              		.loc 1 639 0
 880 0016 8268     		ldr	r2, [r0, #8]
 881 0018 0D4B     		ldr	r3, .L88+4
 882 001a 01E0     		b	.L87
 883              	.L76:
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_2): 
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 884              		.loc 1 642 0
 885 001c 8268     		ldr	r2, [r0, #8]
 886 001e 0D4B     		ldr	r3, .L88+8
 887              	.L87:
 888 0020 1340     		and	r3, r2
 889              	.LVL33:
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default:
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state = CAN_TxStatus_Failed;
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (state)
 890              		.loc 1 648 0
 891 0022 0A4A     		ldr	r2, .L88
 892 0024 9342     		cmp	r3, r2
 893 0026 0AD0     		beq	.L81
 894 0028 03D8     		bhi	.L82
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* transmit pending  */
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 895              		.loc 1 651 0
 896 002a 0220     		mov	r0, #2
 897              	.LVL34:
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (state)
 898              		.loc 1 648 0
 899 002c 002B     		cmp	r3, #0
 900 002e 0BD0     		beq	.L73
 901 0030 09E0     		b	.L84
 902              	.LVL35:
 903              	.L82:
 904 0032 074A     		ldr	r2, .L88+4
 905 0034 9342     		cmp	r3, r2
 906 0036 02D0     		beq	.L81
 907 0038 064A     		ldr	r2, .L88+8
 908 003a 9342     		cmp	r3, r2
 909 003c 03D1     		bne	.L84
 910              	.L81:
 911              	.LVL36:
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* transmit failed  */
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* transmit succeeded  */
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 912              		.loc 1 665 0
 913 003e 0120     		mov	r0, #1
 914              	.LVL37:
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 915              		.loc 1 666 0
 916 0040 02E0     		b	.L73
 917              	.LVL38:
 918              	.L86:
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 919              		.loc 1 651 0
 920 0042 0220     		mov	r0, #2
 921              	.LVL39:
 922 0044 00E0     		b	.L73
 923              	.LVL40:
 924              	.L84:
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 925              		.loc 1 654 0
 926 0046 0020     		mov	r0, #0
 927              	.LVL41:
 928              	.L73:
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default: state = CAN_TxStatus_Failed;
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return (uint8_t) state;
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 929              		.loc 1 671 0
 930              		@ sp needed for prologue
 931 0048 00BD     		pop	{pc}
 932              	.L89:
 933 004a C046     		.align	2
 934              	.L88:
 935 004c 03000004 		.word	67108867
 936 0050 00030008 		.word	134218496
 937 0054 00000310 		.word	268632064
 938              		.cfi_endproc
 939              	.LFE41:
 941              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 942              		.align	1
 943              		.global	CAN_CancelTransmit
 944              		.code	16
 945              		.thumb_func
 947              	CAN_CancelTransmit:
 948              	.LFB42:
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Cancels a transmit request.
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  Mailbox: Mailbox number.
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 949              		.loc 1 680 0
 950              		.cfi_startproc
 951              	.LVL42:
 952 0000 00B5     		push	{lr}
 953              	.LCFI8:
 954              		.cfi_def_cfa_offset 4
 955              		.cfi_offset 14, -4
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* abort transmission */
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (Mailbox)
 956              		.loc 1 685 0
 957 0002 0129     		cmp	r1, #1
 958 0004 07D0     		beq	.L93
 959 0006 0029     		cmp	r1, #0
 960 0008 02D0     		beq	.L92
 961 000a 0229     		cmp	r1, #2
 962 000c 0CD1     		bne	.L90
 963 000e 06E0     		b	.L94
 964              	.L92:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 965              		.loc 1 687 0
 966 0010 8368     		ldr	r3, [r0, #8]
 967 0012 8022     		mov	r2, #128
 968 0014 06E0     		b	.L95
 969              	.L93:
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 970              		.loc 1 689 0
 971 0016 8023     		mov	r3, #128
 972 0018 8268     		ldr	r2, [r0, #8]
 973 001a 1B02     		lsl	r3, r3, #8
 974 001c 02E0     		b	.L95
 975              	.L94:
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 976              		.loc 1 691 0
 977 001e 8023     		mov	r3, #128
 978 0020 8268     		ldr	r2, [r0, #8]
 979 0022 1B04     		lsl	r3, r3, #16
 980              	.L95:
 981 0024 1343     		orr	r3, r2
 982 0026 8360     		str	r3, [r0, #8]
 983              	.L90:
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default:
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 984              		.loc 1 696 0
 985              		@ sp needed for prologue
 986 0028 00BD     		pop	{pc}
 987              		.cfi_endproc
 988              	.LFE42:
 990              		.section	.text.CAN_Receive,"ax",%progbits
 991              		.align	1
 992              		.global	CAN_Receive
 993              		.code	16
 994              		.thumb_func
 996              	CAN_Receive:
 997              	.LFB43:
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Frames Reception functions 
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   ##### CAN Frames Reception functions #####
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to 
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Receive a correct CAN frame.
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Release a specified receive FIFO (2 FIFOs are available).
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the number of the pending received CAN frames.
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Receives a correct CAN frame.
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 998              		.loc 1 727 0
 999              		.cfi_startproc
 1000              	.LVL43:
 1001 0000 70B5     		push	{r4, r5, r6, lr}
 1002              	.LCFI9:
 1003              		.cfi_def_cfa_offset 16
 1004              		.cfi_offset 4, -16
 1005              		.cfi_offset 5, -12
 1006              		.cfi_offset 6, -8
 1007              		.cfi_offset 14, -4
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the Id */
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1008              		.loc 1 732 0
 1009 0002 0C1C     		mov	r4, r1
 1010 0004 1B34     		add	r4, r4, #27
 1011 0006 2301     		lsl	r3, r4, #4
 1012 0008 1E58     		ldr	r6, [r3, r0]
 1013 000a 0425     		mov	r5, #4
 1014 000c 3540     		and	r5, r6
 1015 000e 1572     		strb	r5, [r2, #8]
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 1016              		.loc 1 735 0
 1017 0010 1B58     		ldr	r3, [r3, r0]
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1018              		.loc 1 733 0
 1019 0012 02D1     		bne	.L97
 1020              		.loc 1 735 0
 1021 0014 5B0D     		lsr	r3, r3, #21
 1022 0016 1360     		str	r3, [r2]
 1023 0018 01E0     		b	.L98
 1024              	.L97:
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 1025              		.loc 1 739 0
 1026 001a DB08     		lsr	r3, r3, #3
 1027 001c 5360     		str	r3, [r2, #4]
 1028              	.L98:
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1029              		.loc 1 742 0
 1030 001e 2301     		lsl	r3, r4, #4
 1031 0020 1D58     		ldr	r5, [r3, r0]
 1032 0022 0224     		mov	r4, #2
 1033 0024 2C40     		and	r4, r5
 1034 0026 5472     		strb	r4, [r2, #9]
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the DLC */
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 1035              		.loc 1 744 0
 1036 0028 C318     		add	r3, r0, r3
 1037 002a 5D68     		ldr	r5, [r3, #4]
 1038 002c 0F24     		mov	r4, #15
 1039 002e 2C40     		and	r4, r5
 1040 0030 9472     		strb	r4, [r2, #10]
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the FMI */
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1041              		.loc 1 746 0
 1042 0032 5B68     		ldr	r3, [r3, #4]
 1043 0034 1B0A     		lsr	r3, r3, #8
 1044 0036 D374     		strb	r3, [r2, #19]
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the data field */
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1045              		.loc 1 748 0
 1046 0038 0B01     		lsl	r3, r1, #4
 1047 003a C318     		add	r3, r0, r3
 1048 003c B933     		add	r3, r3, #185
 1049 003e FF33     		add	r3, r3, #255
 1050 0040 1C68     		ldr	r4, [r3]
 1051 0042 D472     		strb	r4, [r2, #11]
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1052              		.loc 1 749 0
 1053 0044 1C68     		ldr	r4, [r3]
 1054 0046 240A     		lsr	r4, r4, #8
 1055 0048 1473     		strb	r4, [r2, #12]
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1056              		.loc 1 750 0
 1057 004a 1C68     		ldr	r4, [r3]
 1058 004c 240C     		lsr	r4, r4, #16
 1059 004e 5473     		strb	r4, [r2, #13]
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1060              		.loc 1 751 0
 1061 0050 1C68     		ldr	r4, [r3]
 1062 0052 240E     		lsr	r4, r4, #24
 1063 0054 9473     		strb	r4, [r2, #14]
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1064              		.loc 1 752 0
 1065 0056 5C68     		ldr	r4, [r3, #4]
 1066 0058 D473     		strb	r4, [r2, #15]
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1067              		.loc 1 753 0
 1068 005a 5C68     		ldr	r4, [r3, #4]
 1069 005c 240A     		lsr	r4, r4, #8
 1070 005e 1474     		strb	r4, [r2, #16]
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1071              		.loc 1 754 0
 1072 0060 5C68     		ldr	r4, [r3, #4]
 1073 0062 240C     		lsr	r4, r4, #16
 1074 0064 5474     		strb	r4, [r2, #17]
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1075              		.loc 1 755 0
 1076 0066 5B68     		ldr	r3, [r3, #4]
 1077 0068 1B0E     		lsr	r3, r3, #24
 1078 006a 9374     		strb	r3, [r2, #18]
 1079 006c 2023     		mov	r3, #32
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release the FIFO */
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO0 */
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1080              		.loc 1 758 0
 1081 006e 0029     		cmp	r1, #0
 1082 0070 03D1     		bne	.L99
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 1083              		.loc 1 760 0
 1084 0072 C268     		ldr	r2, [r0, #12]
 1085              	.LVL44:
 1086 0074 1343     		orr	r3, r2
 1087 0076 C360     		str	r3, [r0, #12]
 1088 0078 02E0     		b	.L96
 1089              	.LVL45:
 1090              	.L99:
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO1 */
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 1091              		.loc 1 765 0
 1092 007a 0269     		ldr	r2, [r0, #16]
 1093              	.LVL46:
 1094 007c 1343     		orr	r3, r2
 1095 007e 0361     		str	r3, [r0, #16]
 1096              	.L96:
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1097              		.loc 1 767 0
 1098              		@ sp needed for prologue
 1099 0080 70BD     		pop	{r4, r5, r6, pc}
 1100              		.cfi_endproc
 1101              	.LFE43:
 1103              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1104              		.align	1
 1105              		.global	CAN_FIFORelease
 1106              		.code	16
 1107              		.thumb_func
 1109              	CAN_FIFORelease:
 1110              	.LFB44:
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Releases the specified receive FIFO.
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1111              		.loc 1 776 0
 1112              		.cfi_startproc
 1113              	.LVL47:
 1114 0000 00B5     		push	{lr}
 1115              	.LCFI10:
 1116              		.cfi_def_cfa_offset 4
 1117              		.cfi_offset 14, -4
 1118 0002 2023     		mov	r3, #32
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO0 */
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1119              		.loc 1 781 0
 1120 0004 0029     		cmp	r1, #0
 1121 0006 03D1     		bne	.L102
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 1122              		.loc 1 783 0
 1123 0008 C268     		ldr	r2, [r0, #12]
 1124 000a 1343     		orr	r3, r2
 1125 000c C360     		str	r3, [r0, #12]
 1126 000e 02E0     		b	.L101
 1127              	.L102:
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO1 */
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 1128              		.loc 1 788 0
 1129 0010 0269     		ldr	r2, [r0, #16]
 1130 0012 1343     		orr	r3, r2
 1131 0014 0361     		str	r3, [r0, #16]
 1132              	.L101:
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1133              		.loc 1 790 0
 1134              		@ sp needed for prologue
 1135 0016 00BD     		pop	{pc}
 1136              		.cfi_endproc
 1137              	.LFE44:
 1139              		.section	.text.CAN_MessagePending,"ax",%progbits
 1140              		.align	1
 1141              		.global	CAN_MessagePending
 1142              		.code	16
 1143              		.thumb_func
 1145              	CAN_MessagePending:
 1146              	.LFB45:
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the number of pending received messages.
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1147              		.loc 1 799 0
 1148              		.cfi_startproc
 1149              	.LVL48:
 1150 0000 00B5     		push	{lr}
 1151              	.LCFI11:
 1152              		.cfi_def_cfa_offset 4
 1153              		.cfi_offset 14, -4
 1154              		.loc 1 799 0
 1155 0002 031C     		mov	r3, r0
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t message_pending=0;
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1156              		.loc 1 804 0
 1157 0004 0029     		cmp	r1, #0
 1158 0006 01D1     		bne	.L105
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 1159              		.loc 1 806 0
 1160 0008 C068     		ldr	r0, [r0, #12]
 1161              	.LVL49:
 1162 000a 03E0     		b	.L108
 1163              	.LVL50:
 1164              	.L105:
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = 0;
 1165              		.loc 1 814 0
 1166 000c 0020     		mov	r0, #0
 1167              	.LVL51:
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 1168              		.loc 1 808 0
 1169 000e 0129     		cmp	r1, #1
 1170 0010 02D1     		bne	.L106
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 1171              		.loc 1 810 0
 1172 0012 1869     		ldr	r0, [r3, #16]
 1173              	.L108:
 1174 0014 0323     		mov	r3, #3
 1175              	.LVL52:
 1176 0016 1840     		and	r0, r3
 1177              	.LVL53:
 1178              	.L106:
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return message_pending;
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1179              		.loc 1 817 0
 1180              		@ sp needed for prologue
 1181 0018 00BD     		pop	{pc}
 1182              		.cfi_endproc
 1183              	.LFE45:
 1185              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1186              		.align	1
 1187              		.global	CAN_OperatingModeRequest
 1188              		.code	16
 1189              		.thumb_func
 1191              	CAN_OperatingModeRequest:
 1192              	.LFB46:
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Operation modes functions 
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                     ##### CAN Operation modes functions #####
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes:
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) sleep mode.
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) normal mode. 
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) initialization mode.
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Selects the CAN Operation mode.
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval status of the requested mode which can be: 
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1193              		.loc 1 849 0
 1194              		.cfi_startproc
 1195              	.LVL54:
 1196 0000 00B5     		push	{lr}
 1197              	.LCFI12:
 1198              		.cfi_def_cfa_offset 4
 1199              		.cfi_offset 14, -4
 1200              		.loc 1 849 0
 1201 0002 031C     		mov	r3, r0
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 1202              		.loc 1 859 0
 1203 0004 0029     		cmp	r1, #0
 1204 0006 13D1     		bne	.L110
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request initialisation */
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 1205              		.loc 1 862 0
 1206 0008 0268     		ldr	r2, [r0]
 1207 000a 0321     		mov	r1, #3
 1208              	.LVL55:
 1209 000c 8A43     		bic	r2, r1
 1210 000e 0120     		mov	r0, #1
 1211              	.LVL56:
 1212 0010 0243     		orr	r2, r0
 1213 0012 1A60     		str	r2, [r3]
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Wait the acknowledge */
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1214              		.loc 1 865 0
 1215 0014 8022     		mov	r2, #128
 1216 0016 5204     		lsl	r2, r2, #17
 1217              	.LVL57:
 1218              	.L112:
 1219              		.loc 1 865 0 is_stmt 0 discriminator 1
 1220 0018 5868     		ldr	r0, [r3, #4]
 1221 001a 0840     		and	r0, r1
 1222 001c 0128     		cmp	r0, #1
 1223 001e 02D0     		beq	.L111
 1224 0020 013A     		sub	r2, r2, #1
 1225              		.loc 1 865 0 discriminator 2
 1226 0022 002A     		cmp	r2, #0
 1227 0024 F8D1     		bne	.L112
 1228              	.L111:
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       timeout--;
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 1229              		.loc 1 869 0 is_stmt 1
 1230 0026 5868     		ldr	r0, [r3, #4]
 1231 0028 0323     		mov	r3, #3
 1232              	.LVL58:
 1233 002a 1840     		and	r0, r3
 1234 002c 0138     		sub	r0, r0, #1
 1235 002e 26E0     		b	.L132
 1236              	.LVL59:
 1237              	.L110:
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Failed;
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 1238              		.loc 1 878 0
 1239 0030 0129     		cmp	r1, #1
 1240 0032 0FD1     		bne	.L114
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 1241              		.loc 1 881 0
 1242 0034 0268     		ldr	r2, [r0]
 1243 0036 0321     		mov	r1, #3
 1244              	.LVL60:
 1245 0038 8A43     		bic	r2, r1
 1246 003a 0260     		str	r2, [r0]
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Wait the acknowledge */
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1247              		.loc 1 884 0
 1248 003c 8022     		mov	r2, #128
 1249 003e 5204     		lsl	r2, r2, #17
 1250              	.LVL61:
 1251              	.L116:
 1252              		.loc 1 884 0 is_stmt 0 discriminator 1
 1253 0040 5868     		ldr	r0, [r3, #4]
 1254 0042 0842     		tst	r0, r1
 1255 0044 02D0     		beq	.L115
 1256 0046 013A     		sub	r2, r2, #1
 1257              		.loc 1 884 0 discriminator 2
 1258 0048 002A     		cmp	r2, #0
 1259 004a F9D1     		bne	.L116
 1260              	.L115:
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       timeout--;
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 1261              		.loc 1 888 0 is_stmt 1
 1262 004c 5868     		ldr	r0, [r3, #4]
 1263 004e 0323     		mov	r3, #3
 1264              	.LVL62:
 1265 0050 1840     		and	r0, r3
 1266 0052 14E0     		b	.L132
 1267              	.LVL63:
 1268              	.L114:
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Failed;
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request Sleep mode */
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Wait the acknowledge */
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       timeout--;
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Failed;
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     status = CAN_ModeStatus_Failed;
 1269              		.loc 1 918 0
 1270 0054 0020     		mov	r0, #0
 1271              	.LVL64:
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 1272              		.loc 1 897 0
 1273 0056 0229     		cmp	r1, #2
 1274 0058 13D1     		bne	.L113
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1275              		.loc 1 900 0
 1276 005a 1A68     		ldr	r2, [r3]
 1277 005c 0320     		mov	r0, #3
 1278 005e 8243     		bic	r2, r0
 1279 0060 1143     		orr	r1, r2
 1280              	.LVL65:
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1281              		.loc 1 903 0
 1282 0062 8022     		mov	r2, #128
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1283              		.loc 1 900 0
 1284 0064 1960     		str	r1, [r3]
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1285              		.loc 1 903 0
 1286 0066 5204     		lsl	r2, r2, #17
 1287              	.LVL66:
 1288              	.L118:
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1289              		.loc 1 903 0 is_stmt 0 discriminator 1
 1290 0068 5968     		ldr	r1, [r3, #4]
 1291 006a 0140     		and	r1, r0
 1292 006c 0229     		cmp	r1, #2
 1293 006e 02D0     		beq	.L117
 1294 0070 013A     		sub	r2, r2, #1
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1295              		.loc 1 903 0 discriminator 2
 1296 0072 002A     		cmp	r2, #0
 1297 0074 F8D1     		bne	.L118
 1298              	.L117:
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 1299              		.loc 1 907 0 is_stmt 1
 1300 0076 5868     		ldr	r0, [r3, #4]
 1301 0078 0323     		mov	r3, #3
 1302              	.LVL67:
 1303 007a 1840     		and	r0, r3
 1304 007c 0238     		sub	r0, r0, #2
 1305              	.L132:
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 1306              		.loc 1 875 0
 1307 007e 4342     		neg	r3, r0
 1308 0080 5841     		adc	r0, r0, r3
 1309              	.L113:
 1310              	.LVL68:
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return  (uint8_t) status;
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1311              		.loc 1 922 0
 1312              		@ sp needed for prologue
 1313 0082 00BD     		pop	{pc}
 1314              		.cfi_endproc
 1315              	.LFE46:
 1317              		.section	.text.CAN_Sleep,"ax",%progbits
 1318              		.align	1
 1319              		.global	CAN_Sleep
 1320              		.code	16
 1321              		.thumb_func
 1323              	CAN_Sleep:
 1324              	.LFB47:
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1325              		.loc 1 930 0
 1326              		.cfi_startproc
 1327              	.LVL69:
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Request Sleep mode */
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1328              		.loc 1 937 0
 1329 0000 0268     		ldr	r2, [r0]
 1330 0002 0323     		mov	r3, #3
 1331 0004 9A43     		bic	r2, r3
 1332 0006 0221     		mov	r1, #2
 1333 0008 0A43     		orr	r2, r1
 1334 000a 0260     		str	r2, [r0]
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Sleep mode status */
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 1335              		.loc 1 940 0
 1336 000c 4068     		ldr	r0, [r0, #4]
 1337              	.LVL70:
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Sleep mode not entered */
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* return sleep mode status */
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    return (uint8_t)sleepstatus;
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1338              		.loc 1 947 0
 1339              		@ sp needed for prologue
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 1340              		.loc 1 940 0
 1341 000e 0340     		and	r3, r0
 1342 0010 981E     		sub	r0, r3, #2
 1343              	.LVL71:
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    return (uint8_t)sleepstatus;
 1344              		.loc 1 946 0
 1345 0012 4342     		neg	r3, r0
 1346 0014 5841     		adc	r0, r0, r3
 1347              		.loc 1 947 0
 1348 0016 7047     		bx	lr
 1349              		.cfi_endproc
 1350              	.LFE47:
 1352              		.section	.text.CAN_WakeUp,"ax",%progbits
 1353              		.align	1
 1354              		.global	CAN_WakeUp
 1355              		.code	16
 1356              		.thumb_func
 1358              	CAN_WakeUp:
 1359              	.LFB48:
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1360              		.loc 1 955 0
 1361              		.cfi_startproc
 1362              	.LVL72:
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Wake up request */
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 1363              		.loc 1 963 0
 1364 0000 0368     		ldr	r3, [r0]
 1365 0002 0222     		mov	r2, #2
 1366 0004 9343     		bic	r3, r2
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1367              		.loc 1 955 0
 1368 0006 00B5     		push	{lr}
 1369              	.LCFI13:
 1370              		.cfi_def_cfa_offset 4
 1371              		.cfi_offset 14, -4
 1372              		.loc 1 963 0
 1373 0008 0360     		str	r3, [r0]
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Sleep mode status */
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1374              		.loc 1 966 0
 1375 000a 8023     		mov	r3, #128
 1376 000c 5B04     		lsl	r3, r3, #17
 1377              	.LVL73:
 1378              	.L136:
 1379              		.loc 1 966 0 is_stmt 0 discriminator 1
 1380 000e 4168     		ldr	r1, [r0, #4]
 1381 0010 1142     		tst	r1, r2
 1382 0012 02D0     		beq	.L135
 1383 0014 013B     		sub	r3, r3, #1
 1384              		.loc 1 966 0 discriminator 2
 1385 0016 002B     		cmp	r3, #0
 1386 0018 F9D1     		bne	.L136
 1387              	.L135:
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    wait_slak--;
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 1388              		.loc 1 970 0 is_stmt 1
 1389 001a 4368     		ldr	r3, [r0, #4]
 1390              	.LVL74:
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* wake up done : Sleep mode exited */
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* return wakeup status */
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return (uint8_t)wakeupstatus;
 1391              		.loc 1 976 0
 1392 001c 0120     		mov	r0, #1
 1393              	.LVL75:
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 1394              		.loc 1 970 0
 1395 001e 5B08     		lsr	r3, r3, #1
 1396              	.LVL76:
 1397              		.loc 1 976 0
 1398 0020 9843     		bic	r0, r3
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1399              		.loc 1 977 0
 1400              		@ sp needed for prologue
 1401 0022 00BD     		pop	{pc}
 1402              		.cfi_endproc
 1403              	.LFE48:
 1405              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1406              		.align	1
 1407              		.global	CAN_GetLastErrorCode
 1408              		.code	16
 1409              		.thumb_func
 1411              	CAN_GetLastErrorCode:
 1412              	.LFB49:
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Bus Error management functions 
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   ##### CAN Bus Error management functions #####
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the CANx's last error code (LEC).
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the CANx Receive Error Counter (REC).
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..]
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (@) If TEC is greater than 255, The CAN is in bus-off state.
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (@) If REC or TEC are greater than 96, an Error warning flag occurs.
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (@) If REC or TEC are greater than 127, an Error Passive Flag occurs.
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                         
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval Error code: 
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1413              		.loc 1 1017 0
 1414              		.cfi_startproc
 1415              	.LVL77:
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t errorcode=0;
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the error code*/
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 1416              		.loc 1 1024 0
 1417 0000 8069     		ldr	r0, [r0, #24]
 1418              	.LVL78:
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the error code*/
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return errorcode;
 1419              		.loc 1 1027 0
 1420 0002 7023     		mov	r3, #112
 1421 0004 1840     		and	r0, r3
 1422              	.LVL79:
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1423              		.loc 1 1028 0
 1424              		@ sp needed for prologue
 1425 0006 7047     		bx	lr
 1426              		.cfi_endproc
 1427              	.LFE49:
 1429              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1430              		.align	1
 1431              		.global	CAN_GetReceiveErrorCounter
 1432              		.code	16
 1433              		.thumb_func
 1435              	CAN_GetReceiveErrorCounter:
 1436              	.LFB50:
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         standard. After every successful reception, the counter is 
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         error passive state.  
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN Receive Error Counter. 
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1437              		.loc 1 1042 0
 1438              		.cfi_startproc
 1439              	.LVL80:
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t counter=0;
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the Receive Error Counter*/
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 1440              		.loc 1 1049 0
 1441 0000 8069     		ldr	r0, [r0, #24]
 1442              	.LVL81:
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the Receive Error Counter*/
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1443              		.loc 1 1053 0
 1444              		@ sp needed for prologue
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
 1445              		.loc 1 1052 0
 1446 0002 000E     		lsr	r0, r0, #24
 1447              	.LVL82:
 1448              		.loc 1 1053 0
 1449 0004 7047     		bx	lr
 1450              		.cfi_endproc
 1451              	.LFE50:
 1453              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1454              		.align	1
 1455              		.global	CAN_GetLSBTransmitErrorCounter
 1456              		.code	16
 1457              		.thumb_func
 1459              	CAN_GetLSBTransmitErrorCounter:
 1460              	.LFB51:
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1461              		.loc 1 1062 0
 1462              		.cfi_startproc
 1463              	.LVL83:
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t counter=0;
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 1464              		.loc 1 1069 0
 1465 0000 8069     		ldr	r0, [r0, #24]
 1466              	.LVL84:
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1467              		.loc 1 1073 0
 1468              		@ sp needed for prologue
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 1469              		.loc 1 1069 0
 1470 0002 0002     		lsl	r0, r0, #8
 1471              	.LVL85:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
 1472              		.loc 1 1072 0
 1473 0004 000E     		lsr	r0, r0, #24
 1474              		.loc 1 1073 0
 1475 0006 7047     		bx	lr
 1476              		.cfi_endproc
 1477              	.LFE51:
 1479              		.section	.text.CAN_ITConfig,"ax",%progbits
 1480              		.align	1
 1481              		.global	CAN_ITConfig
 1482              		.code	16
 1483              		.thumb_func
 1485              	CAN_ITConfig:
 1486              	.LFB52:
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief   Interrupts and flags management functions
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim   
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****               ##### Interrupts and flags management functions #####
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to configure the CAN Interrupts 
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          and to get the status and clear flags and Interrupts pending bits.
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] The CAN provides 14 Interrupts sources and 15 Flags:
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *** Flags ***
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   =============
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Transmit Flags:
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_RQCP0. 
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_RQCP1. 
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_RQCP2: Request completed MailBoxes 0, 1 and 2  Flags
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when when the last request (transmit or abort) has 
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   been performed. 
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Receive Flags:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FMP0.
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FMP1: FIFO 0 and 1 Message Pending Flags; 
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set to signal that messages are pending in the receive FIFO.
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   These Flags are cleared only by hardware. 
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FF0.
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FF1: FIFO 0 and 1 Full Flags; 
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when three messages are stored in the selected FIFO.                        
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FOV0.              
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FOV1: FIFO 0 and 1 Overrun Flags; 
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when a new message has been received and passed the filter 
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   while the FIFO was full.         
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Operating Mode Flags: 
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_WKU: Wake up Flag; 
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set to signal that a SOF bit has been detected while the CAN 
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   hardware was in Sleep mode. 
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_SLAK: Sleep acknowledge Flag;
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set to signal that the CAN has entered Sleep Mode. 
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Error Flags:  
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_EWG: Error Warning Flag;
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when the warning limit has been reached (Receive Error Counter 
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   or Transmit Error Counter greater than 96). 
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_EPV: Error Passive Flag;
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when the Error Passive limit has been reached (Receive Error 
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Counter or Transmit Error Counter greater than 127).
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_BOF: Bus-Off Flag;
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when CAN enters the bus-off state. The bus-off state is 
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   entered on TEC overflow, greater than 255.
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_LEC: Last error code Flag;
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set If a message has been transferred (reception or transmission) 
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   with error, and the error code is hold.                      
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *** Interrupts ***
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ==================
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Transmit interrupt:   
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_TME: Transmit mailbox empty Interrupt;
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when no transmit 
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   request are pending for Tx mailboxes.      
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Receive Interrupts:   
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FMP0.
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FMP1: FIFO 0 and FIFO1 message pending Interrupts;
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, these interrupt sources are pending when messages 
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   are pending in the receive FIFO.
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   The corresponding interrupt pending bits are cleared only by hardware.
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FF0.              
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FF1: FIFO 0 and FIFO1 full Interrupts;
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, these interrupt sources are pending when three messages 
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   are stored in the selected FIFO.
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FOV0.        
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FOV1: FIFO 0 and FIFO1 overrun Interrupts;        
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, these interrupt sources are pending when a new message 
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   has been received and passed the filter while the FIFO was full.
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Operating Mode Interrupts:    
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_WKU: Wake-up Interrupt;
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when a SOF bit has 
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   been detected while the CAN hardware was in Sleep mode.
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_SLK: Sleep acknowledge Interrupt:
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when the CAN has 
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   entered Sleep Mode.       
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Error Interrupts:     
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_EWG: Error warning Interrupt; 
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when the warning limit 
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   has been reached (Receive Error Counter or Transmit Error Counter=96). 
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_EPV: Error passive Interrupt;        
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when the Error Passive 
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   limit has been reached (Receive Error Counter or Transmit Error Counter>127).
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_BOF: Bus-off Interrupt;
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when CAN enters 
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   the bus-off state. The bus-off state is entered on TEC overflow, 
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   greater than 255.
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_LEC: Last error code Interrupt;        
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when a message has 
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   been transferred (reception or transmission) with error and the 
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   error code is hold.
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_ERR: Error Interrupt;
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when an error condition 
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   is pending.      
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] Managing the CAN controller events: 
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          The user should identify which mode will be used in his application to manage 
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          the CAN controller events: Polling mode or Interrupt mode.
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) In the Polling Mode it is advised to use the following functions:
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_GetFlagStatus() : to check if flags events occur. 
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_ClearFlag()     : to clear the flags events.
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) In the Interrupt Mode it is advised to use the following functions:
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   (corresponding Flag).
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   pending bits since there are cleared only by hardware. 
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */ 
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be: 
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1487              		.loc 1 1221 0
 1488              		.cfi_startproc
 1489              	.LVL86:
 1490 0000 00B5     		push	{lr}
 1491              	.LCFI14:
 1492              		.cfi_def_cfa_offset 4
 1493              		.cfi_offset 14, -4
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Enable the selected CANx interrupt */
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER |= CAN_IT;
 1494              		.loc 1 1230 0
 1495 0002 4369     		ldr	r3, [r0, #20]
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 1496              		.loc 1 1227 0
 1497 0004 002A     		cmp	r2, #0
 1498 0006 02D0     		beq	.L145
 1499              		.loc 1 1230 0
 1500 0008 1943     		orr	r1, r3
 1501              	.LVL87:
 1502 000a 4161     		str	r1, [r0, #20]
 1503 000c 01E0     		b	.L144
 1504              	.LVL88:
 1505              	.L145:
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Disable the selected CANx interrupt */
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER &= ~CAN_IT;
 1506              		.loc 1 1235 0
 1507 000e 8B43     		bic	r3, r1
 1508 0010 4361     		str	r3, [r0, #20]
 1509              	.LVL89:
 1510              	.L144:
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1511              		.loc 1 1237 0
 1512              		@ sp needed for prologue
 1513 0012 00BD     		pop	{pc}
 1514              		.cfi_endproc
 1515              	.LFE52:
 1517              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1518              		.align	1
 1519              		.global	CAN_GetFlagStatus
 1520              		.code	16
 1521              		.thumb_func
 1523              	CAN_GetFlagStatus:
 1524              	.LFB53:
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1525              		.loc 1 1261 0
 1526              		.cfi_startproc
 1527              	.LVL90:
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   FlagStatus bitstatus = RESET;
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 1528              		.loc 1 1269 0
 1529 0000 F023     		mov	r3, #240
 1530 0002 1B04     		lsl	r3, r3, #16
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1531              		.loc 1 1261 0
 1532 0004 00B5     		push	{lr}
 1533              	.LCFI15:
 1534              		.cfi_def_cfa_offset 4
 1535              		.cfi_offset 14, -4
 1536              		.loc 1 1269 0
 1537 0006 1942     		tst	r1, r3
 1538 0008 01D0     		beq	.L148
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1539              		.loc 1 1272 0
 1540 000a 8069     		ldr	r0, [r0, #24]
 1541              	.LVL91:
 1542 000c 0CE0     		b	.L153
 1543              	.LVL92:
 1544              	.L148:
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 1545              		.loc 1 1283 0
 1546 000e CB01     		lsl	r3, r1, #7
 1547 0010 01D5     		bpl	.L150
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1548              		.loc 1 1286 0
 1549 0012 4068     		ldr	r0, [r0, #4]
 1550              	.LVL93:
 1551 0014 08E0     		b	.L153
 1552              	.LVL94:
 1553              	.L150:
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 1554              		.loc 1 1297 0
 1555 0016 0B01     		lsl	r3, r1, #4
 1556 0018 01D5     		bpl	.L151
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1557              		.loc 1 1300 0
 1558 001a 8068     		ldr	r0, [r0, #8]
 1559              	.LVL95:
 1560 001c 04E0     		b	.L153
 1561              	.LVL96:
 1562              	.L151:
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 1563              		.loc 1 1311 0
 1564 001e 8B01     		lsl	r3, r1, #6
 1565 0020 01D5     		bpl	.L152
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1566              		.loc 1 1314 0
 1567 0022 C068     		ldr	r0, [r0, #12]
 1568              	.LVL97:
 1569 0024 00E0     		b	.L153
 1570              	.LVL98:
 1571              	.L152:
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1572              		.loc 1 1328 0
 1573 0026 0069     		ldr	r0, [r0, #16]
 1574              	.LVL99:
 1575              	.L153:
 1576 0028 0003     		lsl	r0, r0, #12
 1577 002a 000B     		lsr	r0, r0, #12
 1578 002c 0140     		and	r1, r0
 1579              	.LVL100:
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
 1580              		.loc 1 1280 0
 1581 002e 081C     		mov	r0, r1
 1582 0030 411E     		sub	r1, r0, #1
 1583 0032 8841     		sbc	r0, r0, r1
 1584              	.LVL101:
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the CAN_FLAG status */
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return  bitstatus;
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1585              		.loc 1 1341 0
 1586              		@ sp needed for prologue
 1587 0034 00BD     		pop	{pc}
 1588              		.cfi_endproc
 1589              	.LFE53:
 1591              		.section	.text.CAN_ClearFlag,"ax",%progbits
 1592              		.align	1
 1593              		.global	CAN_ClearFlag
 1594              		.code	16
 1595              		.thumb_func
 1597              	CAN_ClearFlag:
 1598              	.LFB54:
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Clears the CAN's pending flags.
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1599              		.loc 1 1361 0
 1600              		.cfi_startproc
 1601              	.LVL102:
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t flagtmp=0;
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 1602              		.loc 1 1367 0
 1603 0000 0B4B     		ldr	r3, .L160
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1604              		.loc 1 1361 0
 1605 0002 00B5     		push	{lr}
 1606              	.LCFI16:
 1607              		.cfi_def_cfa_offset 4
 1608              		.cfi_offset 14, -4
 1609              		.loc 1 1367 0
 1610 0004 9942     		cmp	r1, r3
 1611 0006 02D1     		bne	.L155
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Clear the selected CAN flags */
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->ESR = (uint32_t)RESET;
 1612              		.loc 1 1370 0
 1613 0008 0023     		mov	r3, #0
 1614 000a 8361     		str	r3, [r0, #24]
 1615 000c 0EE0     		b	.L154
 1616              	.L155:
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
 1617              		.loc 1 1374 0
 1618 000e 0B03     		lsl	r3, r1, #12
 1619 0010 1B0B     		lsr	r3, r3, #12
 1620              	.LVL103:
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 1621              		.loc 1 1376 0
 1622 0012 8A01     		lsl	r2, r1, #6
 1623 0014 01D5     		bpl	.L157
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Receive Flags */
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
 1624              		.loc 1 1379 0
 1625 0016 C360     		str	r3, [r0, #12]
 1626 0018 08E0     		b	.L154
 1627              	.L157:
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 1628              		.loc 1 1381 0
 1629 001a 4A01     		lsl	r2, r1, #5
 1630 001c 01D5     		bpl	.L158
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Receive Flags */
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
 1631              		.loc 1 1384 0
 1632 001e 0361     		str	r3, [r0, #16]
 1633 0020 04E0     		b	.L154
 1634              	.L158:
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 1635              		.loc 1 1386 0
 1636 0022 0A01     		lsl	r2, r1, #4
 1637 0024 01D5     		bpl	.L159
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Transmit Flags */
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
 1638              		.loc 1 1389 0
 1639 0026 8360     		str	r3, [r0, #8]
 1640 0028 00E0     		b	.L154
 1641              	.L159:
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Operating mode Flags */
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
 1642              		.loc 1 1394 0
 1643 002a 4360     		str	r3, [r0, #4]
 1644              	.LVL104:
 1645              	.L154:
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1646              		.loc 1 1397 0
 1647              		@ sp needed for prologue
 1648 002c 00BD     		pop	{pc}
 1649              	.L161:
 1650 002e C046     		.align	2
 1651              	.L160:
 1652 0030 7000F030 		.word	821035120
 1653              		.cfi_endproc
 1654              	.LFE54:
 1656              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1657              		.align	1
 1658              		.global	CAN_GetITStatus
 1659              		.code	16
 1660              		.thumb_func
 1662              	CAN_GetITStatus:
 1663              	.LFB55:
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1664              		.loc 1 1421 0
 1665              		.cfi_startproc
 1666              	.LVL105:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ITStatus itstatus = RESET;
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* check the interrupt enable bit */
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
 1667              		.loc 1 1428 0
 1668 0000 4269     		ldr	r2, [r0, #20]
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1669              		.loc 1 1421 0
 1670 0002 031C     		mov	r3, r0
 1671 0004 00B5     		push	{lr}
 1672              	.LCFI17:
 1673              		.cfi_def_cfa_offset 4
 1674              		.cfi_offset 14, -4
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  {
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* in case the Interrupt is enabled, .... */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     switch (CAN_IT)
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_TME:
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FMP0:
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FF0:
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FOV0:
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FMP1:
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FF1:
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FOV1:
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_WKU:
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_SLK:
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_EWG:
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_EPV:
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_BOF:
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_LEC:
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_LEC bit */
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_ERR:
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       default:
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* in case of error, return RESET */
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = RESET;
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     itstatus  = RESET;
 1675              		.loc 1 1498 0
 1676 0006 0020     		mov	r0, #0
 1677              	.LVL106:
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
 1678              		.loc 1 1428 0
 1679 0008 0A42     		tst	r2, r1
 1680 000a 5AD0     		beq	.L163
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     switch (CAN_IT)
 1681              		.loc 1 1431 0
 1682 000c 4029     		cmp	r1, #64
 1683 000e 3CD0     		beq	.L170
 1684 0010 0ED8     		bhi	.L178
 1685 0012 0429     		cmp	r1, #4
 1686 0014 30D0     		beq	.L166
 1687 0016 04D8     		bhi	.L179
 1688 0018 0129     		cmp	r1, #1
 1689 001a 28D0     		beq	.L164
 1690 001c 0229     		cmp	r1, #2
 1691 001e 4FD1     		bne	.L182
 1692 0020 28E0     		b	.L165
 1693              	.L179:
 1694 0022 1029     		cmp	r1, #16
 1695 0024 2CD0     		beq	.L168
 1696 0026 2029     		cmp	r1, #32
 1697 0028 2DD0     		beq	.L169
 1698 002a 0829     		cmp	r1, #8
 1699 002c 48D1     		bne	.L182
 1700 002e 25E0     		b	.L167
 1701              	.L178:
 1702 0030 8022     		mov	r2, #128
 1703 0032 1201     		lsl	r2, r2, #4
 1704 0034 9142     		cmp	r1, r2
 1705 0036 39D0     		beq	.L174
 1706 0038 0CD8     		bhi	.L180
 1707 003a 8022     		mov	r2, #128
 1708 003c 9200     		lsl	r2, r2, #2
 1709 003e 9142     		cmp	r1, r2
 1710 0040 2FD0     		beq	.L172
 1711 0042 8022     		mov	r2, #128
 1712 0044 D200     		lsl	r2, r2, #3
 1713 0046 9142     		cmp	r1, r2
 1714 0048 2ED0     		beq	.L173
 1715 004a 8022     		mov	r2, #128
 1716 004c 5200     		lsl	r2, r2, #1
 1717 004e 9142     		cmp	r1, r2
 1718 0050 36D1     		bne	.L182
 1719 0052 22E0     		b	.L171
 1720              	.L180:
 1721 0054 8022     		mov	r2, #128
 1722 0056 5202     		lsl	r2, r2, #9
 1723 0058 9142     		cmp	r1, r2
 1724 005a 18D0     		beq	.L176
 1725 005c 8022     		mov	r2, #128
 1726 005e 9202     		lsl	r2, r2, #10
 1727 0060 9142     		cmp	r1, r2
 1728 0062 17D0     		beq	.L177
 1729 0064 8022     		mov	r2, #128
 1730 0066 1202     		lsl	r2, r2, #8
 1731 0068 9142     		cmp	r1, r2
 1732 006a 29D1     		bne	.L182
 1733 006c 24E0     		b	.L175
 1734              	.L164:
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 1735              		.loc 1 1435 0
 1736 006e 9868     		ldr	r0, [r3, #8]
 1737              	.LVL107:
 1738              	.LBB30:
 1739              	.LBB31:
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the CAN_IT status */
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return  itstatus;
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (CAN_IT)
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_TME:
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FF0:
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FOV0:
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FF1:
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FOV1:
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_WKU:
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_SLK:
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_EWG:
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_EPV:
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_BOF:
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        break;
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_LEC:
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /*  Clear LEC bits */
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->ESR = RESET; 
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_ERR:
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /*Clear LEC bits */
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->ESR = RESET; 
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        break;
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default:
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        break;
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    }
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  /**
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ITStatus pendingbitstatus = RESET;
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 1740              		.loc 1 1606 0
 1741 0070 144B     		ldr	r3, .L190
 1742              	.LVL108:
 1743 0072 1DE0     		b	.L186
 1744              	.LVL109:
 1745              	.L165:
 1746              	.LBE31:
 1747              	.LBE30:
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 1748              		.loc 1 1439 0
 1749 0074 D868     		ldr	r0, [r3, #12]
 1750              	.LVL110:
 1751 0076 04E0     		b	.L187
 1752              	.LVL111:
 1753              	.L166:
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 1754              		.loc 1 1443 0
 1755 0078 D868     		ldr	r0, [r3, #12]
 1756              	.LVL112:
 1757 007a 09E0     		b	.L189
 1758              	.LVL113:
 1759              	.L167:
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 1760              		.loc 1 1447 0
 1761 007c D868     		ldr	r0, [r3, #12]
 1762              	.LVL114:
 1763 007e 0AE0     		b	.L188
 1764              	.LVL115:
 1765              	.L168:
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 1766              		.loc 1 1451 0
 1767 0080 1869     		ldr	r0, [r3, #16]
 1768              	.L187:
 1769              	.LVL116:
 1770              	.LBB32:
 1771              	.LBB33:
 1772              		.loc 1 1606 0
 1773 0082 0323     		mov	r3, #3
 1774              	.LVL117:
 1775 0084 14E0     		b	.L186
 1776              	.LVL118:
 1777              	.L169:
 1778              	.LBE33:
 1779              	.LBE32:
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 1780              		.loc 1 1455 0
 1781 0086 1869     		ldr	r0, [r3, #16]
 1782              	.LVL119:
 1783 0088 02E0     		b	.L189
 1784              	.LVL120:
 1785              	.L170:
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 1786              		.loc 1 1459 0
 1787 008a 1869     		ldr	r0, [r3, #16]
 1788              	.LVL121:
 1789 008c 03E0     		b	.L188
 1790              	.LVL122:
 1791              	.L176:
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 1792              		.loc 1 1463 0
 1793 008e 5868     		ldr	r0, [r3, #4]
 1794              	.L189:
 1795              	.LVL123:
 1796              		.loc 1 1606 0
 1797 0090 0007     		lsl	r0, r0, #28
 1798              	.LVL124:
 1799 0092 13E0     		b	.L185
 1800              	.LVL125:
 1801              	.L177:
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 1802              		.loc 1 1467 0
 1803 0094 5868     		ldr	r0, [r3, #4]
 1804              	.L188:
 1805              	.LVL126:
 1806              		.loc 1 1606 0
 1807 0096 C006     		lsl	r0, r0, #27
 1808              	.LVL127:
 1809 0098 10E0     		b	.L185
 1810              	.LVL128:
 1811              	.L171:
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 1812              		.loc 1 1471 0
 1813 009a 9869     		ldr	r0, [r3, #24]
 1814              	.LVL129:
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* CAN_IT is set */
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     pendingbitstatus = SET;
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* CAN_IT is reset */
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     pendingbitstatus = RESET;
 1815              		.loc 1 1614 0
 1816 009c 0123     		mov	r3, #1
 1817              	.LVL130:
 1818 009e 1840     		and	r0, r3
 1819              	.LVL131:
 1820 00a0 0FE0     		b	.L163
 1821              	.LVL132:
 1822              	.L172:
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 1823              		.loc 1 1475 0
 1824 00a2 9869     		ldr	r0, [r3, #24]
 1825              	.LVL133:
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 1826              		.loc 1 1606 0
 1827 00a4 8007     		lsl	r0, r0, #30
 1828              	.LVL134:
 1829 00a6 09E0     		b	.L185
 1830              	.LVL135:
 1831              	.L173:
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 1832              		.loc 1 1479 0
 1833 00a8 9869     		ldr	r0, [r3, #24]
 1834              	.LVL136:
 1835 00aa 06E0     		b	.L184
 1836              	.LVL137:
 1837              	.L174:
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 1838              		.loc 1 1483 0
 1839 00ac 9869     		ldr	r0, [r3, #24]
 1840              	.LVL138:
 1841              	.LBB34:
 1842              	.LBB35:
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 1843              		.loc 1 1606 0
 1844 00ae 7023     		mov	r3, #112
 1845              	.LVL139:
 1846              	.L186:
 1847 00b0 1840     		and	r0, r3
 1848              	.LBE35:
 1849              	.LBE34:
 1850              		.loc 1 1614 0
 1851 00b2 431E     		sub	r3, r0, #1
 1852 00b4 9841     		sbc	r0, r0, r3
 1853 00b6 04E0     		b	.L163
 1854              	.LVL140:
 1855              	.L175:
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 1856              		.loc 1 1487 0
 1857 00b8 5868     		ldr	r0, [r3, #4]
 1858              	.L184:
 1859              	.LVL141:
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 1860              		.loc 1 1606 0
 1861 00ba 4007     		lsl	r0, r0, #29
 1862              	.LVL142:
 1863              	.L185:
 1864              		.loc 1 1614 0
 1865 00bc C00F     		lsr	r0, r0, #31
 1866 00be 00E0     		b	.L163
 1867              	.L182:
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = RESET;
 1868              		.loc 1 1491 0
 1869 00c0 0020     		mov	r0, #0
 1870              	.LVL143:
 1871              	.L163:
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1872              		.loc 1 1503 0
 1873              		@ sp needed for prologue
 1874 00c2 00BD     		pop	{pc}
 1875              	.L191:
 1876              		.align	2
 1877              	.L190:
 1878 00c4 01010100 		.word	65793
 1879              		.cfi_endproc
 1880              	.LFE55:
 1882              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1883              		.align	1
 1884              		.global	CAN_ClearITPendingBit
 1885              		.code	16
 1886              		.thumb_func
 1888              	CAN_ClearITPendingBit:
 1889              	.LFB56:
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1890              		.loc 1 1525 0
 1891              		.cfi_startproc
 1892              	.LVL144:
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (CAN_IT)
 1893              		.loc 1 1530 0
 1894 0000 8023     		mov	r3, #128
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1895              		.loc 1 1525 0
 1896 0002 00B5     		push	{lr}
 1897              	.LCFI18:
 1898              		.cfi_def_cfa_offset 4
 1899              		.cfi_offset 14, -4
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (CAN_IT)
 1900              		.loc 1 1530 0
 1901 0004 5B00     		lsl	r3, r3, #1
 1902 0006 9942     		cmp	r1, r3
 1903 0008 3BD0     		beq	.L209
 1904 000a 0CD8     		bhi	.L206
 1905 000c 0829     		cmp	r1, #8
 1906 000e 2AD0     		beq	.L196
 1907 0010 04D8     		bhi	.L207
 1908 0012 0129     		cmp	r1, #1
 1909 0014 22D0     		beq	.L194
 1910 0016 0429     		cmp	r1, #4
 1911 0018 35D1     		bne	.L192
 1912 001a 22E0     		b	.L195
 1913              	.L207:
 1914 001c 2029     		cmp	r1, #32
 1915 001e 25D0     		beq	.L197
 1916 0020 4029     		cmp	r1, #64
 1917 0022 30D1     		bne	.L192
 1918 0024 24E0     		b	.L198
 1919              	.L206:
 1920 0026 8023     		mov	r3, #128
 1921 0028 1B01     		lsl	r3, r3, #4
 1922 002a 9942     		cmp	r1, r3
 1923 002c 27D0     		beq	.L203
 1924 002e 08D8     		bhi	.L208
 1925 0030 8023     		mov	r3, #128
 1926 0032 9B00     		lsl	r3, r3, #2
 1927 0034 9942     		cmp	r1, r3
 1928 0036 24D0     		beq	.L209
 1929 0038 8023     		mov	r3, #128
 1930 003a DB00     		lsl	r3, r3, #3
 1931 003c 9942     		cmp	r1, r3
 1932 003e 22D1     		bne	.L192
 1933 0040 1FE0     		b	.L209
 1934              	.L208:
 1935 0042 8023     		mov	r3, #128
 1936 0044 5B02     		lsl	r3, r3, #9
 1937 0046 9942     		cmp	r1, r3
 1938 0048 15D0     		beq	.L204
 1939 004a 8023     		mov	r3, #128
 1940 004c 9B02     		lsl	r3, r3, #10
 1941 004e 9942     		cmp	r1, r3
 1942 0050 13D0     		beq	.L205
 1943 0052 8023     		mov	r3, #128
 1944 0054 1B02     		lsl	r3, r3, #8
 1945 0056 9942     		cmp	r1, r3
 1946 0058 15D1     		bne	.L192
 1947 005a 10E0     		b	.L203
 1948              	.L194:
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 1949              		.loc 1 1534 0
 1950 005c 0A4B     		ldr	r3, .L213
 1951 005e 8360     		str	r3, [r0, #8]
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 1952              		.loc 1 1535 0
 1953 0060 11E0     		b	.L192
 1954              	.L195:
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
 1955              		.loc 1 1538 0
 1956 0062 0823     		mov	r3, #8
 1957 0064 00E0     		b	.L211
 1958              	.L196:
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
 1959              		.loc 1 1542 0
 1960 0066 1023     		mov	r3, #16
 1961              	.L211:
 1962 0068 C360     		str	r3, [r0, #12]
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 1963              		.loc 1 1543 0
 1964 006a 0CE0     		b	.L192
 1965              	.L197:
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
 1966              		.loc 1 1546 0
 1967 006c 0823     		mov	r3, #8
 1968 006e 00E0     		b	.L212
 1969              	.L198:
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
 1970              		.loc 1 1550 0
 1971 0070 1023     		mov	r3, #16
 1972              	.L212:
 1973 0072 0361     		str	r3, [r0, #16]
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 1974              		.loc 1 1551 0
 1975 0074 07E0     		b	.L192
 1976              	.L204:
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
 1977              		.loc 1 1554 0
 1978 0076 0823     		mov	r3, #8
 1979 0078 04E0     		b	.L210
 1980              	.L205:
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
 1981              		.loc 1 1558 0
 1982 007a 1023     		mov	r3, #16
 1983 007c 02E0     		b	.L210
 1984              	.L203:
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->ESR = RESET; 
 1985              		.loc 1 1583 0
 1986 007e 0023     		mov	r3, #0
 1987 0080 8361     		str	r3, [r0, #24]
 1988              	.L209:
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
 1989              		.loc 1 1585 0
 1990 0082 0423     		mov	r3, #4
 1991              	.L210:
 1992 0084 4360     		str	r3, [r0, #4]
 1993              	.L192:
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1994              		.loc 1 1591 0
 1995              		@ sp needed for prologue
 1996 0086 00BD     		pop	{pc}
 1997              	.L214:
 1998              		.align	2
 1999              	.L213:
 2000 0088 01010100 		.word	65793
 2001              		.cfi_endproc
 2002              	.LFE56:
 2004              		.text
 2005              	.Letext0:
 2006              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2007              		.file 3 "D:\\EclipseIndigo\\workspace\\cam_hub\\scr/stm32f0xx.h"
 2008              		.file 4 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
 2009              		.file 5 "D:\\EclipseIndigo\\workspace\\cam_hub\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32f0
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_can.c
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:18     .text.CAN_DeInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:23     .text.CAN_DeInit:00000000 CAN_DeInit
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:54     .text.CAN_Init:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:59     .text.CAN_Init:00000000 CAN_Init
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:267    .text.CAN_FilterInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:272    .text.CAN_FilterInit:00000000 CAN_FilterInit
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:450    .text.CAN_FilterInit:000000dc $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:456    .text.CAN_StructInit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:461    .text.CAN_StructInit:00000000 CAN_StructInit
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:499    .text.CAN_SlaveStartBank:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:504    .text.CAN_SlaveStartBank:00000000 CAN_SlaveStartBank
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:550    .text.CAN_SlaveStartBank:00000028 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:556    .text.CAN_DBGFreeze:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:561    .text.CAN_DBGFreeze:00000000 CAN_DBGFreeze
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:592    .text.CAN_DBGFreeze:00000018 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:597    .text.CAN_TTComModeCmd:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:602    .text.CAN_TTComModeCmd:00000000 CAN_TTComModeCmd
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:671    .text.CAN_TTComModeCmd:00000054 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:676    .text.CAN_Transmit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:681    .text.CAN_Transmit:00000000 CAN_Transmit
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:851    .text.CAN_TransmitStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:856    .text.CAN_TransmitStatus:00000000 CAN_TransmitStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:935    .text.CAN_TransmitStatus:0000004c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:942    .text.CAN_CancelTransmit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:947    .text.CAN_CancelTransmit:00000000 CAN_CancelTransmit
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:991    .text.CAN_Receive:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:996    .text.CAN_Receive:00000000 CAN_Receive
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1104   .text.CAN_FIFORelease:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1109   .text.CAN_FIFORelease:00000000 CAN_FIFORelease
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1140   .text.CAN_MessagePending:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1145   .text.CAN_MessagePending:00000000 CAN_MessagePending
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1186   .text.CAN_OperatingModeRequest:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1191   .text.CAN_OperatingModeRequest:00000000 CAN_OperatingModeRequest
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1318   .text.CAN_Sleep:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1323   .text.CAN_Sleep:00000000 CAN_Sleep
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1353   .text.CAN_WakeUp:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1358   .text.CAN_WakeUp:00000000 CAN_WakeUp
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1406   .text.CAN_GetLastErrorCode:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1411   .text.CAN_GetLastErrorCode:00000000 CAN_GetLastErrorCode
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1430   .text.CAN_GetReceiveErrorCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1435   .text.CAN_GetReceiveErrorCounter:00000000 CAN_GetReceiveErrorCounter
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1454   .text.CAN_GetLSBTransmitErrorCounter:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1459   .text.CAN_GetLSBTransmitErrorCounter:00000000 CAN_GetLSBTransmitErrorCounter
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1480   .text.CAN_ITConfig:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1485   .text.CAN_ITConfig:00000000 CAN_ITConfig
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1518   .text.CAN_GetFlagStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1523   .text.CAN_GetFlagStatus:00000000 CAN_GetFlagStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1592   .text.CAN_ClearFlag:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1597   .text.CAN_ClearFlag:00000000 CAN_ClearFlag
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1652   .text.CAN_ClearFlag:00000030 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1657   .text.CAN_GetITStatus:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1662   .text.CAN_GetITStatus:00000000 CAN_GetITStatus
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1878   .text.CAN_GetITStatus:000000c4 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1883   .text.CAN_ClearITPendingBit:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:1888   .text.CAN_ClearITPendingBit:00000000 CAN_ClearITPendingBit
C:\Users\THANGN~1\AppData\Local\Temp\ccbf1kNn.s:2000   .text.CAN_ClearITPendingBit:00000088 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.90b54cb79624a05a6a75538133d4ee2f
                           .group:00000000 wm4.stm32f0xx.h.54.2936c65ea497e2b9f6697d244f204f4f
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.491.56b995fdd6b34ccece7fa7ee90a03d09
                           .group:00000000 wm4.stm32f0xx_adc.h.31.deffd6417c7f5b0940228cd2f9270807
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.ff204b27217b5926452ab2f52b527ff3
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.02fa02b24c01ae505c73e46ccbb612cf
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.stm32f0xx_can.h.50.65c6579eee6394e3108200d2a938f7be

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
