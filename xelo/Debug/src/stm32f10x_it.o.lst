   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	timer_count,4,4
  19              		.comm	check1,4,4
  20              		.comm	check2,4,4
  21              		.comm	check3,4,4
  22              		.comm	check4,4,4
  23              		.global	CLK_count
  24              		.bss
  25              		.align	2
  28              	CLK_count:
  29 0000 00000000 		.space	4
  30              		.global	old_CLK_count
  31              		.align	2
  34              	old_CLK_count:
  35 0004 00000000 		.space	4
  36              		.global	PPS
  37              		.align	2
  40              	PPS:
  41 0008 00000000 		.space	4
  42              		.text
  43              		.align	2
  44              		.global	SysTick_Handler
  45              		.thumb
  46              		.thumb_func
  48              	SysTick_Handler:
  49              	.LFB55:
  50              		.file 1 "../src/stm32f10x_it.c"
   1:../src/stm32f10x_it.c **** /**
   2:../src/stm32f10x_it.c ****  ******************************************************************************
   3:../src/stm32f10x_it.c ****  * @file    GPIO/IOToggle/stm32f10x_it.c
   4:../src/stm32f10x_it.c ****  * @author  MCD Application Team
   5:../src/stm32f10x_it.c ****  * @version V3.6.0
   6:../src/stm32f10x_it.c ****  * @date    24-April-2012
   7:../src/stm32f10x_it.c ****  * @brief   Main Interrupt Service Routines.
   8:../src/stm32f10x_it.c ****  *          This file provides template for all exceptions handler and peripherals
   9:../src/stm32f10x_it.c ****  *          interrupt service routine.
  10:../src/stm32f10x_it.c ****  ******************************************************************************
  11:../src/stm32f10x_it.c ****  * @attention
  12:../src/stm32f10x_it.c ****  *
  13:../src/stm32f10x_it.c ****  * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  14:../src/stm32f10x_it.c ****  *
  15:../src/stm32f10x_it.c ****  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  16:../src/stm32f10x_it.c ****  * You may not use this file except in compliance with the License.
  17:../src/stm32f10x_it.c ****  * You may obtain a copy of the License at:
  18:../src/stm32f10x_it.c ****  *
  19:../src/stm32f10x_it.c ****  *        http://www.st.com/software_license_agreement_liberty_v2
  20:../src/stm32f10x_it.c ****  *
  21:../src/stm32f10x_it.c ****  * Unless required by applicable law or agreed to in writing, software
  22:../src/stm32f10x_it.c ****  * distributed under the License is distributed on an "AS IS" BASIS,
  23:../src/stm32f10x_it.c ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  24:../src/stm32f10x_it.c ****  * See the License for the specific language governing permissions and
  25:../src/stm32f10x_it.c ****  * limitations under the License.
  26:../src/stm32f10x_it.c ****  *
  27:../src/stm32f10x_it.c ****  ******************************************************************************
  28:../src/stm32f10x_it.c ****  */
  29:../src/stm32f10x_it.c **** 
  30:../src/stm32f10x_it.c **** /* Includes ------------------------------------------------------------------*/
  31:../src/stm32f10x_it.c **** #include "stm32f10x_it.h"
  32:../src/stm32f10x_it.c **** #include <string.h>
  33:../src/stm32f10x_it.c **** #include "xprintf.h"
  34:../src/stm32f10x_it.c **** #include "IRsensor.h"
  35:../src/stm32f10x_it.c **** /** @addtogroup STM32F10x_StdPeriph_Examples
  36:../src/stm32f10x_it.c ****  * @{
  37:../src/stm32f10x_it.c ****  */
  38:../src/stm32f10x_it.c **** 
  39:../src/stm32f10x_it.c **** /** @addtogroup GPIO_IOToggle
  40:../src/stm32f10x_it.c ****  * @{
  41:../src/stm32f10x_it.c ****  */
  42:../src/stm32f10x_it.c **** 
  43:../src/stm32f10x_it.c **** /* Private typedef -----------------------------------------------------------*/
  44:../src/stm32f10x_it.c **** /* Private define ------------------------------------------------------------*/
  45:../src/stm32f10x_it.c **** /* Private macro -------------------------------------------------------------*/
  46:../src/stm32f10x_it.c **** /* Private variables ---------------------------------------------------------*/
  47:../src/stm32f10x_it.c **** extern uint32_t MiliCount;
  48:../src/stm32f10x_it.c **** volatile uint32_t timer_count;
  49:../src/stm32f10x_it.c **** volatile uint32_t check1, check2, check3, check4;
  50:../src/stm32f10x_it.c **** uint32_t CLK_count = 0;
  51:../src/stm32f10x_it.c **** uint32_t old_CLK_count = 0;
  52:../src/stm32f10x_it.c **** int PPS = 0;
  53:../src/stm32f10x_it.c **** /* Private function prototypes -----------------------------------------------*/
  54:../src/stm32f10x_it.c **** /* Private functions ---------------------------------------------------------*/
  55:../src/stm32f10x_it.c **** 
  56:../src/stm32f10x_it.c **** /******************************************************************************/
  57:../src/stm32f10x_it.c **** /*            Cortex-M0 Processor Exceptions Handlers                         */
  58:../src/stm32f10x_it.c **** /******************************************************************************/
  59:../src/stm32f10x_it.c **** 
  60:../src/stm32f10x_it.c **** /**
  61:../src/stm32f10x_it.c ****  * @brief  This function handles NMI exception.
  62:../src/stm32f10x_it.c ****  * @param  None
  63:../src/stm32f10x_it.c ****  * @retval None
  64:../src/stm32f10x_it.c ****  */
  65:../src/stm32f10x_it.c **** 
  66:../src/stm32f10x_it.c **** void SysTick_Handler(void) {
  51              		.loc 1 66 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 0000 80B5     		push	{r7, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              	.LCFI1:
  62              		.cfi_def_cfa_register 7
  67:../src/stm32f10x_it.c **** 	MiliCount++;
  63              		.loc 1 67 0
  64 0004 6A4B     		ldr	r3, .L11
  65 0006 1B68     		ldr	r3, [r3, #0]
  66 0008 03F10102 		add	r2, r3, #1
  67 000c 684B     		ldr	r3, .L11
  68 000e 1A60     		str	r2, [r3, #0]
  68:../src/stm32f10x_it.c **** 	if (MiliCount % 1000 == 0) {
  69              		.loc 1 68 0
  70 0010 674B     		ldr	r3, .L11
  71 0012 1A68     		ldr	r2, [r3, #0]
  72 0014 674B     		ldr	r3, .L11+4
  73 0016 A3FB0213 		umull	r1, r3, r3, r2
  74 001a 4FEA9313 		lsr	r3, r3, #6
  75 001e 4FF47A71 		mov	r1, #1000
  76 0022 01FB03F3 		mul	r3, r1, r3
  77 0026 D31A     		subs	r3, r2, r3
  78 0028 002B     		cmp	r3, #0
  79 002a 0BD1     		bne	.L2
  69:../src/stm32f10x_it.c **** 		PPS = CLK_count - old_CLK_count;
  80              		.loc 1 69 0
  81 002c 624B     		ldr	r3, .L11+8
  82 002e 1A68     		ldr	r2, [r3, #0]
  83 0030 624B     		ldr	r3, .L11+12
  84 0032 1B68     		ldr	r3, [r3, #0]
  85 0034 D31A     		subs	r3, r2, r3
  86 0036 1A46     		mov	r2, r3
  87 0038 614B     		ldr	r3, .L11+16
  88 003a 1A60     		str	r2, [r3, #0]
  70:../src/stm32f10x_it.c **** 		old_CLK_count = CLK_count;
  89              		.loc 1 70 0
  90 003c 5E4B     		ldr	r3, .L11+8
  91 003e 1A68     		ldr	r2, [r3, #0]
  92 0040 5E4B     		ldr	r3, .L11+12
  93 0042 1A60     		str	r2, [r3, #0]
  94              	.L2:
  71:../src/stm32f10x_it.c **** 	}
  72:../src/stm32f10x_it.c **** 
  73:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx1_port, IR_Rx1_pin) == 0) {
  95              		.loc 1 73 0
  96 0044 5F48     		ldr	r0, .L11+20
  97 0046 4FF00101 		mov	r1, #1
  98 004a FFF7FEFF 		bl	GPIO_ReadInputDataBit
  99 004e 0346     		mov	r3, r0
 100 0050 002B     		cmp	r3, #0
 101 0052 08D1     		bne	.L3
  74:../src/stm32f10x_it.c **** 		LED1_on;
 102              		.loc 1 74 0
 103 0054 5B48     		ldr	r0, .L11+20
 104 0056 4FF00801 		mov	r1, #8
 105 005a FFF7FEFF 		bl	GPIO_SetBits
  75:../src/stm32f10x_it.c **** 		check1 = 0;
 106              		.loc 1 75 0
 107 005e 5A4B     		ldr	r3, .L11+24
 108 0060 4FF00002 		mov	r2, #0
 109 0064 1A60     		str	r2, [r3, #0]
 110              	.L3:
  76:../src/stm32f10x_it.c **** 	}
  77:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx1_port, IR_Rx1_pin) == 1) {
 111              		.loc 1 77 0
 112 0066 5748     		ldr	r0, .L11+20
 113 0068 4FF00101 		mov	r1, #1
 114 006c FFF7FEFF 		bl	GPIO_ReadInputDataBit
 115 0070 0346     		mov	r3, r0
 116 0072 012B     		cmp	r3, #1
 117 0074 0ED1     		bne	.L4
  78:../src/stm32f10x_it.c **** 		check1++;
 118              		.loc 1 78 0
 119 0076 544B     		ldr	r3, .L11+24
 120 0078 1B68     		ldr	r3, [r3, #0]
 121 007a 03F10102 		add	r2, r3, #1
 122 007e 524B     		ldr	r3, .L11+24
 123 0080 1A60     		str	r2, [r3, #0]
  79:../src/stm32f10x_it.c **** 		if (check1 >= 250) {
 124              		.loc 1 79 0
 125 0082 514B     		ldr	r3, .L11+24
 126 0084 1B68     		ldr	r3, [r3, #0]
 127 0086 F92B     		cmp	r3, #249
 128 0088 04D9     		bls	.L4
  80:../src/stm32f10x_it.c **** 			LED1_off;
 129              		.loc 1 80 0
 130 008a 4E48     		ldr	r0, .L11+20
 131 008c 4FF00801 		mov	r1, #8
 132 0090 FFF7FEFF 		bl	GPIO_ResetBits
 133              	.L4:
  81:../src/stm32f10x_it.c **** 		}
  82:../src/stm32f10x_it.c **** 	}
  83:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx2_port, IR_Rx2_pin) == 0) {
 134              		.loc 1 83 0
 135 0094 4B48     		ldr	r0, .L11+20
 136 0096 4FF01001 		mov	r1, #16
 137 009a FFF7FEFF 		bl	GPIO_ReadInputDataBit
 138 009e 0346     		mov	r3, r0
 139 00a0 002B     		cmp	r3, #0
 140 00a2 08D1     		bne	.L5
  84:../src/stm32f10x_it.c **** 		LED2_on;
 141              		.loc 1 84 0
 142 00a4 4748     		ldr	r0, .L11+20
 143 00a6 4FF08001 		mov	r1, #128
 144 00aa FFF7FEFF 		bl	GPIO_SetBits
  85:../src/stm32f10x_it.c **** 		check2 = 0;
 145              		.loc 1 85 0
 146 00ae 474B     		ldr	r3, .L11+28
 147 00b0 4FF00002 		mov	r2, #0
 148 00b4 1A60     		str	r2, [r3, #0]
 149              	.L5:
  86:../src/stm32f10x_it.c **** 	}
  87:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx2_port, IR_Rx2_pin) == 1) {
 150              		.loc 1 87 0
 151 00b6 4348     		ldr	r0, .L11+20
 152 00b8 4FF01001 		mov	r1, #16
 153 00bc FFF7FEFF 		bl	GPIO_ReadInputDataBit
 154 00c0 0346     		mov	r3, r0
 155 00c2 012B     		cmp	r3, #1
 156 00c4 0ED1     		bne	.L6
  88:../src/stm32f10x_it.c **** 		check2++;
 157              		.loc 1 88 0
 158 00c6 414B     		ldr	r3, .L11+28
 159 00c8 1B68     		ldr	r3, [r3, #0]
 160 00ca 03F10102 		add	r2, r3, #1
 161 00ce 3F4B     		ldr	r3, .L11+28
 162 00d0 1A60     		str	r2, [r3, #0]
  89:../src/stm32f10x_it.c **** 		if (check2 >= 250) {
 163              		.loc 1 89 0
 164 00d2 3E4B     		ldr	r3, .L11+28
 165 00d4 1B68     		ldr	r3, [r3, #0]
 166 00d6 F92B     		cmp	r3, #249
 167 00d8 04D9     		bls	.L6
  90:../src/stm32f10x_it.c **** 			LED2_off;
 168              		.loc 1 90 0
 169 00da 3A48     		ldr	r0, .L11+20
 170 00dc 4FF08001 		mov	r1, #128
 171 00e0 FFF7FEFF 		bl	GPIO_ResetBits
 172              	.L6:
  91:../src/stm32f10x_it.c **** 		}
  92:../src/stm32f10x_it.c **** 	}
  93:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx3_port, IR_Rx3_pin) == 0) {
 173              		.loc 1 93 0
 174 00e4 3A48     		ldr	r0, .L11+32
 175 00e6 4FF01001 		mov	r1, #16
 176 00ea FFF7FEFF 		bl	GPIO_ReadInputDataBit
 177 00ee 0346     		mov	r3, r0
 178 00f0 002B     		cmp	r3, #0
 179 00f2 08D1     		bne	.L7
  94:../src/stm32f10x_it.c **** 		LED3_on;
 180              		.loc 1 94 0
 181 00f4 3748     		ldr	r0, .L11+36
 182 00f6 4FF00201 		mov	r1, #2
 183 00fa FFF7FEFF 		bl	GPIO_SetBits
  95:../src/stm32f10x_it.c **** 		check3 = 0;
 184              		.loc 1 95 0
 185 00fe 364B     		ldr	r3, .L11+40
 186 0100 4FF00002 		mov	r2, #0
 187 0104 1A60     		str	r2, [r3, #0]
 188              	.L7:
  96:../src/stm32f10x_it.c **** 	}
  97:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx3_port, IR_Rx3_pin) == 1) {
 189              		.loc 1 97 0
 190 0106 3248     		ldr	r0, .L11+32
 191 0108 4FF01001 		mov	r1, #16
 192 010c FFF7FEFF 		bl	GPIO_ReadInputDataBit
 193 0110 0346     		mov	r3, r0
 194 0112 012B     		cmp	r3, #1
 195 0114 0ED1     		bne	.L8
  98:../src/stm32f10x_it.c **** 		check3++;
 196              		.loc 1 98 0
 197 0116 304B     		ldr	r3, .L11+40
 198 0118 1B68     		ldr	r3, [r3, #0]
 199 011a 03F10102 		add	r2, r3, #1
 200 011e 2E4B     		ldr	r3, .L11+40
 201 0120 1A60     		str	r2, [r3, #0]
  99:../src/stm32f10x_it.c **** 		if (check3 >= 250) {
 202              		.loc 1 99 0
 203 0122 2D4B     		ldr	r3, .L11+40
 204 0124 1B68     		ldr	r3, [r3, #0]
 205 0126 F92B     		cmp	r3, #249
 206 0128 04D9     		bls	.L8
 100:../src/stm32f10x_it.c **** 			LED3_off;
 207              		.loc 1 100 0
 208 012a 2A48     		ldr	r0, .L11+36
 209 012c 4FF00201 		mov	r1, #2
 210 0130 FFF7FEFF 		bl	GPIO_ResetBits
 211              	.L8:
 101:../src/stm32f10x_it.c **** 		}
 102:../src/stm32f10x_it.c **** 	}
 103:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx4_port, IR_Rx4_pin) == 0) {
 212              		.loc 1 103 0
 213 0134 2748     		ldr	r0, .L11+36
 214 0136 4FF00401 		mov	r1, #4
 215 013a FFF7FEFF 		bl	GPIO_ReadInputDataBit
 216 013e 0346     		mov	r3, r0
 217 0140 002B     		cmp	r3, #0
 218 0142 08D1     		bne	.L9
 104:../src/stm32f10x_it.c **** 		LED4_on;
 219              		.loc 1 104 0
 220 0144 2348     		ldr	r0, .L11+36
 221 0146 4FF48051 		mov	r1, #4096
 222 014a FFF7FEFF 		bl	GPIO_SetBits
 105:../src/stm32f10x_it.c **** 		check4 = 0;
 223              		.loc 1 105 0
 224 014e 234B     		ldr	r3, .L11+44
 225 0150 4FF00002 		mov	r2, #0
 226 0154 1A60     		str	r2, [r3, #0]
 227              	.L9:
 106:../src/stm32f10x_it.c **** 	}
 107:../src/stm32f10x_it.c **** 	if (GPIO_ReadInputDataBit(IR_Rx4_port, IR_Rx4_pin) == 1) {
 228              		.loc 1 107 0
 229 0156 1F48     		ldr	r0, .L11+36
 230 0158 4FF00401 		mov	r1, #4
 231 015c FFF7FEFF 		bl	GPIO_ReadInputDataBit
 232 0160 0346     		mov	r3, r0
 233 0162 012B     		cmp	r3, #1
 234 0164 0ED1     		bne	.L10
 108:../src/stm32f10x_it.c **** 		check4++;
 235              		.loc 1 108 0
 236 0166 1D4B     		ldr	r3, .L11+44
 237 0168 1B68     		ldr	r3, [r3, #0]
 238 016a 03F10102 		add	r2, r3, #1
 239 016e 1B4B     		ldr	r3, .L11+44
 240 0170 1A60     		str	r2, [r3, #0]
 109:../src/stm32f10x_it.c **** 		if (check4 >= 250) {
 241              		.loc 1 109 0
 242 0172 1A4B     		ldr	r3, .L11+44
 243 0174 1B68     		ldr	r3, [r3, #0]
 244 0176 F92B     		cmp	r3, #249
 245 0178 04D9     		bls	.L10
 110:../src/stm32f10x_it.c **** 			LED4_off;
 246              		.loc 1 110 0
 247 017a 1648     		ldr	r0, .L11+36
 248 017c 4FF48051 		mov	r1, #4096
 249 0180 FFF7FEFF 		bl	GPIO_ResetBits
 250              	.L10:
 111:../src/stm32f10x_it.c **** 		}
 112:../src/stm32f10x_it.c **** 	}
 113:../src/stm32f10x_it.c **** 	if ((check1 >= 2000) | (check2 >= 2000) | (check3 >= 2000)
 251              		.loc 1 113 0
 252 0184 104B     		ldr	r3, .L11+24
 253 0186 1A68     		ldr	r2, [r3, #0]
 254 0188 40F2CF73 		movw	r3, #1999
 255 018c 9A42     		cmp	r2, r3
 256 018e 0F4B     		ldr	r3, .L11+28
 257 0190 1A68     		ldr	r2, [r3, #0]
 258 0192 40F2CF73 		movw	r3, #1999
 259 0196 9A42     		cmp	r2, r3
 260 0198 0F4B     		ldr	r3, .L11+40
 261 019a 1A68     		ldr	r2, [r3, #0]
 262 019c 40F2CF73 		movw	r3, #1999
 263 01a0 9A42     		cmp	r2, r3
 114:../src/stm32f10x_it.c **** 			| (check4 >= 2000)) {
 264              		.loc 1 114 0
 265 01a2 0E4B     		ldr	r3, .L11+44
 266 01a4 1A68     		ldr	r2, [r3, #0]
 267 01a6 40F2CF73 		movw	r3, #1999
 268 01aa 9A42     		cmp	r2, r3
 115:../src/stm32f10x_it.c **** 	} else {
 116:../src/stm32f10x_it.c **** 
 117:../src/stm32f10x_it.c **** 	}
 118:../src/stm32f10x_it.c **** }
 269              		.loc 1 118 0
 270 01ac 80BD     		pop	{r7, pc}
 271              	.L12:
 272 01ae 00BF     		.align	2
 273              	.L11:
 274 01b0 00000000 		.word	MiliCount
 275 01b4 D34D6210 		.word	274877907
 276 01b8 00000000 		.word	CLK_count
 277 01bc 00000000 		.word	old_CLK_count
 278 01c0 00000000 		.word	PPS
 279 01c4 00080140 		.word	1073809408
 280 01c8 00000000 		.word	check1
 281 01cc 00000000 		.word	check2
 282 01d0 00100140 		.word	1073811456
 283 01d4 000C0140 		.word	1073810432
 284 01d8 00000000 		.word	check3
 285 01dc 00000000 		.word	check4
 286              		.cfi_endproc
 287              	.LFE55:
 289              		.align	2
 290              		.global	TIM2_IRQHandler
 291              		.thumb
 292              		.thumb_func
 294              	TIM2_IRQHandler:
 295              	.LFB56:
 119:../src/stm32f10x_it.c **** void TIM2_IRQHandler(void) {
 296              		.loc 1 119 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 01e0 80B5     		push	{r7, lr}
 301              	.LCFI2:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 7, -8
 304              		.cfi_offset 14, -4
 305 01e2 00AF     		add	r7, sp, #0
 306              	.LCFI3:
 307              		.cfi_def_cfa_register 7
 120:../src/stm32f10x_it.c **** 	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 308              		.loc 1 120 0
 309 01e4 4FF08040 		mov	r0, #1073741824
 310 01e8 4FF00101 		mov	r1, #1
 311 01ec FFF7FEFF 		bl	TIM_GetITStatus
 312 01f0 0346     		mov	r3, r0
 313 01f2 002B     		cmp	r3, #0
 314 01f4 72D0     		beq	.L13
 121:../src/stm32f10x_it.c **** 		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 315              		.loc 1 121 0
 316 01f6 4FF08040 		mov	r0, #1073741824
 317 01fa 4FF00101 		mov	r1, #1
 318 01fe FFF7FEFF 		bl	TIM_ClearITPendingBit
 122:../src/stm32f10x_it.c **** 		timer_count++;
 319              		.loc 1 122 0
 320 0202 374B     		ldr	r3, .L17
 321 0204 1B68     		ldr	r3, [r3, #0]
 322 0206 03F10102 		add	r2, r3, #1
 323 020a 354B     		ldr	r3, .L17
 324 020c 1A60     		str	r2, [r3, #0]
 123:../src/stm32f10x_it.c **** 		if (timer_count <= 64) {
 325              		.loc 1 123 0
 326 020e 344B     		ldr	r3, .L17
 327 0210 1B68     		ldr	r3, [r3, #0]
 328 0212 402B     		cmp	r3, #64
 329 0214 44D8     		bhi	.L15
 124:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx1_port, IR_Tx1_pin,
 125:../src/stm32f10x_it.c **** 					!GPIO_ReadOutputDataBit(IR_Tx1_port, IR_Tx1_pin));
 330              		.loc 1 125 0
 331 0216 3348     		ldr	r0, .L17+4
 332 0218 4FF00401 		mov	r1, #4
 333 021c FFF7FEFF 		bl	GPIO_ReadOutputDataBit
 334 0220 0346     		mov	r3, r0
 124:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx1_port, IR_Tx1_pin,
 335              		.loc 1 124 0
 336 0222 002B     		cmp	r3, #0
 337 0224 14BF     		ite	ne
 338 0226 0023     		movne	r3, #0
 339 0228 0123     		moveq	r3, #1
 340 022a DBB2     		uxtb	r3, r3
 341 022c 2D48     		ldr	r0, .L17+4
 342 022e 4FF00401 		mov	r1, #4
 343 0232 1A46     		mov	r2, r3
 344 0234 FFF7FEFF 		bl	GPIO_WriteBit
 126:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx2_port, IR_Tx2_pin,
 127:../src/stm32f10x_it.c **** 					!GPIO_ReadOutputDataBit(IR_Tx2_port, IR_Tx2_pin));
 345              		.loc 1 127 0
 346 0238 2A48     		ldr	r0, .L17+4
 347 023a 4FF04001 		mov	r1, #64
 348 023e FFF7FEFF 		bl	GPIO_ReadOutputDataBit
 349 0242 0346     		mov	r3, r0
 126:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx2_port, IR_Tx2_pin,
 350              		.loc 1 126 0
 351 0244 002B     		cmp	r3, #0
 352 0246 14BF     		ite	ne
 353 0248 0023     		movne	r3, #0
 354 024a 0123     		moveq	r3, #1
 355 024c DBB2     		uxtb	r3, r3
 356 024e 2548     		ldr	r0, .L17+4
 357 0250 4FF04001 		mov	r1, #64
 358 0254 1A46     		mov	r2, r3
 359 0256 FFF7FEFF 		bl	GPIO_WriteBit
 128:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx3_port, IR_Tx3_pin,
 129:../src/stm32f10x_it.c **** 					!GPIO_ReadOutputDataBit(IR_Tx3_port, IR_Tx3_pin));
 360              		.loc 1 129 0
 361 025a 2348     		ldr	r0, .L17+8
 362 025c 4FF00101 		mov	r1, #1
 363 0260 FFF7FEFF 		bl	GPIO_ReadOutputDataBit
 364 0264 0346     		mov	r3, r0
 128:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx3_port, IR_Tx3_pin,
 365              		.loc 1 128 0
 366 0266 002B     		cmp	r3, #0
 367 0268 14BF     		ite	ne
 368 026a 0023     		movne	r3, #0
 369 026c 0123     		moveq	r3, #1
 370 026e DBB2     		uxtb	r3, r3
 371 0270 1D48     		ldr	r0, .L17+8
 372 0272 4FF00101 		mov	r1, #1
 373 0276 1A46     		mov	r2, r3
 374 0278 FFF7FEFF 		bl	GPIO_WriteBit
 130:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx4_port, IR_Tx4_pin,
 131:../src/stm32f10x_it.c **** 					!GPIO_ReadOutputDataBit(IR_Tx4_port, IR_Tx4_pin));
 375              		.loc 1 131 0
 376 027c 1A48     		ldr	r0, .L17+8
 377 027e 4FF40061 		mov	r1, #2048
 378 0282 FFF7FEFF 		bl	GPIO_ReadOutputDataBit
 379 0286 0346     		mov	r3, r0
 130:../src/stm32f10x_it.c **** 			GPIO_WriteBit(IR_Tx4_port, IR_Tx4_pin,
 380              		.loc 1 130 0
 381 0288 002B     		cmp	r3, #0
 382 028a 14BF     		ite	ne
 383 028c 0023     		movne	r3, #0
 384 028e 0123     		moveq	r3, #1
 385 0290 DBB2     		uxtb	r3, r3
 386 0292 1548     		ldr	r0, .L17+8
 387 0294 4FF40061 		mov	r1, #2048
 388 0298 1A46     		mov	r2, r3
 389 029a FFF7FEFF 		bl	GPIO_WriteBit
 390 029e 13E0     		b	.L16
 391              	.L15:
 132:../src/stm32f10x_it.c **** 		} else {
 133:../src/stm32f10x_it.c **** 			(GPIO_SetBits(IR_Tx1_port, IR_Tx1_pin));
 392              		.loc 1 133 0
 393 02a0 1048     		ldr	r0, .L17+4
 394 02a2 4FF00401 		mov	r1, #4
 395 02a6 FFF7FEFF 		bl	GPIO_SetBits
 134:../src/stm32f10x_it.c **** 			(GPIO_SetBits(IR_Tx2_port, IR_Tx2_pin));
 396              		.loc 1 134 0
 397 02aa 0E48     		ldr	r0, .L17+4
 398 02ac 4FF04001 		mov	r1, #64
 399 02b0 FFF7FEFF 		bl	GPIO_SetBits
 135:../src/stm32f10x_it.c **** 			(GPIO_SetBits(IR_Tx3_port, IR_Tx3_pin));
 400              		.loc 1 135 0
 401 02b4 0C48     		ldr	r0, .L17+8
 402 02b6 4FF00101 		mov	r1, #1
 403 02ba FFF7FEFF 		bl	GPIO_SetBits
 136:../src/stm32f10x_it.c **** 			(GPIO_SetBits(IR_Tx4_port, IR_Tx4_pin));
 404              		.loc 1 136 0
 405 02be 0A48     		ldr	r0, .L17+8
 406 02c0 4FF40061 		mov	r1, #2048
 407 02c4 FFF7FEFF 		bl	GPIO_SetBits
 408              	.L16:
 137:../src/stm32f10x_it.c **** 
 138:../src/stm32f10x_it.c **** 		}
 139:../src/stm32f10x_it.c **** 		if (timer_count >= 6464) {
 409              		.loc 1 139 0
 410 02c8 054B     		ldr	r3, .L17
 411 02ca 1A68     		ldr	r2, [r3, #0]
 412 02cc 41F63F13 		movw	r3, #6463
 413 02d0 9A42     		cmp	r2, r3
 414 02d2 03D9     		bls	.L13
 140:../src/stm32f10x_it.c **** 			timer_count = 0;
 415              		.loc 1 140 0
 416 02d4 024B     		ldr	r3, .L17
 417 02d6 4FF00002 		mov	r2, #0
 418 02da 1A60     		str	r2, [r3, #0]
 419              	.L13:
 141:../src/stm32f10x_it.c **** 		}
 142:../src/stm32f10x_it.c **** 	}
 143:../src/stm32f10x_it.c **** }
 420              		.loc 1 143 0
 421 02dc 80BD     		pop	{r7, pc}
 422              	.L18:
 423 02de 00BF     		.align	2
 424              	.L17:
 425 02e0 00000000 		.word	timer_count
 426 02e4 00080140 		.word	1073809408
 427 02e8 000C0140 		.word	1073810432
 428              		.cfi_endproc
 429              	.LFE56:
 431              		.comm	buff_cmd_tmp,256,4
 432              		.global	buff_idx
 433              		.bss
 434              		.align	2
 437              	buff_idx:
 438 000c 00000000 		.space	4
 439              		.text
 440              		.align	2
 441              		.global	USART1_IRQHandler
 442              		.thumb
 443              		.thumb_func
 445              	USART1_IRQHandler:
 446              	.LFB57:
 144:../src/stm32f10x_it.c **** extern char buff_cmd[256];
 145:../src/stm32f10x_it.c **** char buff_cmd_tmp[256];
 146:../src/stm32f10x_it.c **** int buff_idx = 0;
 147:../src/stm32f10x_it.c **** void USART1_IRQHandler(void) {
 447              		.loc 1 147 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451 02ec 80B5     		push	{r7, lr}
 452              	.LCFI4:
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 02ee 82B0     		sub	sp, sp, #8
 457              	.LCFI5:
 458              		.cfi_def_cfa_offset 16
 459 02f0 00AF     		add	r7, sp, #0
 460              	.LCFI6:
 461              		.cfi_def_cfa_register 7
 148:../src/stm32f10x_it.c **** 	if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) {
 462              		.loc 1 148 0
 463 02f2 2348     		ldr	r0, .L25
 464 02f4 40F22551 		movw	r1, #1317
 465 02f8 FFF7FEFF 		bl	USART_GetITStatus
 466 02fc 0346     		mov	r3, r0
 467 02fe 012B     		cmp	r3, #1
 468 0300 39D1     		bne	.L19
 469              	.LBB2:
 149:../src/stm32f10x_it.c **** 		char cChar;
 150:../src/stm32f10x_it.c **** 		cChar = USART_ReceiveData(USART1);
 470              		.loc 1 150 0
 471 0302 1F48     		ldr	r0, .L25
 472 0304 FFF7FEFF 		bl	USART_ReceiveData
 473 0308 0346     		mov	r3, r0
 474 030a FB71     		strb	r3, [r7, #7]
 151:../src/stm32f10x_it.c **** 		//xprintf("%c", cChar);
 152:../src/stm32f10x_it.c **** 		if (buff_idx > 255 || cChar == '*') {
 475              		.loc 1 152 0
 476 030c 1D4B     		ldr	r3, .L25+4
 477 030e 1B68     		ldr	r3, [r3, #0]
 478 0310 FF2B     		cmp	r3, #255
 479 0312 02DC     		bgt	.L21
 480              		.loc 1 152 0 is_stmt 0 discriminator 1
 481 0314 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 482 0316 2A2B     		cmp	r3, #42
 483 0318 03D1     		bne	.L22
 484              	.L21:
 153:../src/stm32f10x_it.c **** 			buff_idx = 0;
 485              		.loc 1 153 0 is_stmt 1
 486 031a 1A4B     		ldr	r3, .L25+4
 487 031c 4FF00002 		mov	r2, #0
 488 0320 1A60     		str	r2, [r3, #0]
 489              	.L22:
 154:../src/stm32f10x_it.c **** 		}
 155:../src/stm32f10x_it.c **** 		if (cChar == '#') {
 490              		.loc 1 155 0
 491 0322 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 492 0324 232B     		cmp	r3, #35
 493 0326 16D1     		bne	.L23
 156:../src/stm32f10x_it.c **** 			buff_cmd_tmp[buff_idx] = cChar;
 494              		.loc 1 156 0
 495 0328 164B     		ldr	r3, .L25+4
 496 032a 1B68     		ldr	r3, [r3, #0]
 497 032c 164A     		ldr	r2, .L25+8
 498 032e F979     		ldrb	r1, [r7, #7]
 499 0330 D154     		strb	r1, [r2, r3]
 157:../src/stm32f10x_it.c **** 			buff_idx++;
 500              		.loc 1 157 0
 501 0332 144B     		ldr	r3, .L25+4
 502 0334 1B68     		ldr	r3, [r3, #0]
 503 0336 03F10102 		add	r2, r3, #1
 504 033a 124B     		ldr	r3, .L25+4
 505 033c 1A60     		str	r2, [r3, #0]
 158:../src/stm32f10x_it.c **** 			//copy
 159:../src/stm32f10x_it.c **** 			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
 506              		.loc 1 159 0
 507 033e 114B     		ldr	r3, .L25+4
 508 0340 1B68     		ldr	r3, [r3, #0]
 509 0342 1248     		ldr	r0, .L25+12
 510 0344 1049     		ldr	r1, .L25+8
 511 0346 1A46     		mov	r2, r3
 512 0348 FFF7FEFF 		bl	memcpy
 160:../src/stm32f10x_it.c **** 			buff_idx = 0;
 513              		.loc 1 160 0
 514 034c 0D4B     		ldr	r3, .L25+4
 515 034e 4FF00002 		mov	r2, #0
 516 0352 1A60     		str	r2, [r3, #0]
 517 0354 0AE0     		b	.L24
 518              	.L23:
 161:../src/stm32f10x_it.c **** 		} else {
 162:../src/stm32f10x_it.c **** 			buff_cmd_tmp[buff_idx] = cChar;
 519              		.loc 1 162 0
 520 0356 0B4B     		ldr	r3, .L25+4
 521 0358 1B68     		ldr	r3, [r3, #0]
 522 035a 0B4A     		ldr	r2, .L25+8
 523 035c F979     		ldrb	r1, [r7, #7]
 524 035e D154     		strb	r1, [r2, r3]
 163:../src/stm32f10x_it.c **** 			buff_idx++;
 525              		.loc 1 163 0
 526 0360 084B     		ldr	r3, .L25+4
 527 0362 1B68     		ldr	r3, [r3, #0]
 528 0364 03F10102 		add	r2, r3, #1
 529 0368 064B     		ldr	r3, .L25+4
 530 036a 1A60     		str	r2, [r3, #0]
 531              	.L24:
 164:../src/stm32f10x_it.c **** 		}
 165:../src/stm32f10x_it.c **** 
 166:../src/stm32f10x_it.c **** 		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 532              		.loc 1 166 0
 533 036c 0448     		ldr	r0, .L25
 534 036e 40F22551 		movw	r1, #1317
 535 0372 FFF7FEFF 		bl	USART_ClearITPendingBit
 536              	.L19:
 537              	.LBE2:
 167:../src/stm32f10x_it.c **** 	}
 168:../src/stm32f10x_it.c **** }
 538              		.loc 1 168 0
 539 0376 07F10807 		add	r7, r7, #8
 540 037a BD46     		mov	sp, r7
 541 037c 80BD     		pop	{r7, pc}
 542              	.L26:
 543 037e 00BF     		.align	2
 544              	.L25:
 545 0380 00380140 		.word	1073821696
 546 0384 00000000 		.word	buff_idx
 547 0388 00000000 		.word	buff_cmd_tmp
 548 038c 00000000 		.word	buff_cmd
 549              		.cfi_endproc
 550              	.LFE57:
 552              		.global	BLE_buff_temp
 553              		.bss
 554              		.align	2
 557              	BLE_buff_temp:
 558 0010 00000000 		.space	256
 558      00000000 
 558      00000000 
 558      00000000 
 558      00000000 
 559              		.global	BLE_buff_idx
 560              		.align	2
 563              	BLE_buff_idx:
 564 0110 00000000 		.space	4
 565              		.section	.rodata
 566              		.align	2
 567              	.LC0:
 568 0000 25630D0A 		.ascii	"%c\015\012\000"
 568      00
 569 0005 000000   		.text
 570              		.align	2
 571              		.global	UART4_IRQHandler
 572              		.thumb
 573              		.thumb_func
 575              	UART4_IRQHandler:
 576              	.LFB58:
 169:../src/stm32f10x_it.c **** extern char BLE_buff[256];
 170:../src/stm32f10x_it.c **** char BLE_buff_temp[256] = { 0 };
 171:../src/stm32f10x_it.c **** int BLE_buff_idx = 0;
 172:../src/stm32f10x_it.c **** void UART4_IRQHandler(void) {
 577              		.loc 1 172 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581 0390 80B5     		push	{r7, lr}
 582              	.LCFI7:
 583              		.cfi_def_cfa_offset 8
 584              		.cfi_offset 7, -8
 585              		.cfi_offset 14, -4
 586 0392 82B0     		sub	sp, sp, #8
 587              	.LCFI8:
 588              		.cfi_def_cfa_offset 16
 589 0394 00AF     		add	r7, sp, #0
 590              	.LCFI9:
 591              		.cfi_def_cfa_register 7
 173:../src/stm32f10x_it.c **** 	if (USART_GetITStatus(UART4, USART_IT_RXNE) == SET) {
 592              		.loc 1 173 0
 593 0396 2948     		ldr	r0, .L33
 594 0398 40F22551 		movw	r1, #1317
 595 039c FFF7FEFF 		bl	USART_GetITStatus
 596 03a0 0346     		mov	r3, r0
 597 03a2 012B     		cmp	r3, #1
 598 03a4 45D1     		bne	.L27
 599              	.LBB3:
 174:../src/stm32f10x_it.c **** 		char cChar;
 175:../src/stm32f10x_it.c **** 		cChar = USART_ReceiveData(UART4);
 600              		.loc 1 175 0
 601 03a6 2548     		ldr	r0, .L33
 602 03a8 FFF7FEFF 		bl	USART_ReceiveData
 603 03ac 0346     		mov	r3, r0
 604 03ae FB71     		strb	r3, [r7, #7]
 176:../src/stm32f10x_it.c **** 		xprintf("%c\r\n", cChar);
 605              		.loc 1 176 0
 606 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 607 03b2 2348     		ldr	r0, .L33+4
 608 03b4 1946     		mov	r1, r3
 609 03b6 FFF7FEFF 		bl	xprintf
 177:../src/stm32f10x_it.c **** 		if (BLE_buff_idx > 255 || cChar == '*') {
 610              		.loc 1 177 0
 611 03ba 224B     		ldr	r3, .L33+8
 612 03bc 1B68     		ldr	r3, [r3, #0]
 613 03be FF2B     		cmp	r3, #255
 614 03c0 02DC     		bgt	.L29
 615              		.loc 1 177 0 is_stmt 0 discriminator 1
 616 03c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 617 03c4 2A2B     		cmp	r3, #42
 618 03c6 03D1     		bne	.L30
 619              	.L29:
 178:../src/stm32f10x_it.c **** 			BLE_buff_idx = 0;
 620              		.loc 1 178 0 is_stmt 1
 621 03c8 1E4B     		ldr	r3, .L33+8
 622 03ca 4FF00002 		mov	r2, #0
 623 03ce 1A60     		str	r2, [r3, #0]
 624              	.L30:
 179:../src/stm32f10x_it.c **** 		}
 180:../src/stm32f10x_it.c **** 		if (cChar == '#') {
 625              		.loc 1 180 0
 626 03d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 627 03d2 232B     		cmp	r3, #35
 628 03d4 1DD1     		bne	.L31
 181:../src/stm32f10x_it.c **** 			BLE_buff_temp[BLE_buff_idx] = cChar;
 629              		.loc 1 181 0
 630 03d6 1B4B     		ldr	r3, .L33+8
 631 03d8 1B68     		ldr	r3, [r3, #0]
 632 03da 1B4A     		ldr	r2, .L33+12
 633 03dc F979     		ldrb	r1, [r7, #7]
 634 03de D154     		strb	r1, [r2, r3]
 182:../src/stm32f10x_it.c **** 			BLE_buff_idx++;
 635              		.loc 1 182 0
 636 03e0 184B     		ldr	r3, .L33+8
 637 03e2 1B68     		ldr	r3, [r3, #0]
 638 03e4 03F10102 		add	r2, r3, #1
 639 03e8 164B     		ldr	r3, .L33+8
 640 03ea 1A60     		str	r2, [r3, #0]
 183:../src/stm32f10x_it.c **** 			//copy
 184:../src/stm32f10x_it.c **** 			memcpy(BLE_buff, BLE_buff_temp, BLE_buff_idx);
 641              		.loc 1 184 0
 642 03ec 154B     		ldr	r3, .L33+8
 643 03ee 1B68     		ldr	r3, [r3, #0]
 644 03f0 1648     		ldr	r0, .L33+16
 645 03f2 1549     		ldr	r1, .L33+12
 646 03f4 1A46     		mov	r2, r3
 647 03f6 FFF7FEFF 		bl	memcpy
 185:../src/stm32f10x_it.c **** 			memset(BLE_buff_temp, 0, sizeof(BLE_buff_temp));
 648              		.loc 1 185 0
 649 03fa 1348     		ldr	r0, .L33+12
 650 03fc 4FF00001 		mov	r1, #0
 651 0400 4FF48072 		mov	r2, #256
 652 0404 FFF7FEFF 		bl	memset
 186:../src/stm32f10x_it.c **** 			BLE_buff_idx = 0;
 653              		.loc 1 186 0
 654 0408 0E4B     		ldr	r3, .L33+8
 655 040a 4FF00002 		mov	r2, #0
 656 040e 1A60     		str	r2, [r3, #0]
 657 0410 0AE0     		b	.L32
 658              	.L31:
 187:../src/stm32f10x_it.c **** 		} else {
 188:../src/stm32f10x_it.c **** 			BLE_buff_temp[BLE_buff_idx] = cChar;
 659              		.loc 1 188 0
 660 0412 0C4B     		ldr	r3, .L33+8
 661 0414 1B68     		ldr	r3, [r3, #0]
 662 0416 0C4A     		ldr	r2, .L33+12
 663 0418 F979     		ldrb	r1, [r7, #7]
 664 041a D154     		strb	r1, [r2, r3]
 189:../src/stm32f10x_it.c **** 			//xprintf("%c,%d", BLE_buff_temp[BLE_buff_idx], BLE_buff_idx);
 190:../src/stm32f10x_it.c **** 			BLE_buff_idx++;
 665              		.loc 1 190 0
 666 041c 094B     		ldr	r3, .L33+8
 667 041e 1B68     		ldr	r3, [r3, #0]
 668 0420 03F10102 		add	r2, r3, #1
 669 0424 074B     		ldr	r3, .L33+8
 670 0426 1A60     		str	r2, [r3, #0]
 671              	.L32:
 191:../src/stm32f10x_it.c **** 
 192:../src/stm32f10x_it.c **** 		}
 193:../src/stm32f10x_it.c **** 		USART_ClearITPendingBit(UART4, USART_IT_RXNE);
 672              		.loc 1 193 0
 673 0428 0448     		ldr	r0, .L33
 674 042a 40F22551 		movw	r1, #1317
 675 042e FFF7FEFF 		bl	USART_ClearITPendingBit
 676              	.L27:
 677              	.LBE3:
 194:../src/stm32f10x_it.c **** 	}
 195:../src/stm32f10x_it.c **** }
 678              		.loc 1 195 0
 679 0432 07F10807 		add	r7, r7, #8
 680 0436 BD46     		mov	sp, r7
 681 0438 80BD     		pop	{r7, pc}
 682              	.L34:
 683 043a 00BF     		.align	2
 684              	.L33:
 685 043c 004C0040 		.word	1073761280
 686 0440 00000000 		.word	.LC0
 687 0444 00000000 		.word	BLE_buff_idx
 688 0448 00000000 		.word	BLE_buff_temp
 689 044c 00000000 		.word	BLE_buff
 690              		.cfi_endproc
 691              	.LFE58:
 693              		.align	2
 694              		.global	EXTI9_5_IRQHandler
 695              		.thumb
 696              		.thumb_func
 698              	EXTI9_5_IRQHandler:
 699              	.LFB59:
 196:../src/stm32f10x_it.c **** void EXTI9_5_IRQHandler(void) {
 700              		.loc 1 196 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 1, uses_anonymous_args = 0
 704 0450 80B5     		push	{r7, lr}
 705              	.LCFI10:
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0452 00AF     		add	r7, sp, #0
 710              	.LCFI11:
 711              		.cfi_def_cfa_register 7
 197:../src/stm32f10x_it.c **** 	if (EXTI_GetITStatus(EXTI_Line7) != RESET) {
 712              		.loc 1 197 0
 713 0454 4FF08000 		mov	r0, #128
 714 0458 FFF7FEFF 		bl	EXTI_GetITStatus
 715 045c 0346     		mov	r3, r0
 716 045e 002B     		cmp	r3, #0
 717 0460 09D0     		beq	.L35
 198:../src/stm32f10x_it.c **** 		CLK_count++;
 718              		.loc 1 198 0
 719 0462 054B     		ldr	r3, .L37
 720 0464 1B68     		ldr	r3, [r3, #0]
 721 0466 03F10102 		add	r2, r3, #1
 722 046a 034B     		ldr	r3, .L37
 723 046c 1A60     		str	r2, [r3, #0]
 199:../src/stm32f10x_it.c **** 		EXTI_ClearITPendingBit(EXTI_Line7);
 724              		.loc 1 199 0
 725 046e 4FF08000 		mov	r0, #128
 726 0472 FFF7FEFF 		bl	EXTI_ClearITPendingBit
 727              	.L35:
 200:../src/stm32f10x_it.c **** 	}
 201:../src/stm32f10x_it.c **** }
 728              		.loc 1 201 0
 729 0476 80BD     		pop	{r7, pc}
 730              	.L38:
 731              		.align	2
 732              	.L37:
 733 0478 00000000 		.word	CLK_count
 734              		.cfi_endproc
 735              	.LFE59:
 737              	.Letext0:
 738              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 739              		.file 3 "../src/stm32f10x.h"
 740              		.file 4 "D:\\EclipseIndigo\\workspace\\xelo\\Libraries\\CMSIS\\Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_it.c
                            *COM*:00000004 timer_count
                            *COM*:00000004 check1
                            *COM*:00000004 check2
                            *COM*:00000004 check3
                            *COM*:00000004 check4
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:28     .bss:00000000 CLK_count
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:25     .bss:00000000 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:34     .bss:00000004 old_CLK_count
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:40     .bss:00000008 PPS
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:43     .text:00000000 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:48     .text:00000000 SysTick_Handler
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:274    .text:000001b0 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:289    .text:000001e0 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:294    .text:000001e0 TIM2_IRQHandler
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:425    .text:000002e0 $d
                            *COM*:00000100 buff_cmd_tmp
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:437    .bss:0000000c buff_idx
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:440    .text:000002ec $t
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:445    .text:000002ec USART1_IRQHandler
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:545    .text:00000380 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:557    .bss:00000010 BLE_buff_temp
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:563    .bss:00000110 BLE_buff_idx
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:566    .rodata:00000000 $d
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:570    .text:00000390 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:575    .text:00000390 UART4_IRQHandler
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:685    .text:0000043c $d
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:693    .text:00000450 $t
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:698    .text:00000450 EXTI9_5_IRQHandler
C:\Users\THANGN~1\AppData\Local\Temp\ccxfgiPc.s:733    .text:00000478 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.6e5f3786b89b666b3dcc7c4c84d9d480
                           .group:00000000 wm4.stm32f10x.h.57.69ab29c83f735418a543aa508b559235
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.36d879c1aefb6e578e399a5de749a503
                           .group:00000000 wm4.stm32f10x.h.532.b2b0c08e77686a45dbc3252d064cb2e1
                           .group:00000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:00000000 wm4.stm32f10x_bkp.h.31.74a586c036c8ee5d9205c6728cc8d6ab
                           .group:00000000 wm4.stm32f10x_can.h.31.b14273b95de79d8fbb020ba042473fb1
                           .group:00000000 wm4.stm32f10x_cec.h.31.29c77e36bfe4567e85f26cdcc60def64
                           .group:00000000 wm4.stm32f10x_dac.h.31.116c27cadc3b4ee8aa44ed11b14b64ae
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.31.45f176e9b7a15051b8c69cb2700c78b8
                           .group:00000000 wm4.stm32f10x_dma.h.31.ef16218235edc52b414c0353f44b4bf0
                           .group:00000000 wm4.stm32f10x_exti.h.31.b25bcb4f1a2daad39d2d7dfa4e901646
                           .group:00000000 wm4.stm32f10x_flash.h.31.0203bc95b65c5396b67991e07a675efb
                           .group:00000000 wm4.stm32f10x_fsmc.h.31.a761d459aa046c2769a99b93e8763ba0
                           .group:00000000 wm4.stm32f10x_gpio.h.31.0a32659dbac1fc1055c7cbdc248963be
                           .group:00000000 wm4.stm32f10x_i2c.h.31.93d7dc2d477856f119d957730d4c6f1c
                           .group:00000000 wm4.stm32f10x_iwdg.h.31.959ae9b7e1d603f1e5ae6468c0fc1624
                           .group:00000000 wm4.stm32f10x_pwr.h.31.9168b6921e0cf03b467c7ed90861c701
                           .group:00000000 wm4.stm32f10x_rcc.h.31.2ee3219a25ef4ced658f2fe9d8cd94aa
                           .group:00000000 wm4.stm32f10x_rtc.h.31.00ba78fc0dbb06b6e6783a1e7fccf5a0
                           .group:00000000 wm4.stm32f10x_sdio.h.31.37dab89d08b2364a3dfaace444dec7c3
                           .group:00000000 wm4.stm32f10x_spi.h.31.d2f6e4626887cabe8c98f3a185590a36
                           .group:00000000 wm4.stm32f10x_tim.h.31.6c06f7f26e0864f9cd59597f46ca2c7c
                           .group:00000000 wm4.stm32f10x_usart.h.31.28d75d6af05cefbbfa00cf30a7c8a335
                           .group:00000000 wm4.stm32f10x_wwdg.h.31.4504f930b88ade4f56d1e3f2a11c098b
                           .group:00000000 wm4.misc.h.31.a89fba2040036f6f8c835a78a213e0cd
                           .group:00000000 wm4.stm32f10x.h.8356.9fd2fa84655112ac7dfc5c88beeb383d
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.8aa39ec63c47b0c474529e4131d42f04
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.xprintf.h.6.d201a07af5ece6e00f55504afb5b0533
                           .group:00000000 wm4.IRsensor.h.9.c445ced7d93ca69b00059fdb788a68cb

UNDEFINED SYMBOLS
GPIO_ReadInputDataBit
GPIO_SetBits
GPIO_ResetBits
MiliCount
TIM_GetITStatus
TIM_ClearITPendingBit
GPIO_ReadOutputDataBit
GPIO_WriteBit
USART_GetITStatus
USART_ReceiveData
memcpy
USART_ClearITPendingBit
buff_cmd
xprintf
memset
BLE_buff
EXTI_GetITStatus
EXTI_ClearITPendingBit
